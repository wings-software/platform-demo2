{
    "@version": "2.9.0",
    "@generated": "Fri, 19 Jun 2020 11:38:49",
    "site": [{
        "@name": "http://nodegoat.herokuapp.com",
        "@host": "nodegoat.herokuapp.com",
        "@port": "80",
        "@ssl": "false",
        "alerts": [{
            "pluginid": "10021",
            "alert": "X-Content-Type-Options Header Missing",
            "name": "X-Content-Type-Options Header Missing",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/vendor/theme/sb-admin.css",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/ssrf",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/images/owasplogo.png",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a2",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/login",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a3",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a4",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.js",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a5",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.css",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/theme/font-awesome/css/font-awesome.min.css",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a10",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a6",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/jquery.min.js",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a7",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/html5shiv.js",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a8",
                "method": "GET",
                "param": "X-Content-Type-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "POST",
                "param": "X-Content-Type-Options"
            }],
            "count": "23",
            "solution": "<p>Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.<\/p><p>If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.<\/p>",
            "otherinfo": "<p>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.<\/p><p>At \"High\" threshold this scanner will not alert on client or server error responses.<\/p>",
            "reference": "<p>http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx<\/p><p>https://owasp.org/www-community/Security_Headers<\/p>",
            "sourceid": "3"
        }, {
            "pluginid": "10037",
            "alert": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)",
            "name": "Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/tutorial/a7",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a9%23npm%20outdated",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a8",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/jquery.min.js",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a10",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/login",
                "method": "POST",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a5",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.css",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/theme/font-awesome/css/font-awesome.min.css",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/images/owasplogo.png",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a6",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/login",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/robots.txt",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a3",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/redos",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a4",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/theme/sb-admin.css",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/dashboard",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.js",
                "method": "GET",
                "evidence": "X-Powered-By: Express"
            }],
            "count": "31",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.<\/p>",
            "reference": "<p>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx<\/p><p>http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html<\/p>",
            "sourceid": "3"
        }, {
            "pluginid": "40012",
            "alert": "Cross Site Scripting (Reflected)",
            "name": "Cross Site Scripting (Reflected)",
            "riskcode": "3",
            "confidence": "2",
            "riskdesc": "High (Medium)",
            "desc": "<p>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.<\/p><p>When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.<\/p><p><\/p><p>There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.<\/p><p>Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.<\/p><p>Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "POST",
                "param": "userName",
                "attack": "\"><script>alert(1);<\/script>",
                "evidence": "\"><script>alert(1);<\/script>"
            }, {
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "POST",
                "param": "email",
                "attack": "\"><script>alert(1);<\/script>",
                "evidence": "\"><script>alert(1);<\/script>"
            }],
            "count": "2",
            "solution": "<p>Phase: Architecture and Design<\/p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.<\/p><p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.<\/p><p><\/p><p>Phases: Implementation; Architecture and Design<\/p><p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.<\/p><p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.<\/p><p>Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.<\/p><p><\/p><p>Phase: Architecture and Design<\/p><p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.<\/p><p><\/p><p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.<\/p><p><\/p><p>Phase: Implementation<\/p><p>For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.<\/p><p><\/p><p>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.<\/p><p><\/p><p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.<\/p><p><\/p><p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"<\/p><p><\/p><p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.<\/p>",
            "reference": "<p>http://projects.webappsec.org/Cross-Site-Scripting<\/p><p>http://cwe.mitre.org/data/definitions/79.html<\/p>",
            "cweid": "79",
            "wascid": "8",
            "sourceid": "1"
        }, {
            "pluginid": "40018",
            "alert": "SQL Injection",
            "name": "SQL Injection",
            "riskcode": "3",
            "confidence": "2",
            "riskdesc": "High (Medium)",
            "desc": "<p>SQL injection may be possible.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "POST",
                "param": "userName",
                "attack": "ZAP' AND '1'='1' -- "
            }, {
                "uri": "http://nodegoat.herokuapp.com/login",
                "method": "POST",
                "param": "userName",
                "attack": "ZAP' AND '1'='1' -- "
            }],
            "count": "2",
            "solution": "<p>Do not trust client side input, even if there is client side validation in place.  <\/p><p>In general, type check all data on the server side.<\/p><p>If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'<\/p><p>If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.<\/p><p>If database Stored Procedures can be used, use them.<\/p><p>Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!<\/p><p>Do not create dynamic SQL queries using simple string concatenation.<\/p><p>Escape all data received from the client.<\/p><p>Apply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.<\/p><p>Apply the principle of least privilege by using the least privileged database user possible.<\/p><p>In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.<\/p><p>Grant the minimum database access that is necessary for the application.<\/p>",
            "otherinfo": "<p>The page results were successfully manipulated using the boolean conditions [ZAP' AND '1'='1' -- ] and [ZAP' AND '1'='2' -- ]<\/p><p>The parameter value being modified was stripped from the HTML output for the purposes of the comparison<\/p><p>Data was returned for the original parameter.<\/p><p>The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter<\/p>",
            "reference": "<p>https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html<\/p>",
            "sourceid": "1"
        }, {
            "pluginid": "10055",
            "alert": "CSP Scanner: Wildcard Directive",
            "name": "CSP Scanner: Wildcard Directive",
            "riskcode": "2",
            "confidence": "2",
            "riskdesc": "Medium (Medium)",
            "desc": "<p>The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: <\/p><p>frame-ancestors<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/robots.txt",
                "method": "GET",
                "param": "Content-Security-Policy",
                "evidence": "default-src 'self'"
            }, {
                "uri": "http://nodegoat.herokuapp.com/sitemap.xml",
                "method": "GET",
                "param": "Content-Security-Policy",
                "evidence": "default-src 'self'"
            }],
            "count": "2",
            "solution": "<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.<\/p>",
            "reference": "<p>http://www.w3.org/TR/CSP2/<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://caniuse.com/#search=content+security+policy<\/p><p>http://content-security-policy.com/<\/p><p>https://github.com/shapesecurity/salvation<\/p>",
            "sourceid": "3"
        }, {
            "pluginid": "10020",
            "alert": "X-Frame-Options Header Not Set",
            "name": "X-Frame-Options Header Not Set",
            "riskcode": "2",
            "confidence": "2",
            "riskdesc": "Medium (Medium)",
            "desc": "<p>X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/tutorial/a3",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/redos",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a4",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a1",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a9",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a2",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/signup",
                "method": "POST",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/ssrf",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a7",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a10",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a8",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/login",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a5",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial",
                "method": "GET",
                "param": "X-Frame-Options"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a6",
                "method": "GET",
                "param": "X-Frame-Options"
            }],
            "count": "16",
            "solution": "<p>Most modern Web browsers support the X-Frame-Options HTTP header. Ensure it's set on all web pages returned by your site (if you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. ALLOW-FROM allows specific websites to frame the web page in supported web browsers).<\/p>",
            "reference": "<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options<\/p>",
            "cweid": "16",
            "wascid": "15",
            "sourceid": "3"
        }, {
            "pluginid": "10027",
            "alert": "Information Disclosure - Suspicious Comments",
            "name": "Information Disclosure - Suspicious Comments",
            "riskcode": "0",
            "confidence": "1",
            "riskdesc": "Informational (Low)",
            "desc": "<p>The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/tutorial/a2",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a8",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a1",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a6",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/jquery.min.js",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/redos",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a10",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a7",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a5",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a9",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a4",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/a3",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/ssrf",
                "method": "GET"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/html5shiv.js",
                "method": "GET"
            }],
            "count": "15",
            "solution": "<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.<\/p>",
            "otherinfo": "<p>The following comment/snippet was identified via the pattern: \\bUSER\\b<\/p><p><script src=\"../vendor/html5shiv.js\"><![endif]--><\/p><p><\/head><\/p><p><\/p><p><body><\/p><p><\/p><p>    <div id=\"wrapper\"><\/p><p><\/p><p>        <!-- Sidebar --><\/p><p>        <nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\"><\/p><p>            <!-- Brand and toggle get grouped for better mobile display --><\/p><p>            <div class=\"navbar-header\"><\/p><p>                <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-ex1-collapse\"><\/p><p>                    <span class=\"sr-only\">Toggle navigation<\/span><\/p><p>                    <span class=\"icon-bar\"><\/span><\/p><p>                    <span class=\"icon-bar\"><\/span><\/p><p>                    <span class=\"icon-bar\"><\/span><\/p><p>                <\/button><\/p><p>                <a class=\"navbar-brand\" href=\"/tutorial\"><b>OWASP Node Goat Tutorial:<\/b> Fixing OWASP Top 10 <\/a><\/p><p>            <\/div><\/p><p><\/p><p>            <!-- Collect the nav links, forms, and other content for toggling --><\/p><p>            <div class=\"collapse navbar-collapse navbar-ex1-collapse\"><\/p><p>                <ul class=\"nav navbar-nav side-nav\"><\/p><p>                    <li><a href=\"/tutorial/a1\"><i class=\"fa fa-wrench\"><\/i> A1 Injection<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a2\"><i class=\"fa fa-wrench\"><\/i> A2 Broken Auth<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a3\"><i class=\"fa fa-wrench\"><\/i> A3 XSS<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a4\"><i class=\"fa fa-wrench\"><\/i> A4 Insecure DOR<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a5\"><i class=\"fa fa-wrench\"><\/i> A5 Misconfig<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a6\"><i class=\"fa fa-wrench\"><\/i> A6 Sensitive Data<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a7\"><i class=\"fa fa-wrench\"><\/i> A7 Access Controls<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a8\"><i class=\"fa fa-wrench\"><\/i> A8 CSRF<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a9\"><i class=\"fa fa-wrench\"><\/i> A9 Insecure Components<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/a10\"><i class=\"fa fa-wrench\"><\/i> A10 Redirects<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/redos\"><i class=\"fa\"><\/i> ReDoS Attacks<\/a><\/p><p>                    <\/li><\/p><p>                    <li><a href=\"/tutorial/ssrf\"><i class=\"fa\"><\/i> SSRF<\/a><\/p><p>                    <\/li><\/p><p>                <\/ul><\/p><p><\/p><p>                <ul class=\"nav navbar-nav navbar-right navbar-user\"><\/p><p>                    <li><a href=\"/login\"><i class=\"fa fa-power-off\"><\/i> Exit<\/a><\/p><p>                    <\/li><\/p><p>                <\/ul><\/p><p>            <\/div><\/p><p>            <!-- /.navbar-collapse --><\/p><p>        <\/nav><\/p><p><\/p><p>        <div id=\"page-wrapper\"><\/p><p><\/p><p>            <div class=\"row\"><\/p><p>                <div class=\"col-lg-12\"><\/p><p>                    <h1>A2-Broken Authentication and Session Management <\/p><p>                        <small><\/small><\/p><p>                    <\/h1><\/p><p>                <\/div><\/p><p>            <\/div><\/p><p>            <!-- /.row --><\/p><p>            <\/p><p><div class=\"row\"><\/p><p>    <div class=\"col-lg-12\"><\/p><p>        <div class=\"bs-example\" style=\"margin-bottom: 40px;\"><\/p><p>            <span class=\"label label-warning\">Exploitability: AVERAGE<\/span><\/p><p>            <span class=\"label label-danger\">Prevalence: WIDESPREAD<\/span><\/p><p>            <span class=\"label label-warning\">Detectability: AVERAGE<\/span><\/p><p>            <span class=\"label label-danger\">Technical Impact: SEVERE<\/span><\/p><p>        <\/div><\/p><p>    <\/div><\/p><p><\/div><\/p><p><\/p><p><div class=\"row\"><\/p><p>    <div class=\"col-lg-12\"><\/p><p>        <div class=\"panel panel-info\"><\/p><p>            <div class=\"panel-heading\"><\/p><p>                <h3 class=\"panel-title\">Description<\/h3><\/p><p>            <\/div><\/p><p>            <div class=\"panel-body\"><\/p><p>                <p><\/p><p>                    In this attack, an attacker (who can be anonymous external attacker, a user with own account who may attempt to steal data from accounts, or an insider wanting to disguise his or her actions) uses leaks or flaws in the authentication or session management functions to impersonate other users. Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities.<\/p><p>                <\/p><\/p><p>                <p><\/p><p>                    Developers frequently build custom authentication and session management schemes, but building these correctly is hard. As a result, these custom schemes frequently have flaws in areas such as logout, password management, timeouts, remember me, secret question, account update, etc. Finding such flaws can sometimes be difficult, as each implementation is unique.<\/p><p>                <\/p><\/p><p>            <\/div><\/p><p><\/p><p>        <\/div><\/p><p>        <!--<\/p><p>        <div class=\"panel panel-info\"><\/p><p>            <div class=\"panel-heading\"><\/p><p>                <h3 class=\"panel-title\">Real World Attack Incident Examples<\/h3><\/p><p>            <\/div><\/p><p>            <div class=\"panel-body\"><\/p><p>                Screencast here ...<\/p><p>            <\/div><\/p><p>        <\/div><\/p><p>--><\/p><p>    <\/div><\/p><p><\/div><\/p><p><\/p><p><!-- accordions --><\/p><p><div class=\"panel-group\" id=\"accordion\"><\/p><p><\/p><p>    <div class=\"panel panel-info\"><\/p><p>        <div class=\"panel-heading\"><\/p><p>            <h4 class=\"panel-title\"><\/p><p>                <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseTwo\"><\/p><p>                    <i class=\"fa fa-chevron-down\"><\/i> A2 - 1 Session Management<\/p><p>                <\/a><\/p><p>            <\/h4><\/p><p>        <\/div><\/p><p>        <div id=\"collapseTwo\" class=\"panel-collapse collapse in\"><\/p><p>            <div class=\"panel-body\"><\/p><p><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Description<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        Session management is a critical piece of application security. It is broader risk, and requires developers take care of protecting session id, user credential secure storage, session duration, and protecting critical session data in transit.<\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Attack Mechanics<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        <p><b>Scenario #1:<\/b> Application timeouts aren't set properly. User uses a public computer to access site. Instead of selecting “logout” the user simply closes the browser tab and walks away. Attacker uses the same browser an hour later, and that browser is still authenticated.<\/p><\/p><p><\/p><p>                        <p><b>Scenario #2: <\/b>Attacker acts as a man-in-middle and acquires user's session id from network traffic. Then uses this authenticated session id to connect to application without needing to enter user name and password.<\/p><\/p><p><\/p><p>                        <p><b>Scenario #3: <\/b>Insider or external attacker gains access to the system's password database. User passwords are not properly hashed, exposing every users' password to the attacker.<\/p><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">How Do I Prevent It?<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        Session management related security issues can be prevented by taking these measures:<\/p><p>                        <ul><\/p><p>                            <li>User authentication credentials should be protected when stored using hashing or encryption.<\/li><\/p><p>                            <li>Session IDs should not be exposed in the URL (e.g., URL rewriting).<\/li><\/p><p>                            <li>Session IDs should timeout. User sessions or authentication tokens should get properly invalidated during logout.<\/li><\/p><p>                            <li>Session IDs should be recreated after successful login.<\/li><\/p><p>                            <li>Passwords, session IDs, and other credentials should not be sent over unencrypted connections.<\/li><\/p><p>                        <\/ul><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Source Code Examples<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        <p>In the insecure demo app, following issues exists:<\/p><\/p><p>                        <h3>1. Protecting user credentials<\/h3><\/p><p>                        <p>password gets stored in database in plain text . Here is related code in<\/p><p>                            <code>data/user-dao.js<\/code><\/p><p>                            <code>addUser()<\/code>method:<\/p><p>                            <pre><\/p><p>// Create user document<\/p><p>var user = {<\/p><p>    userName: userName,<\/p><p>    firstName: firstName,<\/p><p>    lastName: lastName,<\/p><p>    password: password //received from request param<\/p><p>};<\/p><p>                        <\/pre> To secure it, handle password storage in a safer way by using one way encryption using salt hashing as below:<\/p><\/p><p>                        <pre><\/p><p>// Generate password hash<\/p><p>var salt = bcrypt.genSaltSync();<\/p><p>var passwordHash = bcrypt.hashSync(password, salt);<\/p><p><\/p><p>// Create user document<\/p><p>var user = {<\/p><p>    userName: userName,<\/p><p>    firstName: firstName,<\/p><p>    lastName: lastName,<\/p><p>    password: passwordHash<\/p><p>};<\/p><p>                        <\/pre> This hash password can not be decrypted, hence more secure. To compare the password when user logs in, the user entered password gets converted to hash and compared with the hash in storage.<\/p><p><\/p><p>                        <pre><\/p><p>if (bcrypt.compareSync(password, user.password)) {<\/p><p>    callback(null, user);<\/p><p>} else {<\/p><p>    callback(invalidPasswordError, null);<\/p><p>}<\/p><p>                        <\/pre> Note: The bcrypt module also provides asynchronous methods for creating and comparing hash.<\/p><p>                        <br/><\/p><p>                        <br/><\/p><p>                        <h3>2. Session timeout and protecting cookies in transit<\/h3><\/p><p><\/p><p>                        <p>The insecure demo application does not contain any provision to timeout user session. The session stays active until user explicitly logs out.<\/p><\/p><p><\/p><p>                        <p>In addition to that, the app does not prevent cookies being accessed in script, making application vulnerable to Cross Site Scripting (XSS) attacks. Also cookies are not prevented to get sent on insecure HTTP connection.<\/p><\/p><p><\/p><p>                        <p>To secure the application:<\/p><\/p><p>                        <p>1. Use session based timeouts, terminate session when browser closes.<\/p><\/p><p>                        <pre><\/p><p>// Enable session management using express middleware<\/p><p>app.use(express.cookieParser());<\/p><p> <\/pre><\/p><p>                        <p>2. In addition, sets<\/p><p>                            <code>HTTPOnly<\/code>HTTP header preventing cookies being accessed by scripts. The application used HTTPS secure connections, and cookies are configured to be sent only on Secure HTTPS connections by setting<\/p><p>                            <code>Secure<\/code>flag.<\/p><p>                            <pre><\/p><p>app.use(express.session({<\/p><p>    secret: \"s3Cur3\",<\/p><p>    cookie: {<\/p><p>        httpOnly: true,<\/p><p>        secure: true<\/p><p>    }<\/p><p>}));<\/p><p>                        <\/pre><\/p><p>                        <\/p><\/p><p>                        <p><\/p><p>                            3. When user clicks logout, destroy the session and session cookie<\/p><p>                            <pre><\/p><p>req.session.destroy(function() {<\/p><p>    res.redirect(\"/\");<\/p><p>});<\/p><p>                        <\/pre> Note: The example code uses<\/p><p>                            <code>MemoryStore<\/code>to manage session data, which is not designed for production environment, as it will leak memory, and will not scale past a single process. Use database based storage MongoStore or RedisStore for production. Alternatively, sessions can be managed using popular passport module.<\/p><p>                        <br/><\/p><p>                        <br/><\/p><p>                        <h3>3. Session hijacking<\/h3><\/p><p><\/p><p>                        <p>The insecure demo application does not regenerate a new session id upon user's login, therefore rendering a vulnerability of session hijacking if an attacker is able to somehow steal the cookie with the session id and use it.<\/p><p><\/p><p>                        <p>Upon login, a security best practice with regards to cookies session management would be to regenerate the session id so that if an id was already created for a user on an insecure medium (i.e: non-HTTPS website or otherwise), or if an attacker was able to get their hands on the cookie id before the user logged-in, then the old session id will render useless as the logged-in user with new privileges holds a new session id now.<\/p><p>                    <\/p><\/p><p><\/p><p>                        <p>To secure the application:<\/p><\/p><p>                        <p>1. Re-generate a new session id upon login (and best practice is to keep regenerating them<\/p><p>upon requests or at least upon sensitive actions like a user's password reset.<\/p><p><\/p><p>                            Re-generate a session id as follows:<\/p><p>                            By wrapping the below code as a function callback for the method req.session.regenerate()<\/p><p>                            <pre><\/p><p>req.session.regenerate(function() {<\/p><p><\/p><p>  req.session.userId = user._id;<\/p><p><\/p><p>  if (user.isAdmin) {<\/p><p>    return res.redirect(\"/benefits\");<\/p><p>  } else {<\/p><p>    return res.redirect(\"/dashboard\");<\/p><p>  }<\/p><p><\/p><p>})<\/p><p>                        <\/pre><\/p><p>                        <\/p><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Further Reading<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        <ul><\/p><p>                            <li><a href=\"https://npmjs.org/package/helmet\">Helmet<\/a> Security header middleware collection for express<\/li><\/p><p>                            <li><a href=\"http://recxltd.blogspot.sg/2012/03/seven-web-server-http-headers-that.html\">Seven Web Server HTTP Headers that Improve Web Application Security for Free<\/a><\/p><p>                            <\/li><\/p><p>                            <li><a href=\"http://passportjs.org/guide/authenticate/\">Passport<\/a> authentication middleware<\/li><\/p><p>                            <li><a href=\"http://en.wikipedia.org/wiki/Session_fixation\">CWE-384: Session Fixation<\/a><\/p><p>                            <\/li><\/p><p>                        <\/ul><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p><\/p><p>            <\/div><\/p><p>        <\/div><\/p><p>    <\/div><\/p><p>    <!-- /Session Management --><\/p><p><\/p><p>    <div class=\"panel panel-info\"><\/p><p>        <div class=\"panel-heading\"><\/p><p>            <h4 class=\"panel-title\"><\/p><p>                <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseOne\"><\/p><p>                    <i class=\"fa fa-chevron-down\"><\/i> A2 - 2 Password Guessing Attacks<\/p><p>                <\/a><\/p><p>            <\/h4><\/p><p>        <\/div><\/p><p>        <div id=\"collapseOne\" class=\"panel-collapse collapse in\"><\/p><p>            <div class=\"panel-body\"><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Description<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        Implementing a robust minimum password criteria (minimum length and complexity) can make it difficult for attacker to guess password.<\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p>                <!--  <\/p><p>                <div class=\"panel panel-info\"> <\/p><p>                    <div class=\"panel-heading\"> <\/p><p>                        <h3 class=\"panel-title\">Attack Scenario Demo<\/h3> <\/p><p>                    <\/div> <\/p><p>                    <div class=\"panel-body\"> <\/p><p>                        Screencast showing how attack can manifest in the target application ... <\/p><p>                    <\/div> <\/p><p>                <\/div> <\/p><p>                --><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Attack Mechanics<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        <p><\/p><p>                            The attacker can exploit this vulnerability by brute force password guessing, more likely using tools that generate random passwords.<\/p><p>                        <\/p><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">How Do I Prevent It?<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        <p><b>Password length<\/b><\/p><p>                        <\/p><\/p><p>                        <p>Minimum passwords length should be at least eight (8) characters long. Combining this length with complexity makes a password difficult to guess and/or brute force.<\/p><\/p><p>                        <p><b>Password complexity<\/b><\/p><p>                        <\/p><\/p><p>                        <p>Password characters should be a combination of alphanumeric characters. Alphanumeric characters consist of letters, numbers, punctuation marks, mathematical and other conventional symbols.<\/p><\/p><p>                        <p><b>Username/Password Enumeration<\/b><\/p><p>                        <\/p><\/p><p>                        <p>Authentication failure responses should not indicate which part of the authentication data was incorrect. For example, instead of \"Invalid username\" or \"Invalid password\", just use \"Invalid username and/or password\" for both. Error responses must be truly identical in both display and source code<\/p><\/p><p><\/p><p>                        <p><b>Additional Measures<\/b><\/p><p>                        <\/p><\/p><p>                        <p><\/p><p>                            <ul><\/p><p>                                <li>For additional protection against brute forcing, enforce account disabling after an established number of invalid login attempts (e.g., five attempts is common). The account must be disabled for a period of time sufficient to discourage brute force guessing of credentials, but not so long as to allow for a denial-of-service attack to be performed.<\/li><\/p><p>                                <li>Only send non-temporary passwords over an encrypted connection or as encrypted data, such as in an encrypted email. Temporary passwords associated with email resets may be an exception. Enforce the changing of temporary passwords on the next use. Temporary passwords and links should have a short expiration time.<\/li><\/p><p>                            <\/ul><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p>                <div class=\"panel panel-default\"><\/p><p>                    <div class=\"panel-heading\"><\/p><p>                        <h3 class=\"panel-title\">Source Code Example<\/h3><\/p><p>                    <\/div><\/p><p>                    <div class=\"panel-body\"><\/p><p>                        <p><\/p><p>                            The demo application doesn't enforce strong password. In routes/session.js<\/p><p>                            <code>validateSignup()<\/code>method, the regex for password enforcement is simply <pre>var PASS_RE = /^.{1,20}$/;<\/pre><\/p><p>                        <\/p><\/p><p>                        <p><\/p><p>                            A stronger password can be enforced using the regex below, which requires at least 8 character password with numbers and both lowercase and uppercase letters.<\/p><p>                            <pre>var PASS_RE =/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}$/;<\/pre><\/p><p>                        <\/p><\/p><p>                        <p><\/p><p>                            Another issue, in routes/session.js, the<\/p><p>                            <code>handleLoginRequest()<\/code>enumerated whether password was incorrect or user doesn't exist.This information can be valuable to an attacker with brute forcing attempts. This can be easily fixed using a generic error message such as \"Invalid username and/or password\".<\/p><p>                        <\/p><\/p><p>                    <\/div><\/p><p>                <\/div><\/p><p>            <\/div><\/p><p>        <\/div><\/p><p>    <\/div><\/p><p>    <!-- /Password Complexity --><\/p><p><\/p><p><\/p><p><\/div><\/p><p><!-- end accordions --><\/p><p><\/p><p>        <\/div><\/p><p>        <!-- /#page-wrapper --><\/p><p><\/p><p>    <\/div><\/p><p>    <!-- /#wrapper --><\/p><p><\/p><p>    <script src=\"../vendor/jquery.min.js\"><\/script><\/p><p><\/p>",
            "reference": "<p><\/p>",
            "cweid": "200",
            "wascid": "13",
            "sourceid": "3"
        }, {
            "pluginid": "40012",
            "alert": "Cross Site Scripting (Reflected)",
            "name": "Cross Site Scripting (Reflected)",
            "riskcode": "3",
            "confidence": "1",
            "riskdesc": "High (Low)",
            "desc": "<p>Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user's browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.<\/p><p>When an attacker gets a user's browser to execute his/her code, the code will run within the security context (or zone) of the hosting web site. With this level of privilege, the code has the ability to read, modify and transmit any sensitive data accessible by the browser. A Cross-site Scripted user could have his/her account hijacked (cookie theft), their browser redirected to another location, or possibly shown fraudulent content delivered by the web site they are visiting. Cross-site Scripting attacks essentially compromise the trust relationship between a user and the web site. Applications utilizing browser object instances which load content from the file system may execute code under the local machine zone allowing for system compromise.<\/p><p><\/p><p>There are three types of Cross-site Scripting attacks: non-persistent, persistent and DOM-based.<\/p><p>Non-persistent attacks and DOM-based attacks require a user to either visit a specially crafted link laced with malicious code, or visit a malicious web page containing a web form, which when posted to the vulnerable site, will mount the attack. Using a malicious form will oftentimes take place when the vulnerable resource only accepts HTTP POST requests. In such a case, the form can be submitted automatically, without the victim's knowledge (e.g. by using JavaScript). Upon clicking on the malicious link or submitting the malicious form, the XSS payload will get echoed back and will get interpreted by the user's browser and execute. Another technique to send almost arbitrary requests (GET and POST) is by using an embedded client, such as Adobe Flash.<\/p><p>Persistent attacks occur when the malicious code is submitted to a web site where it's stored for a period of time. Examples of an attacker's favorite targets often include message board posts, web mail messages, and web chat software. The unsuspecting user is not required to interact with any additional site/link (e.g. an attacker site or a malicious link sent via email), just simply view the web page containing the code.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/login",
                "method": "POST",
                "param": "userName",
                "attack": "'\"<script>alert(1);<\/script>",
                "evidence": "'\"<script>alert(1);<\/script>"
            }],
            "count": "1",
            "solution": "<p>Phase: Architecture and Design<\/p><p>Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.<\/p><p>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.<\/p><p><\/p><p>Phases: Implementation; Architecture and Design<\/p><p>Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.<\/p><p>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.<\/p><p>Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.<\/p><p><\/p><p>Phase: Architecture and Design<\/p><p>For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.<\/p><p><\/p><p>If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.<\/p><p><\/p><p>Phase: Implementation<\/p><p>For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.<\/p><p><\/p><p>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.<\/p><p><\/p><p>Assume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a blacklist). However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.<\/p><p><\/p><p>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"<\/p><p><\/p><p>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.<\/p>",
            "reference": "<p>http://projects.webappsec.org/Cross-Site-Scripting<\/p><p>http://cwe.mitre.org/data/definitions/79.html<\/p>",
            "cweid": "79",
            "wascid": "8",
            "sourceid": "1"
        }, {
            "pluginid": "10096",
            "alert": "Timestamp Disclosure - Unix",
            "name": "Timestamp Disclosure - Unix",
            "riskcode": "0",
            "confidence": "1",
            "riskdesc": "Informational (Low)",
            "desc": "<p>A timestamp was disclosed by the application/web server - Unix<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/tutorial/a8",
                "method": "GET",
                "evidence": "88888888"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.css",
                "method": "GET",
                "evidence": "00000000"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.css",
                "method": "GET",
                "evidence": "80000000"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.css",
                "method": "GET",
                "evidence": "1428571435"
            }, {
                "uri": "http://nodegoat.herokuapp.com/vendor/bootstrap/bootstrap.css",
                "method": "GET",
                "evidence": "428571429"
            }],
            "count": "5",
            "solution": "<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.<\/p>",
            "otherinfo": "<p>88888888, which evaluates to: 1972-10-25 15:21:28<\/p>",
            "reference": "<p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>",
            "cweid": "200",
            "wascid": "13",
            "sourceid": "3"
        }, {
            "pluginid": "0",
            "alert": "Directory Browsing",
            "name": "Directory Browsing",
            "riskcode": "2",
            "confidence": "2",
            "riskdesc": "Medium (Medium)",
            "desc": "<p>It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/tutorial/a1/",
                "method": "GET",
                "attack": "parent directory"
            }, {
                "uri": "http://nodegoat.herokuapp.com/tutorial/",
                "method": "GET",
                "attack": "parent directory"
            }],
            "count": "2",
            "solution": "<p>Disable directory browsing.  If this is required, make sure the listed files does not induce risks.<\/p>",
            "reference": "<p>http://httpd.apache.org/docs/mod/core.html#options<\/p><p>http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html<\/p><p><\/p>",
            "cweid": "548",
            "wascid": "48",
            "sourceid": "1"
        }, {
            "pluginid": "90022",
            "alert": "Application Error Disclosure",
            "name": "Application Error Disclosure",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/tutorial/a9%23npm%20outdated",
                "method": "GET",
                "evidence": "HTTP/1.1 500 Internal Server Error"
            }],
            "count": "1",
            "solution": "<p>Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.<\/p>",
            "reference": "<p><\/p>",
            "cweid": "200",
            "wascid": "13",
            "sourceid": "3"
        }, {
            "pluginid": "10054",
            "alert": "Cookie Without SameSite Attribute",
            "name": "Cookie Without SameSite Attribute",
            "riskcode": "1",
            "confidence": "2",
            "riskdesc": "Low (Medium)",
            "desc": "<p>A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.<\/p>",
            "instances": [{
                "uri": "http://nodegoat.herokuapp.com/robots.txt",
                "method": "GET",
                "param": "connect.sid",
                "evidence": "Set-Cookie: connect.sid"
            }, {
                "uri": "http://nodegoat.herokuapp.com:80",
                "method": "GET",
                "param": "connect.sid",
                "evidence": "Set-Cookie: connect.sid"
            }],
            "count": "2",
            "solution": "<p>Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.<\/p>",
            "reference": "<p>https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site<\/p>",
            "sourceid": "3"
        }]
    }]
}
