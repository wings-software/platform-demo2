[
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "1274678095767304960",
                        "_raw_entity": {
                            "ref": "1733046179033861888"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": null,
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    },
                    {
                        "_raw_@id": "6519143054622279168",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-6326364971019914496",
                        "_raw_entity": {
                            "ref": "-3873382253807372032"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "search.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "7735226999400937216",
                        "_raw_entity": {
                            "ref": "2309187148794231040"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "index.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-8766011227639941376",
                        "_raw_entity": {
                            "ref": "4927821206135434240"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "main.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "ContentSecurityPolicy",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": null,
                            "link": [
                                {
                                    "#text": "http://httpd.apache.org/docs/2.2/mod/mod_headers.html",
                                    "@target": "http://httpd.apache.org/docs/2.2/mod/mod_headers.html"
                                },
                                {
                                    "#text": "https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx",
                                    "@target": "https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"
                                },
                                {
                                    "#text": "http://nginx.org/en/docs/http/ngx_http_headers_module.html",
                                    "@target": "http://nginx.org/en/docs/http/ngx_http_headers_module.html"
                                }
                            ],
                            "text": [
                                "Configure your server to send the \"Content-Security-Policy\" header.",
                                "For Apache, see:",
                                "For IIS, see:",
                                "For nginx, see:"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Configure your server to send the \"Content-Security-Policy\" header.",
                    "For Apache, see:",
                    "For IIS, see:",
                    "For nginx, see:"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61770",
                    "name": "Config your server to use the \"Content-Security-Policy\" header with secure policies",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Config your server to use the \"Content-Security-Policy\" header with secure policies"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "ContentSecurityPolicy",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_2"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "200",
                                "@id": "CWE-200",
                                "@target": "http://cwe.mitre.org/data/definitions/200.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "ContentSecurityPolicy",
                                "@type": "General"
                            }
                        },
                        "name": "Missing or insecure \"Content-Security-Policy\" header",
                        "references": {
                            "link": [
                                {
                                    "#text": "List of useful HTTP headers",
                                    "@target": "https://www.owasp.org/index.php/List_of_useful_HTTP_headers"
                                },
                                {
                                    "#text": "An Introduction to Content Security Policy",
                                    "@target": "http://www.html5rocks.com/en/tutorials/security/content-security-policy/"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "sensitiveInformation",
                                "phishing"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "text": [
                                "The \"Content-Security-Policy\" header is designed to modify the way browsers render pages, and thus to protect from various cross-site injections, including Cross-Site Scripting. It is important to set the header value correctly, in a way that will not prevent proper operation of the web site. For example, if the header is set to prevent execution of inline JavaScript, the web site must not use inline JavaScript in it's pages.",
                                "To protect against Cross-Site Scripting, it is important to set the 'default-src' policy, or 'script-src' AND 'object-src' with proper values. Insecure values such as '*', 'data:', 'unsafe-inline', or 'unsafe-eval' should be avoided.",
                                "In addition, to protect against Cross-Frame Scripting or clickjacking, it is important to set the 'frame-ancestors' policy with proper values. Insecure values such as '*' or 'data:' should be avoided."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations",
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "ContentSecurityPolicy"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "200"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "ContentSecurityPolicy"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61770"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "sensitiveInformation",
                        "phishing"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The \"Content-Security-Policy\" header is designed to modify the way browsers render pages, and thus to protect from various cross-site injections, including Cross-Site Scripting. It is important to set the header value correctly, in a way that will not prevent proper operation of the web site. For example, if the header is set to prevent execution of inline JavaScript, the web site must not use inline JavaScript in it's pages. To protect against Cross-Site Scripting, it is important to set the 'default-src' policy, or 'script-src' AND 'object-src' with proper values. Insecure values such as '*', 'data:', 'unsafe-inline', or 'unsafe-eval' should be avoided. In addition, to protect against Cross-Frame Scripting or clickjacking, it is important to set the 'frame-ancestors' policy with proper values. Insecure values such as '*' or 'data:' should be avoided.",
        "issueName": "Missing or insecure \"Content-Security-Policy\" header",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "ContentSecurityPolicy",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "200",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-7001112304346128896",
                        "_raw_entity": {
                            "ref": "1733046179033861888"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": null,
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    },
                    {
                        "_raw_@id": "-5635236769658960128",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-5421696920609768192",
                        "_raw_entity": {
                            "ref": "-3873382253807372032"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "search.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "9077704812346756096",
                        "_raw_entity": {
                            "ref": "2309187148794231040"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "index.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-4302372931925019136",
                        "_raw_entity": {
                            "ref": "4927821206135434240"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "main.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "ContentTypeOptions",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": null,
                            "link": [
                                {
                                    "#text": "http://httpd.apache.org/docs/2.2/mod/mod_headers.html",
                                    "@target": "http://httpd.apache.org/docs/2.2/mod/mod_headers.html"
                                },
                                {
                                    "#text": "https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx",
                                    "@target": "https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"
                                },
                                {
                                    "#text": "http://nginx.org/en/docs/http/ngx_http_headers_module.html",
                                    "@target": "http://nginx.org/en/docs/http/ngx_http_headers_module.html"
                                }
                            ],
                            "text": [
                                "Configure your server to send the \"X-Content-Type-Options\" header with value \"nosniff\" on all outgoing requests.",
                                "For Apache, see:",
                                "For IIS, see:",
                                "For nginx, see:"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Configure your server to send the \"X-Content-Type-Options\" header with value \"nosniff\" on all outgoing requests.",
                    "For Apache, see:",
                    "For IIS, see:",
                    "For nginx, see:"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61767",
                    "name": "Config your server to use the \"X-Content-Type-Options\" header with \"nosniff\" value",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Config your server to use the \"X-Content-Type-Options\" header with \"nosniff\" value"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "ContentTypeOptions",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_2"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "200",
                                "@id": "CWE-200",
                                "@target": "http://cwe.mitre.org/data/definitions/200.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "ContentTypeOptions",
                                "@type": "General"
                            }
                        },
                        "name": "Missing or insecure \"X-Content-Type-Options\" header",
                        "references": {
                            "link": [
                                {
                                    "#text": "List of useful HTTP headers",
                                    "@target": "https://www.owasp.org/index.php/List_of_useful_HTTP_headers"
                                },
                                {
                                    "#text": "Reducing MIME type security risks",
                                    "@target": "https://msdn.microsoft.com/en-us/library/gg622941%28v=vs.85%29.aspx"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "sensitiveInformation",
                                "phishing"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "text": [
                                "The \"X-Content-Type-Options\" header (with \"nosniff\" value) prevents IE and Chrome from ignoring the content-type of a response.",
                                "This action may prevent untrusted content (e.g. user uploaded content) from being executed on the user browser (after a malicious naming, for example)."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations",
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "ContentTypeOptions"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "200"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "ContentTypeOptions"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61767"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "sensitiveInformation",
                        "phishing"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The \"X-Content-Type-Options\" header (with \"nosniff\" value) prevents IE and Chrome from ignoring the content-type of a response. This action may prevent untrusted content (e.g. user uploaded content) from being executed on the user browser (after a malicious naming, for example).",
        "issueName": "Missing or insecure \"X-Content-Type-Options\" header",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "ContentTypeOptions",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "200",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-9171051951980026112",
                        "_raw_entity": {
                            "ref": "-8616786764826749184"
                        },
                        "_raw_url": {
                            "ref": "185805297"
                        },
                        "entity_name": "admin.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/admin/admin.jsp",
                        "url_name": "https://demo.testfire.net/admin/"
                    },
                    {
                        "_raw_@id": "7948689254169907968",
                        "_raw_entity": {
                            "ref": "-3539107900041520384"
                        },
                        "_raw_url": {
                            "ref": "1305356544"
                        },
                        "entity_name": "login.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/login.jsp",
                        "url_name": "https://demo.testfire.net/login.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "DirectAccesstoAdministrationPages",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": "Do not allow access to administration scripts without proper authorization, as it may allow an attacker to gain privileged rights."
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": "Do not allow access to administration scripts without proper authorization, as it may allow an attacker to gain privileged rights."
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_54860",
                    "name": "Apply proper authorization to administration scripts",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Apply proper authorization to administration scripts"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "DirectAccesstoAdministrationPages",
                    "advisory": {
                        "affectedProducts": null,
                        "causes": {
                            "cause": "Cause_6"
                        },
                        "cwe": {
                            "link": {
                                "#text": "306",
                                "@id": "CWE-306",
                                "@target": "http://cwe.mitre.org/data/definitions/306.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "DirectAccesstoAdministrationPages",
                                "@type": "General"
                            }
                        },
                        "name": "Direct Access to Administration Pages",
                        "references": null,
                        "securityRisks": {
                            "securityRisk": "privilegeEscalation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null,
                                null
                            ],
                            "text": [
                                "A common user can access certain pages on a site through simple surfing (i.e. following web links). However, there might be pages and scripts that are not accessible through simple surfing, (i.e. pages and scripts that are not linked).",
                                "An attacker may be able to access these pages by guessing their name, e.g. admin.php, admin.asp, admin.cgi, admin.html, etc.",
                                "Example request for a script named \"admin.php\":",
                                "http://[SERVER]/admin.php",
                                "Access to administration scripts should not be allowed without proper authorization, as it may allow an attacker to gain privileged rights.",
                                "Sample Exploit:",
                                "http://[SERVER]/admin.php",
                                "http://[SERVER]/admin.asp",
                                "http://[SERVER]/admin.aspx",
                                "http://[SERVER]/admin.html",
                                "http://[SERVER]/admin.cfm",
                                "http://[SERVER]/admin.cgi"
                            ]
                        },
                        "threatClassification": {
                            "name": "Predictable Resource Location",
                            "reference": "http://projects.webappsec.org/Predictable-Resource-Location"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52579",
                                "@id": "52579",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52579"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "The web server or application server are configured in an insecure way",
                        "@id": "Cause_6"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "The web server or application server are configured in an insecure way"
                ]
            },
            {
                "key": "threat_class",
                "value": "Predictable Resource Location"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Predictable-Resource-Location"
            },
            {
                "key": "security_risks",
                "value": [
                    "It might be possible to escalate user privileges and gain administrative permissions over the web application"
                ]
            },
            {
                "key": "issue_id",
                "value": "DirectAccesstoAdministrationPages"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "306"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "DirectAccesstoAdministrationPages"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_54860"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catPredictableResourceLocation"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "privilegeEscalation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebServerConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "A common user can access certain pages on a site through simple surfing (i.e. following web links). However, there might be pages and scripts that are not accessible through simple surfing, (i.e. pages and scripts that are not linked). An attacker may be able to access these pages by guessing their name, e.g. admin.php, admin.asp, admin.cgi, admin.html, etc. Example request for a script named \"admin.php\": http://[SERVER]/admin.php Access to administration scripts should not be allowed without proper authorization, as it may allow an attacker to gain privileged rights. Sample Exploit: http://[SERVER]/admin.php http://[SERVER]/admin.asp http://[SERVER]/admin.aspx http://[SERVER]/admin.html http://[SERVER]/admin.cfm http://[SERVER]/admin.cgi",
        "issueName": "Direct Access to Administration Pages",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "DirectAccesstoAdministrationPages",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "306",
                "type": "cwe"
            },
            {
                "id": "52579",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "3666331896775087616",
                        "_raw_entity": {
                            "ref": "-2605020402746782464"
                        },
                        "_raw_url": {
                            "ref": "542962588"
                        },
                        "entity_name": "survey_questions.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/survey_questions.jsp",
                        "url_name": "https://demo.testfire.net/survey_questions.jsp"
                    },
                    {
                        "_raw_@id": "-3146284698823386112",
                        "_raw_entity": {
                            "ref": "-2761707092542850560"
                        },
                        "_raw_url": {
                            "ref": "-88620378"
                        },
                        "entity_name": "swagger-ui-standalone-preset.js",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/swagger-ui-standalone-preset.js",
                        "url_name": "https://demo.testfire.net/swagger/swagger-ui-standalone-preset.js"
                    },
                    {
                        "_raw_@id": "-535011662107550976",
                        "_raw_entity": {
                            "ref": "4989988208601256960"
                        },
                        "_raw_url": {
                            "ref": "1198467890"
                        },
                        "entity_name": "doSubscribe",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/doSubscribe",
                        "url_name": "https://demo.testfire.net/doSubscribe"
                    },
                    {
                        "_raw_@id": "5123880173006043648",
                        "_raw_entity": {
                            "ref": "-5939543974179105024"
                        },
                        "_raw_url": {
                            "ref": "1624522315"
                        },
                        "entity_name": "properties.json",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/properties.json",
                        "url_name": "https://demo.testfire.net/swagger/properties.json"
                    },
                    {
                        "_raw_@id": "-38918972558551808",
                        "_raw_entity": {
                            "ref": "4035308366481687552"
                        },
                        "_raw_url": {
                            "ref": "1719736957"
                        },
                        "entity_name": "swagger-ui-bundle.js",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/swagger-ui-bundle.js",
                        "url_name": "https://demo.testfire.net/swagger/swagger-ui-bundle.js"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "GD_EmailAddress",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": "Remove any e-mail addresses from the website so that they won't be exploited by malicious users."
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": "Remove any e-mail addresses from the website so that they won't be exploited by malicious users."
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_60260",
                    "name": "Remove e-mail addresses from the website",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Remove e-mail addresses from the website"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "GD_EmailAddress",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "359",
                                "@id": "CWE-359",
                                "@target": "http://cwe.mitre.org/data/definitions/359.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "GD_EmailAddress",
                                "@type": "General"
                            }
                        },
                        "name": "Email Address Pattern Found",
                        "references": {
                            "link": {
                                "#text": "Definition of Spambot (Wikipedia)",
                                "@target": "http://en.wikipedia.org/wiki/Spambot"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "sensitiveInformation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null
                            ],
                            "text": [
                                "Spambots crawl internet sites, set out to find e-mail addresses in order to build mailing lists for sending unsolicited e-mail (spam).",
                                "AppScan detected a response containing one or more e-mail addresses, which may be exploited to send spam mail",
                                "Furthermore, the e-mail addresses found may be private and thus should not be accessible to the general public."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52584",
                                "@id": "52584",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52584"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations"
                ]
            },
            {
                "key": "issue_id",
                "value": "GD_EmailAddress"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "359"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "GD_EmailAddress"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_60260"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "sensitiveInformation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Spambots crawl internet sites, set out to find e-mail addresses in order to build mailing lists for sending unsolicited e-mail (spam). AppScan detected a response containing one or more e-mail addresses, which may be exploited to send spam mail Furthermore, the e-mail addresses found may be private and thus should not be accessible to the general public.",
        "issueName": "Email Address Pattern Found",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "GD_EmailAddress",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "359",
                "type": "cwe"
            },
            {
                "id": "52584",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "1848862540169527296",
                        "_raw_entity": {
                            "ref": "1010167929559218944"
                        },
                        "_raw_url": {
                            "ref": "680758985"
                        },
                        "entity_name": "feedback.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/feedback.jsp",
                        "url_name": "https://demo.testfire.net/feedback.jsp"
                    },
                    {
                        "_raw_@id": "388021549404816128",
                        "_raw_entity": {
                            "ref": "-2761707092542850560"
                        },
                        "_raw_url": {
                            "ref": "-88620378"
                        },
                        "entity_name": "swagger-ui-standalone-preset.js",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/swagger-ui-standalone-preset.js",
                        "url_name": "https://demo.testfire.net/swagger/swagger-ui-standalone-preset.js"
                    },
                    {
                        "_raw_@id": "-7499793922977187328",
                        "_raw_entity": {
                            "ref": "4035308366481687552"
                        },
                        "_raw_url": {
                            "ref": "1719736957"
                        },
                        "entity_name": "swagger-ui-bundle.js",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/swagger-ui-bundle.js",
                        "url_name": "https://demo.testfire.net/swagger/swagger-ui-bundle.js"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "GD_PathDisclosure",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] In case the vulnerability is in the application itself, fix the server code so it doesnt include file locations in any output.",
                                "[2] Otherwise, if the application is in a 3rd party product, download the relevant security patch depending on the 3rd party product you are using on your web server or web application."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] In case the vulnerability is in the application itself, fix the server code so it doesnt include file locations in any output.",
                    "[2] Otherwise, if the application is in a 3rd party product, download the relevant security patch depending on the 3rd party product you are using on your web server or web application."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_60510",
                    "name": "Download the relevant security patch for your web server or web application.",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Download the relevant security patch for your web server or web application."
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "GD_PathDisclosure",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_14"
                        },
                        "cwe": {
                            "link": {
                                "#text": "200",
                                "@id": "CWE-200",
                                "@target": "http://cwe.mitre.org/data/definitions/200.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "GD_PathDisclosure",
                                "@type": "General"
                            }
                        },
                        "name": "Possible Server Path Disclosure Pattern Found",
                        "references": null,
                        "securityRisks": {
                            "securityRisk": "pathDisclosure"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "AppScan detected a response containing a file's absolute path (e.g. c:\\dir\\file in Windows, or /dir/file in Unix).",
                                "An attacker may be able to exploit this information to access sensitive information on the directory structure of the server machine which could be used for further attacks against the site."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52839",
                                "@id": "52839",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52839"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Latest patches or hotfixes for 3rd. party products were not installed",
                        "@id": "Cause_14"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Latest patches or hotfixes for 3rd. party products were not installed"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to retrieve the absolute path of the web server installation, which might help an attacker to develop further attacks and to gain information about the file system structure of the web application"
                ]
            },
            {
                "key": "issue_id",
                "value": "GD_PathDisclosure"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "200"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "GD_PathDisclosure"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_60510"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "pathDisclosure"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "missingPatchesForThirdPartyProds"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "AppScan detected a response containing a file's absolute path (e.g. c:\\dir\\file in Windows, or /dir/file in Unix). An attacker may be able to exploit this information to access sensitive information on the directory structure of the server machine which could be used for further attacks against the site.",
        "issueName": "Possible Server Path Disclosure Pattern Found",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "GD_PathDisclosure",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "200",
                "type": "cwe"
            },
            {
                "id": "52839",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-1392238194277092608",
                        "_raw_entity": {
                            "ref": "-3539107900041520384"
                        },
                        "_raw_url": {
                            "ref": "1305356544"
                        },
                        "entity_name": "login.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/login.jsp",
                        "url_name": "https://demo.testfire.net/login.jsp"
                    },
                    {
                        "_raw_@id": "-248540282734209792",
                        "_raw_entity": {
                            "ref": "1834802225548946688"
                        },
                        "_raw_url": {
                            "ref": "-2127947589"
                        },
                        "entity_name": "apply.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/apply.jsp",
                        "url_name": "https://demo.testfire.net/bank/apply.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "GD_autocompleteInForm",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "<form action=\"AppScan.html\" method=\"get\">\n      Username: <input type=\"text\" name=\"firstname\" /><br />\n      Password: <input type=\"password\" name=\"lastname\" />\n      <input type=\"submit\" value=\"Submit\" />\n  <form>",
                                "<form action=\"AppScan.html\" method=\"get\">\n      Username: <input type=\"text\" name=\"firstname\" /><br />\n      Password: <input type=\"password\" name=\"lastname\" autocomplete=\"off\"/>\n      <input type=\"submit\" value=\"Submit\" />\n  <form>"
                            ],
                            "text": [
                                "If the \"autocomplete\" attribute is missing in the \"password\" field of the \"input\" element, add it and set it to \"off\".",
                                "If the \"autocomplete\" attribute is set to \"on\", change it to \"off\".",
                                "For example:",
                                "Vulnerable site:",
                                "Non-vulnerable site:"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "If the \"autocomplete\" attribute is missing in the \"password\" field of the \"input\" element, add it and set it to \"off\".",
                    "If the \"autocomplete\" attribute is set to \"on\", change it to \"off\".",
                    "For example:",
                    "Vulnerable site:",
                    "Non-vulnerable site:"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61640",
                    "name": "Correctly set the \"autocomplete\" attribute to \"off\"",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Correctly set the \"autocomplete\" attribute to \"off\""
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "GD_autocompleteInForm",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_1"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "522",
                                "@id": "CWE-522",
                                "@target": "http://cwe.mitre.org/data/definitions/522.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "GD_autocompleteInForm",
                                "@type": "General"
                            }
                        },
                        "name": "Autocomplete HTML Attribute Not Disabled for Password Field",
                        "references": null,
                        "securityRisks": {
                            "securityRisk": "authBypass"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "The \"autocomplete\" attribute has been standardized in the HTML5 standard. W3C's site states that the attribute has two states, \"on\" and \"off\", and that omitting it altogether is equivalent to setting it to \"on\".",
                                "This page is vulnerable since it does not set the \"autocomplete\" attribute to \"off\" for the \"password\" field in the \"input\" element.",
                                "This may enable an unauthorized user (with local access to an authorized client) to autofill the username and password fields, and thus log in to the site."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "85989",
                                "@id": "85989",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/85989"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to bypass the web application's authentication mechanism"
                ]
            },
            {
                "key": "issue_id",
                "value": "GD_autocompleteInForm"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "522"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "GD_autocompleteInForm"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61640"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "authBypass"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The \"autocomplete\" attribute has been standardized in the HTML5 standard. W3C's site states that the attribute has two states, \"on\" and \"off\", and that omitting it altogether is equivalent to setting it to \"on\". This page is vulnerable since it does not set the \"autocomplete\" attribute to \"off\" for the \"password\" field in the \"input\" element. This may enable an unauthorized user (with local access to an authorized client) to autofill the username and password fields, and thus log in to the site.",
        "issueName": "Autocomplete HTML Attribute Not Disabled for Password Field",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "GD_autocompleteInForm",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "522",
                "type": "cwe"
            },
            {
                "id": "85989",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-3763313552748359424",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "2184655578275639552",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-2183056373739892992",
                        "_raw_entity": {
                            "ref": "-4344886403399488000"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "listAccounts",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "799375591964501504",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-6224975705753456640",
                        "_raw_entity": {
                            "ref": "-4831459913268758016"
                        },
                        "_raw_url": {
                            "ref": "226819437"
                        },
                        "entity_name": "HostName",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/util/serverStatusCheckService.jsp",
                        "url_name": "https://demo.testfire.net/util/serverStatusCheckService.jsp"
                    },
                    {
                        "_raw_@id": "5923384589084499456",
                        "_raw_entity": {
                            "ref": "5415789320716974080"
                        },
                        "_raw_url": {
                            "ref": "542962588"
                        },
                        "entity_name": "step",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/survey_questions.jsp",
                        "url_name": "https://demo.testfire.net/survey_questions.jsp"
                    },
                    {
                        "_raw_@id": "-9009912991001496576",
                        "_raw_entity": {
                            "ref": "-7168640119326840064"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "lang",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "1059928033362496512",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "-4838402001119313408",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "605445259718848000",
                        "_raw_entity": {
                            "ref": "2495632636453037824"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "job",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "GETParamOverSSL",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": null,
                            "indentText": [
                                "- Username",
                                "- Password",
                                "- Social Security number",
                                "- Credit Card number",
                                "- Driver's License number",
                                "- e-mail address",
                                "- Phone number",
                                "- Zip code"
                            ],
                            "text": [
                                "Make sure that sensitive information such as:",
                                "is always sent in the body part of an HTTP POST request."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Make sure that sensitive information such as:",
                    "is always sent in the body part of an HTTP POST request."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_52720",
                    "name": "Always use SSL and POST (body) parameters when sending sensitive information.",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Always use SSL and POST (body) parameters when sending sensitive information."
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "GETParamOverSSL",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_2"
                        },
                        "causes": {
                            "cause": "Cause_8"
                        },
                        "cwe": {
                            "link": {
                                "#text": "598",
                                "@id": "CWE-598",
                                "@target": "http://cwe.mitre.org/data/definitions/598.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "GETParamOverSSL",
                                "@type": "General"
                            }
                        },
                        "name": "Query Parameter in SSL Request",
                        "references": {
                            "link": [
                                {
                                    "#text": "Financial Privacy: The Gramm-Leach Bliley Act",
                                    "@target": "http://business.ftc.gov/privacy-and-security/gramm-leach-bliley-act/"
                                },
                                {
                                    "#text": "Health Insurance Portability and Accountability Act (HIPAA)",
                                    "@target": "http://www.hhs.gov/ocr/hipaa/"
                                },
                                {
                                    "#text": "Sarbanes-Oxley Act",
                                    "@target": "http://www.sec.gov/spotlight/sarbanes-oxley.htm"
                                },
                                {
                                    "#text": "California SB1386",
                                    "@target": "http://www.leginfo.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "sensitiveNotOverSSL"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "During the application test, it was detected that a request, which was sent over SSL, contained parameters that were transmitted in the Query part of an HTTP request.",
                                "When sending requests, the browser's history can be used to reveal the URLs, which contain the query parameter names and values.",
                                "Due to the sensitivity of encrypted requests, it is suggested to use HTTP POST (without parameters in the URL string) when possible, in order to avoid the disclosure of URLs and parameter values to others."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52845",
                                "@id": "52845",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52845"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Query parameters were passed over SSL, and may contain sensitive information",
                        "@id": "Cause_8"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Query parameters were passed over SSL, and may contain sensitive information"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to steal sensitive data such as credit card numbers, social security numbers etc. that are sent unencrypted"
                ]
            },
            {
                "key": "issue_id",
                "value": "GETParamOverSSL"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "598"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "GETParamOverSSL"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_52720"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "sensitiveNotOverSSL"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "During the application test, it was detected that a request, which was sent over SSL, contained parameters that were transmitted in the Query part of an HTTP request. When sending requests, the browser's history can be used to reveal the URLs, which contain the query parameter names and values. Due to the sensitivity of encrypted requests, it is suggested to use HTTP POST (without parameters in the URL string) when possible, in order to avoid the disclosure of URLs and parameter values to others.",
        "issueName": "Query Parameter in SSL Request",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "GETParamOverSSL",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "598",
                "type": "cwe"
            },
            {
                "id": "52845",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-4377967363632066560",
                        "_raw_entity": {
                            "ref": "1733046179033861888"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": null,
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    },
                    {
                        "_raw_@id": "-3433036179861604352",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-3886688913510970880",
                        "_raw_entity": {
                            "ref": "2309187148794231040"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "index.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "8497597951790085888",
                        "_raw_entity": {
                            "ref": "-3873382253807372032"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "search.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "-3634651028717271808",
                        "_raw_entity": {
                            "ref": "4927821206135434240"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "main.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "HSTS",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "link": {
                                "#text": "https://www.owasp.org/index.php/HTTP_Strict_Transport_Security",
                                "@target": "https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"
                            },
                            "text": [
                                "Implement the The HTTP Strict Transport Security policy by adding the \"Strict-Transport-Security\" response header to the web application responses.",
                                "For more information please see"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Implement the The HTTP Strict Transport Security policy by adding the \"Strict-Transport-Security\" response header to the web application responses.",
                    "For more information please see"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61750",
                    "name": "Implement the HTTP Strict-Transport-Security policy with a long \"max-age\"",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Implement the HTTP Strict-Transport-Security policy with a long \"max-age\""
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "HSTS",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "200",
                                "@id": "CWE-200",
                                "@target": "http://cwe.mitre.org/data/definitions/200.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "HSTS",
                                "@type": "General"
                            }
                        },
                        "name": "Missing or insecure HTTP Strict-Transport-Security Header",
                        "references": {
                            "link": [
                                {
                                    "#text": "OWASP \"HTTP Strict Transport Security\"",
                                    "@target": "https://www.owasp.org/index.php/HTTP_Strict_Transport_Security"
                                },
                                {
                                    "#text": "HSTS Spec",
                                    "@target": "http://tools.ietf.org/html/rfc6797"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "sensitiveInformation",
                                "phishing"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "HTTP Strict Transport Security (HSTS) is a mechanism which protects secure (HTTPS) websites from being downgraded to non-secure HTTP. This mechanism enables web servers to instruct their clients (web browsers or other user agents) to use secure HTTPS connections when interacting with the server, and never use the insecure HTTP protocol.",
                                "It is important to set the 'max-age' to a high enough value to prevent falling back to an insecure connection prematurely.",
                                "The HTTP Strict Transport Security policy is communicated by the server to its clients using a response header named \"Strict-Transport-Security\". The value of this header is a period of time during which the client should access the server in HTTPS only. Other header attributes include \"includeSubDomains\" and \"preload\"."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations",
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "HSTS"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "200"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "HSTS"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61750"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "sensitiveInformation",
                        "phishing"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "HTTP Strict Transport Security (HSTS) is a mechanism which protects secure (HTTPS) websites from being downgraded to non-secure HTTP. This mechanism enables web servers to instruct their clients (web browsers or other user agents) to use secure HTTPS connections when interacting with the server, and never use the insecure HTTP protocol. It is important to set the 'max-age' to a high enough value to prevent falling back to an insecure connection prematurely. The HTTP Strict Transport Security policy is communicated by the server to its clients using a response header named \"Strict-Transport-Security\". The value of this header is a period of time during which the client should access the server in HTTPS only. Other header attributes include \"includeSubDomains\" and \"preload\".",
        "issueName": "Missing or insecure HTTP Strict-Transport-Security Header",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "HSTS",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "200",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-3352067053237999872",
                        "_raw_entity": {
                            "ref": "7089695691196187648"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": "demo.testfire.net",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "OldTLS",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "link": [
                                {
                                    "#text": "http://support.microsoft.com/kb/245030",
                                    "@target": "http://support.microsoft.com/kb/245030"
                                },
                                {
                                    "#text": "http://msdn.microsoft.com/en-us/library/windows/desktop/bb870930(v=vs.85).aspx",
                                    "@target": "http://msdn.microsoft.com/en-us/library/windows/desktop/bb870930(v=vs.85).aspx"
                                },
                                {
                                    "#text": "https://www.owasp.org/index.php/Talk:Securing_tomcat#Disabling_weak_ciphers_in_Tomcat",
                                    "@target": "https://www.owasp.org/index.php/Talk:Securing_tomcat#Disabling_weak_ciphers_in_Tomcat"
                                },
                                {
                                    "#text": "https://httpd.apache.org/docs/trunk/ssl/ssl_howto.html",
                                    "@target": "https://httpd.apache.org/docs/trunk/ssl/ssl_howto.html"
                                }
                            ],
                            "text": [
                                "Reconfigure the server to avoid the use of weak cipher suites. The configuration changes are server-specific.",
                                "For Microsoft Windows XP and Microsoft Windows Server 2003, follow these instructions:",
                                "For Microsoft Windows Vista, Microsoft Windows 7, and Microsoft Windows Server 2008, remove the cipher suites that were identified as weak from the Supported Cipher Suite list by following these instructions:",
                                "For Apache TomCat server, follow these instructions:",
                                "For Apache server, follow these instructions:"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Reconfigure the server to avoid the use of weak cipher suites. The configuration changes are server-specific.",
                    "For Microsoft Windows XP and Microsoft Windows Server 2003, follow these instructions:",
                    "For Microsoft Windows Vista, Microsoft Windows 7, and Microsoft Windows Server 2008, remove the cipher suites that were identified as weak from the Supported Cipher Suite list by following these instructions:",
                    "For Apache TomCat server, follow these instructions:",
                    "For Apache server, follow these instructions:"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61030",
                    "name": "Use a different signature algorithm for the certificate. See \"Fix Recommentation\" for specific server instructions",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Use a different signature algorithm for the certificate. See \"Fix Recommentation\" for specific server instructions"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "OldTLS",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_6"
                        },
                        "cwe": {
                            "link": {
                                "#text": "327",
                                "@id": "CWE-327",
                                "@target": "http://cwe.mitre.org/data/definitions/327.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "OldTLS",
                                "@type": "General"
                            }
                        },
                        "name": "Older TLS Version is Supported",
                        "references": {
                            "link": {
                                "#text": "Deprecating TLS 1.0 and 1.1",
                                "@target": "https://www.digicert.com/blog/depreciating-tls-1-0-and-1-1/"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "userImpersonation"
                        },
                        "testDescription": "Infrastructure test",
                        "testTechnicalDescription": {
                            "text": [
                                "The server supports TLS cipher suites that either do not offer encryption or use weak encryption algorithms. An attacker may therefore be able to",
                                "decrypt the secure communication between the client and the server, or successfully execute a \"man-in-the-middle\" attack on the client, enabling",
                                "him to view sensitive information and perform actions on behalf of the client."
                            ]
                        },
                        "threatClassification": {
                            "name": "Server Misconfiguration",
                            "reference": "http://projects.webappsec.org/Server-Misconfiguration"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "The web server or application server are configured in an insecure way",
                        "@id": "Cause_6"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "The web server or application server are configured in an insecure way"
                ]
            },
            {
                "key": "threat_class",
                "value": "Server Misconfiguration"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Server-Misconfiguration"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user"
                ]
            },
            {
                "key": "issue_id",
                "value": "OldTLS"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "327"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "OldTLS"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61030"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catServerMisconfiguration"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "userImpersonation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebServerConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The server supports TLS cipher suites that either do not offer encryption or use weak encryption algorithms. An attacker may therefore be able to decrypt the secure communication between the client and the server, or successfully execute a \"man-in-the-middle\" attack on the client, enabling him to view sensitive information and perform actions on behalf of the client.",
        "issueName": "Older TLS Version is Supported",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "OldTLS",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "327",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-3995025922801501440",
                        "_raw_entity": {
                            "ref": "7089695691196187648"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": "demo.testfire.net",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "SHA1CipherSuites",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null
                            ],
                            "text": [
                                "Adapt your server so that it supports the following ciphersuites ([1]):",
                                "0xC0,0x2C  -  ECDHE-ECDSA-AES256-GCM-SHA384  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AESGCM(256)    Mac=AEAD",
                                "0xC0,0x30  -  ECDHE-RSA-AES256-GCM-SHA384    TLSv1.2  Kx=ECDH  Au=RSA    Enc=AESGCM(256)    Mac=AEAD",
                                "0xCC,0x14  -  ECDHE-ECDSA-CHACHA20-POLY1305  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=ChaCha20(256)  Mac=AEAD",
                                "0xCC,0x13  -  ECDHE-RSA-CHACHA20-POLY1305    TLSv1.2  Kx=ECDH  Au=RSA    Enc=ChaCha20(256)  Mac=AEAD",
                                "0xC0,0x2B  -  ECDHE-ECDSA-AES128-GCM-SHA256  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AESGCM(128)    Mac=AEAD",
                                "0xC0,0x2F  -  ECDHE-RSA-AES128-GCM-SHA256    TLSv1.2  Kx=ECDH  Au=RSA    Enc=AESGCM(128)    Mac=AEAD",
                                "0xC0,0x24  -  ECDHE-ECDSA-AES256-SHA384      TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AES(256)       Mac=SHA384",
                                "0xC0,0x28  -  ECDHE-RSA-AES256-SHA384        TLSv1.2  Kx=ECDH  Au=RSA    Enc=AES(256)       Mac=SHA384",
                                "0xC0,0x23  -  ECDHE-ECDSA-AES128-SHA256      TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AES(128)       Mac=SHA256",
                                "0xC0,0x27  -  ECDHE-RSA-AES128-SHA256        TLSv1.2  Kx=ECDH  Au=RSA    Enc=AES(128)       Mac=SHA256",
                                "[1] https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Adapt your server so that it supports the following ciphersuites ([1]):",
                    "0xC0,0x2C  -  ECDHE-ECDSA-AES256-GCM-SHA384  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AESGCM(256)    Mac=AEAD",
                    "0xC0,0x30  -  ECDHE-RSA-AES256-GCM-SHA384    TLSv1.2  Kx=ECDH  Au=RSA    Enc=AESGCM(256)    Mac=AEAD",
                    "0xCC,0x14  -  ECDHE-ECDSA-CHACHA20-POLY1305  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=ChaCha20(256)  Mac=AEAD",
                    "0xCC,0x13  -  ECDHE-RSA-CHACHA20-POLY1305    TLSv1.2  Kx=ECDH  Au=RSA    Enc=ChaCha20(256)  Mac=AEAD",
                    "0xC0,0x2B  -  ECDHE-ECDSA-AES128-GCM-SHA256  TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AESGCM(128)    Mac=AEAD",
                    "0xC0,0x2F  -  ECDHE-RSA-AES128-GCM-SHA256    TLSv1.2  Kx=ECDH  Au=RSA    Enc=AESGCM(128)    Mac=AEAD",
                    "0xC0,0x24  -  ECDHE-ECDSA-AES256-SHA384      TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AES(256)       Mac=SHA384",
                    "0xC0,0x28  -  ECDHE-RSA-AES256-SHA384        TLSv1.2  Kx=ECDH  Au=RSA    Enc=AES(256)       Mac=SHA384",
                    "0xC0,0x23  -  ECDHE-ECDSA-AES128-SHA256      TLSv1.2  Kx=ECDH  Au=ECDSA  Enc=AES(128)       Mac=SHA256",
                    "0xC0,0x27  -  ECDHE-RSA-AES128-SHA256        TLSv1.2  Kx=ECDH  Au=RSA    Enc=AES(128)       Mac=SHA256",
                    "[1] https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61754",
                    "name": "Change server's supported ciphersuites",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Change server's supported ciphersuites"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "SHA1CipherSuites",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_6"
                        },
                        "cwe": {
                            "link": {
                                "#text": "327",
                                "@id": "CWE-327",
                                "@target": "http://cwe.mitre.org/data/definitions/327.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "SHA1CipherSuites",
                                "@type": "General"
                            }
                        },
                        "name": "SHA-1 cipher suites were detected",
                        "references": {
                            "link": [
                                {
                                    "#text": "[1] SHATTERED",
                                    "@target": "http://shattered.io/"
                                },
                                {
                                    "#text": "[2] The first collision for full SHA-1",
                                    "@target": "http://shattered.io/static/shattered.pdf"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "userImpersonation"
                        },
                        "testDescription": "Infrastructure test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null
                            ],
                            "text": [
                                "The server supports SHA-1 ciphersuites.",
                                "SHA-1 was officially deprecated by NIST in 2011, but many applications still rely on it.",
                                "Up until now (2017), only theoretical attacks have been known agsinst SHA-1, which is why many application still rely on it.",
                                "Recently, a practical attack was introduced by CWI Amsterdam and Google Research teams ( [1] and [2] )."
                            ]
                        },
                        "threatClassification": {
                            "name": "Server Misconfiguration",
                            "reference": "http://projects.webappsec.org/Server-Misconfiguration"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "The web server or application server are configured in an insecure way",
                        "@id": "Cause_6"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "The web server or application server are configured in an insecure way"
                ]
            },
            {
                "key": "threat_class",
                "value": "Server Misconfiguration"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Server-Misconfiguration"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user"
                ]
            },
            {
                "key": "issue_id",
                "value": "SHA1CipherSuites"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "327"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "SHA1CipherSuites"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61754"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catServerMisconfiguration"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "userImpersonation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebServerConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The server supports SHA-1 ciphersuites. SHA-1 was officially deprecated by NIST in 2011, but many applications still rely on it. Up until now (2017), only theoretical attacks have been known agsinst SHA-1, which is why many application still rely on it. Recently, a practical attack was introduced by CWI Amsterdam and Google Research teams ( [1] and [2] ).",
        "issueName": "SHA-1 cipher suites were detected",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "SHA1CipherSuites",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "327",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "1065020283494271488",
                        "_raw_entity": {
                            "ref": "-3211338186064466688"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "http://www.exampledomainnotinuse.org/mybeacon.gif",
                        "entity_type": "Link",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "TPHidden_MW_LinkToUnclassifiedSite",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": "Verify that this link is indeed intended to be included in the Web application. If it is not, you may wish to determine how it came to be included."
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": "Verify that this link is indeed intended to be included in the Web application. If it is not, you may wish to determine how it came to be included."
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61060",
                    "name": "Examine the link to determine whether it is indeed supposed to be included in the web application",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Examine the link to determine whether it is indeed supposed to be included in the web application"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "TPHidden_MW_LinkToUnclassifiedSite",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_1"
                        },
                        "causes": {
                            "cause": "Cause_13"
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "TPHidden_MW_LinkToUnclassifiedSite",
                                "@type": "General"
                            }
                        },
                        "name": "Link to unclassified site",
                        "references": {
                            "link": [
                                {
                                    "#text": "Web Hacking Incidents: Planting of Malware",
                                    "@target": "http://www.xiom.com/whid-list/Planting+of+Malware"
                                },
                                {
                                    "#text": "Legitimate Sites Carry Increasing Portion Of Malware",
                                    "@target": "http://www.darkreading.com/security/vulnerabilities/showArticle.jhtml?articleID=212901777"
                                },
                                {
                                    "#text": "Web-based malware up 400 per cent, 68 percent hosted on legitimate websites",
                                    "@target": "http://software.silicon.com/malware/0,3800003100,39242020,00.htm"
                                },
                                {
                                    "#text": "Are Legitimate Sites the Next Malware Threat?",
                                    "@target": "http://www.internetnews.com/security/article.php/3800266"
                                },
                                {
                                    "#text": "80 percent of sites categorized as \"malware\" are legitimate sites",
                                    "@target": "http://filteringfacts.org/2008/04/14/sophos-80-percent-of-sites-categorized-as-%E2%80%9Cmalware%E2%80%9D-are-legitimate-sites/"
                                }
                            ],
                            "text": "http://www.internetnews.com/security/article.php/3799141/Online+Trust+A+Thing+of+the+Past.htm"
                        },
                        "securityRisks": {
                            "securityRisk": "maliciousContent"
                        },
                        "testDescription": "Infrastructure test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "This link is not listed in the ISS URL Classification database.",
                                "If you know the correct classification for this link you can report it to ISS at: http://filterdb.iss.net/urlcheck/"
                            ]
                        },
                        "threatClassification": {
                            "name": "Malicious Content Tests"
                        },
                        "xfid": {
                            "link": {
                                "#text": "87866",
                                "@id": "87866",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/87866"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "N/A",
                        "@id": "Cause_13"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "N/A"
                ]
            },
            {
                "key": "threat_class",
                "value": "Malicious Content Tests"
            },
            {
                "key": "threat_class_href",
                "value": "N/A"
            },
            {
                "key": "security_risks",
                "value": [
                    "N/A"
                ]
            },
            {
                "key": "issue_id",
                "value": "TPHidden_MW_LinkToUnclassifiedSite"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": null
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "TPHidden_MW_LinkToUnclassifiedSite"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61060"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catMaliciousContent"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "maliciousContent"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "causeNotAvailable"
                }
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This link is not listed in the ISS URL Classification database. If you know the correct classification for this link you can report it to ISS at: http://filterdb.iss.net/urlcheck/",
        "issueName": "Link to unclassified site",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "TPHidden_MW_LinkToUnclassifiedSite",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "87866",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-4367704898438135808",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "1520724577559752960",
                        "_raw_entity": {
                            "ref": "-4873707097942489088"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "showAccount",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "-3944331533696242176",
                        "_raw_entity": {
                            "ref": "-3961925784633657600"
                        },
                        "_raw_url": {
                            "ref": "345716453"
                        },
                        "entity_name": "doTransfer",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/doTransfer",
                        "url_name": "https://demo.testfire.net/bank/doTransfer"
                    },
                    {
                        "_raw_@id": "-6283833440684393728",
                        "_raw_entity": {
                            "ref": "-3517474992796452096"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "queryxpath.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/queryxpath.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "XFS",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": "Use the X-Frame-Options to prevent (or limit) pages from being embedded in iFrames. For older browser, include a \"frame-breaker\" script in each page that should not be framed."
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": "Use the X-Frame-Options to prevent (or limit) pages from being embedded in iFrames. For older browser, include a \"frame-breaker\" script in each page that should not be framed."
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61763",
                    "name": "Config your server to use the \"X-Frame-Options\" header with DENY or SAMEORIGIN value",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Config your server to use the \"X-Frame-Options\" header with DENY or SAMEORIGIN value"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "XFS",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "693",
                                "@id": "CWE-693",
                                "@target": "http://cwe.mitre.org/data/definitions/693.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "XFS",
                                "@type": "General"
                            }
                        },
                        "name": "Missing or insecure Cross-Frame Scripting Defence",
                        "references": {
                            "link": [
                                {
                                    "#text": "Cross-Frame Scripting",
                                    "@target": "https://www.owasp.org/index.php/Cross_Frame_Scripting"
                                },
                                {
                                    "#text": "Clickjacking",
                                    "@target": "https://www.owasp.org/index.php/Clickjacking"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "sensitiveInformation",
                                "phishing"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "Cross-Frame Scripting is an attack technique where an attacker loads a vulnerable application in an iFrame on his malicious site.",
                                "The attacker can then launch a Clickjacking attack, which may lead to Phishing, Cross-Site Request Forgery, sensitive information leakage, and more.",
                                "For best protection, it is advised to set the header value to DENY or SAMEORIGIN.",
                                "Sample Exploit:",
                                "Within a malicious site, it is possible to embed the vulnerable page:",
                                "<frame src=\"http://vulnerable.com/login.html\">"
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations",
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "XFS"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "693"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "XFS"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61763"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "sensitiveInformation",
                        "phishing"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Cross-Frame Scripting is an attack technique where an attacker loads a vulnerable application in an iFrame on his malicious site. The attacker can then launch a Clickjacking attack, which may lead to Phishing, Cross-Site Request Forgery, sensitive information leakage, and more. For best protection, it is advised to set the header value to DENY or SAMEORIGIN. Sample Exploit: Within a malicious site, it is possible to embed the vulnerable page: <frame src=\"http://vulnerable.com/login.html\">",
        "issueName": "Missing or insecure Cross-Frame Scripting Defence",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "XFS",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "693",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "116755007372958976",
                        "_raw_entity": {
                            "ref": "1733046179033861888"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": null,
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    },
                    {
                        "_raw_@id": "-7967692070966713600",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-842670518232893184",
                        "_raw_entity": {
                            "ref": "2309187148794231040"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "index.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-609052938052666368",
                        "_raw_entity": {
                            "ref": "-3873382253807372032"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "search.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "-6915691726343899392",
                        "_raw_entity": {
                            "ref": "4927821206135434240"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "main.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "XSSProtectionHeader",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": null,
                            "link": [
                                {
                                    "#text": "http://httpd.apache.org/docs/2.2/mod/mod_headers.html",
                                    "@target": "http://httpd.apache.org/docs/2.2/mod/mod_headers.html"
                                },
                                {
                                    "#text": "https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx",
                                    "@target": "https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"
                                },
                                {
                                    "#text": "http://nginx.org/en/docs/http/ngx_http_headers_module.html",
                                    "@target": "http://nginx.org/en/docs/http/ngx_http_headers_module.html"
                                }
                            ],
                            "text": [
                                "Configure your server to send the \"X-XSS-Protection\" header with value \"1\" (i.e. Enabled) on all outgoing requests.",
                                "For Apache, see:",
                                "For IIS, see:",
                                "For nginx, see:"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Configure your server to send the \"X-XSS-Protection\" header with value \"1\" (i.e. Enabled) on all outgoing requests.",
                    "For Apache, see:",
                    "For IIS, see:",
                    "For nginx, see:"
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61765",
                    "name": "Config your server to use the \"X-XSS-Protection\" header with value '1' (enabled)",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Config your server to use the \"X-XSS-Protection\" header with value '1' (enabled)"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "XSSProtectionHeader",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_2"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "200",
                                "@id": "CWE-200",
                                "@target": "http://cwe.mitre.org/data/definitions/200.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "XSSProtectionHeader",
                                "@type": "General"
                            }
                        },
                        "name": "Missing or insecure \"X-XSS-Protection\" header",
                        "references": {
                            "link": [
                                {
                                    "#text": "List of useful HTTP headers",
                                    "@target": "https://www.owasp.org/index.php/List_of_useful_HTTP_headers"
                                },
                                {
                                    "#text": "IE XSS Filter",
                                    "@target": "http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "sensitiveInformation",
                                "phishing"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "text": [
                                "The \"X-XSS-Protection\" header with value '1' forces the Cross-Site Scripting filter into Enable mode, even if disabled by the user.",
                                "This filter is built into most recent web browsers (IE 8+, Chrome 4+), and is usually enabled by default. Although it is not designed as first and only defense against Cross-Site Scripting, it acts as an additional layer of protection."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations",
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "XSSProtectionHeader"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "200"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "XSSProtectionHeader"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61765"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "sensitiveInformation",
                        "phishing"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The \"X-XSS-Protection\" header with value '1' forces the Cross-Site Scripting filter into Enable mode, even if disabled by the user. This filter is built into most recent web browsers (IE 8+, Chrome 4+), and is usually enabled by default. Although it is not designed as first and only defense against Cross-Site Scripting, it acts as an additional layer of protection.",
        "issueName": "Missing or insecure \"X-XSS-Protection\" header",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "XSSProtectionHeader",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "200",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "4368530509732034816",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-6430684979514346496",
                        "_raw_entity": {
                            "ref": "-3873382253807372032"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "search.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "6027976286845670912",
                        "_raw_entity": {
                            "ref": "2309187148794231040"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "index.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-5946149924289048064",
                        "_raw_entity": {
                            "ref": "4927821206135434240"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "main.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    },
                    {
                        "_raw_@id": "5156659165972421376",
                        "_raw_entity": {
                            "ref": "-2166482836966180864"
                        },
                        "_raw_url": {
                            "ref": "597790375"
                        },
                        "entity_name": "transfer.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/transfer.jsp",
                        "url_name": "https://demo.testfire.net/bank/transfer.jsp"
                    },
                    {
                        "_raw_@id": "8310705748913625600",
                        "_raw_entity": {
                            "ref": "-3539107900041520384"
                        },
                        "_raw_url": {
                            "ref": "1305356544"
                        },
                        "entity_name": "login.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/login.jsp",
                        "url_name": "https://demo.testfire.net/login.jsp"
                    },
                    {
                        "_raw_@id": "-1293321997446619648",
                        "_raw_entity": {
                            "ref": "1834802225548946688"
                        },
                        "_raw_url": {
                            "ref": "-2127947589"
                        },
                        "entity_name": "apply.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/apply.jsp",
                        "url_name": "https://demo.testfire.net/bank/apply.jsp"
                    },
                    {
                        "_raw_@id": "-4153201709043699712",
                        "_raw_entity": {
                            "ref": "6449140091464153600"
                        },
                        "_raw_url": {
                            "ref": "-1867726000"
                        },
                        "entity_name": "subscribe.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/subscribe.jsp",
                        "url_name": "https://demo.testfire.net/subscribe.jsp"
                    },
                    {
                        "_raw_@id": "5589970947926074368",
                        "_raw_entity": {
                            "ref": "2822766115314697472"
                        },
                        "_raw_url": {
                            "ref": "329275775"
                        },
                        "entity_name": "transaction.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/transaction.jsp",
                        "url_name": "https://demo.testfire.net/bank/transaction.jsp"
                    },
                    {
                        "_raw_@id": "-1711294223773787136",
                        "_raw_entity": {
                            "ref": "-4873707097942489088"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "showAccount",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "4361256704605503744",
                        "_raw_entity": {
                            "ref": "-3517474992796452096"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "queryxpath.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/queryxpath.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "5038612902394148864",
                        "_raw_entity": {
                            "ref": "1010167929559218944"
                        },
                        "_raw_url": {
                            "ref": "680758985"
                        },
                        "entity_name": "feedback.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/feedback.jsp",
                        "url_name": "https://demo.testfire.net/feedback.jsp"
                    },
                    {
                        "_raw_@id": "7021512105825102848",
                        "_raw_entity": {
                            "ref": "6473554968846338816"
                        },
                        "_raw_url": {
                            "ref": "1347934026"
                        },
                        "entity_name": "status_check.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/status_check.jsp",
                        "url_name": "https://demo.testfire.net/status_check.jsp"
                    },
                    {
                        "_raw_@id": "-4353184864930586624",
                        "_raw_entity": {
                            "ref": "-8100816465074548224"
                        },
                        "_raw_url": {
                            "ref": "226819437"
                        },
                        "entity_name": "serverStatusCheckService.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/util/serverStatusCheckService.jsp",
                        "url_name": "https://demo.testfire.net/util/serverStatusCheckService.jsp"
                    },
                    {
                        "_raw_@id": "2088265890053804032",
                        "_raw_entity": {
                            "ref": "-5939543974179105024"
                        },
                        "_raw_url": {
                            "ref": "1624522315"
                        },
                        "entity_name": "properties.json",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/properties.json",
                        "url_name": "https://demo.testfire.net/swagger/properties.json"
                    },
                    {
                        "_raw_@id": "251990937751596544",
                        "_raw_entity": {
                            "ref": "-8616786764826749184"
                        },
                        "_raw_url": {
                            "ref": "-1274676571"
                        },
                        "entity_name": "admin.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/admin/admin.jsp",
                        "url_name": "https://demo.testfire.net/admin/admin.jsp"
                    },
                    {
                        "_raw_@id": "-7014719699640649216",
                        "_raw_entity": {
                            "ref": "-2605020402746782464"
                        },
                        "_raw_url": {
                            "ref": "542962588"
                        },
                        "entity_name": "survey_questions.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/survey_questions.jsp",
                        "url_name": "https://demo.testfire.net/survey_questions.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attCachedSSL",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null
                            ],
                            "text": [
                                "Disable caching on all SSL pages or all pages that contain sensitive data.",
                                "This can be achieved by using \"Cache-Control: no-store\" and either \"Pragma: no-cache\" or \"Cache-Control: no-cache\" response directives in your SSL page headers.",
                                "Cache-Control: private - This directive instructs proxies that the page contains private information, and therefore should not be cached by a shared cache. However, it does not instruct browsers to refrain from caching the pages.",
                                "Cache-Control: no-cache - This directive also instructs proxies that the page contains private information, and therefore should not be cached. It also instructs the browser to revalidate with the server to check if a new version is available. This means that the browser may store sensitive pages or information to be used in the revalidation. Certain browsers do not necessarily follow the RFC and may treat no-cache as no-store.",
                                "Cache-Control: no-store - This is the most secure directive. It instructs both the proxy and the browser not to cache the page or store it in its cache folders.",
                                "Pragma: no-cache - This directive is required for older browsers, that do not support the Cache-Control header."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Disable caching on all SSL pages or all pages that contain sensitive data.",
                    "This can be achieved by using \"Cache-Control: no-store\" and either \"Pragma: no-cache\" or \"Cache-Control: no-cache\" response directives in your SSL page headers.",
                    "Cache-Control: private - This directive instructs proxies that the page contains private information, and therefore should not be cached by a shared cache. However, it does not instruct browsers to refrain from caching the pages.",
                    "Cache-Control: no-cache - This directive also instructs proxies that the page contains private information, and therefore should not be cached. It also instructs the browser to revalidate with the server to check if a new version is available. This means that the browser may store sensitive pages or information to be used in the revalidation. Certain browsers do not necessarily follow the RFC and may treat no-cache as no-store.",
                    "Cache-Control: no-store - This is the most secure directive. It instructs both the proxy and the browser not to cache the page or store it in its cache folders.",
                    "Pragma: no-cache - This directive is required for older browsers, that do not support the Cache-Control header."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_60210",
                    "name": "Prevent caching of SSL pages by adding \"Cache-Control: no-store\" and \"Pragma: no-cache\" headers to their responses.",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Prevent caching of SSL pages by adding \"Cache-Control: no-store\" and \"Pragma: no-cache\" headers to their responses."
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attCachedSSL",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_5"
                        },
                        "cwe": {
                            "link": {
                                "#text": "525",
                                "@id": "CWE-525",
                                "@target": "http://cwe.mitre.org/data/definitions/525.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attCachedSSL",
                                "@type": "General"
                            }
                        },
                        "name": "Cacheable SSL Page Found",
                        "references": null,
                        "securityRisks": {
                            "securityRisk": "sensitiveInformation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "Most web browsers are configured by default to cache the user's pages during use. This means that SSL pages are cached as well.",
                                "It is not recommended to enable the web browser to save any SSL information, since this information might be compromised when a vulnerability exists."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52512",
                                "@id": "52512",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52512"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Sensitive information might have been cached by your browser",
                        "@id": "Cause_5"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Sensitive information might have been cached by your browser"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations"
                ]
            },
            {
                "key": "issue_id",
                "value": "attCachedSSL"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "525"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attCachedSSL"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_60210"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "sensitiveInformation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "SensitiveCache"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Most web browsers are configured by default to cache the user's pages during use. This means that SSL pages are cached as well. It is not recommended to enable the web browser to save any SSL information, since this information might be compromised when a vulnerability exists.",
        "issueName": "Cacheable SSL Page Found",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attCachedSSL",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "525",
                "type": "cwe"
            },
            {
                "id": "52512",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "2541136718761166592",
                        "_raw_entity": {
                            "ref": "-3517474992796452096"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "queryxpath.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/queryxpath.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "6716919816480281856",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "2732329336093336064",
                        "_raw_entity": {
                            "ref": "-4873707097942489088"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "showAccount",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "6374793612988336128",
                        "_raw_entity": {
                            "ref": "-3961925784633657600"
                        },
                        "_raw_url": {
                            "ref": "345716453"
                        },
                        "entity_name": "doTransfer",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/doTransfer",
                        "url_name": "https://demo.testfire.net/bank/doTransfer"
                    },
                    {
                        "_raw_@id": "-362241428014490112",
                        "_raw_entity": {
                            "ref": "-8616786764826749184"
                        },
                        "_raw_url": {
                            "ref": "-1274676571"
                        },
                        "entity_name": "admin.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/admin/admin.jsp",
                        "url_name": "https://demo.testfire.net/admin/admin.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attCrossSiteRequestForgery",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "link": [
                                {
                                    "#text": "http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet",
                                    "@target": "http://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet"
                                },
                                {
                                    "#text": "http://www.owasp.org/index.php/ESAPI",
                                    "@target": "http://www.owasp.org/index.php/ESAPI"
                                },
                                {
                                    "#text": "http://www.cgisecurity.com/articles/csrf-faq.shtml",
                                    "@target": "http://www.cgisecurity.com/articles/csrf-faq.shtml"
                                },
                                {
                                    "#text": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445",
                                    "@target": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.147.1445"
                                }
                            ],
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] Strategy: Libraries or Frameworks",
                                "Use a vetted library or framework that does not allow this weakness, or provides constructs that make it easier to avoid.",
                                "For example, use anti-CSRF packages such as the OWASP CSRFGuard -",
                                "Another example is the ESAPI Session Management control, which includes a component for CSRF -",
                                "[2] Ensure that your application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.",
                                "[3] Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330) -",
                                "Note that this can be bypassed using XSS (CWE-79).",
                                "[4] Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.",
                                "Note that this can be bypassed using XSS (CWE-79).",
                                "[5] Use the \"double-submitted cookie\" method as described by Felten and Zeller:",
                                "When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as both a form and a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form and cookie values are the same.",
                                "Because of same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.",
                                "This technique requires Javascript, so it may not work for browsers that have Javascript disabled -",
                                "Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.",
                                "[6] Do not use the GET method for any request that triggers a state change.",
                                "[7] Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
                                "Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] Strategy: Libraries or Frameworks",
                    "Use a vetted library or framework that does not allow this weakness, or provides constructs that make it easier to avoid.",
                    "For example, use anti-CSRF packages such as the OWASP CSRFGuard -",
                    "Another example is the ESAPI Session Management control, which includes a component for CSRF -",
                    "[2] Ensure that your application is free of cross-site scripting issues (CWE-79), because most CSRF defenses can be bypassed using attacker-controlled script.",
                    "[3] Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330) -",
                    "Note that this can be bypassed using XSS (CWE-79).",
                    "[4] Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.",
                    "Note that this can be bypassed using XSS (CWE-79).",
                    "[5] Use the \"double-submitted cookie\" method as described by Felten and Zeller:",
                    "When a user visits a site, the site should generate a pseudorandom value and set it as a cookie on the user's machine. The site should require every form submission to include this value as both a form and a cookie value. When a POST request is sent to the site, the request should only be considered valid if the form and cookie values are the same.",
                    "Because of same-origin policy, an attacker cannot read or modify the value stored in the cookie. To successfully submit a form on behalf of the user, the attacker would have to correctly guess the pseudorandom value. If the pseudorandom value is cryptographically strong, this will be prohibitively difficult.",
                    "This technique requires Javascript, so it may not work for browsers that have Javascript disabled -",
                    "Note that this can probably be bypassed using XSS (CWE-79), or when using web technologies that enable the attacker to read raw headers from HTTP requests.",
                    "[6] Do not use the GET method for any request that triggers a state change.",
                    "[7] Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.",
                    "Note that this can be bypassed using XSS (CWE-79). An attacker could use XSS to generate a spoofed Referer, or to generate a malicious request from a page whose Referer would be allowed."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_60130",
                    "name": "Validate the value of the \"Referer\" header, and use a one-time-nonce for each submitted form",
                    "priority": "Medium",
                    "priority-id": "1"
                }
            },
            {
                "key": "remediation",
                "value": "Validate the value of the \"Referer\" header, and use a one-time-nonce for each submitted form"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attCrossSiteRequestForgery",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_3"
                        },
                        "cwe": {
                            "link": {
                                "#text": "352",
                                "@id": "CWE-352",
                                "@target": "http://cwe.mitre.org/data/definitions/352.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attCrossSiteRequestForgery",
                                "@type": "General"
                            }
                        },
                        "name": "Cross-Site Request Forgery",
                        "references": {
                            "link": [
                                {
                                    "#text": "Cross-site request forgery wiki page",
                                    "@target": "http://en.wikipedia.org/wiki/Cross-site_request_forgery"
                                },
                                {
                                    "#text": "\"JavaScript Hijacking\" by Fortify",
                                    "@target": "http://www.net-security.org/dl/articles/JavaScript_Hijacking.pdf"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "userImpersonation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null
                            ],
                            "text": [
                                "Even well-formed, valid, consistent requests may have been sent without the user's knowledge. Web applications should therefore examine all requests for signs that they are not legitimate. The result of this test indicates that the application being scanned does not do this.",
                                "The severity of this vulnerability depends on the functionality of the affected application. For example, a CSRF attack on a search page is less severe than a CSRF attack on a money-transfer or profile-update page.",
                                "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc., and can result in exposure of data or unintended code execution.",
                                "If the user is currently logged-in to the victim site, the request will automatically use the user's credentials including session cookies, IP address, and other browser authentication methods. Using this method, the attacker forges the victim's identity and submits actions on his or her behalf."
                            ]
                        },
                        "threatClassification": {
                            "name": "Cross-site Request Forgery",
                            "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
                        },
                        "xfid": {
                            "link": {
                                "#text": "6784",
                                "@id": "6784",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/6784"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insufficient authentication method was used by the application",
                        "@id": "Cause_3"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insufficient authentication method was used by the application"
                ]
            },
            {
                "key": "threat_class",
                "value": "Cross-site Request Forgery"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Cross-Site-Request-Forgery"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user"
                ]
            },
            {
                "key": "issue_id",
                "value": "attCrossSiteRequestForgery"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "2"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "352"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attCrossSiteRequestForgery"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_60130"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catCrossSiteRequestForgery"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "userImpersonation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "InsufficientAuthentication"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "6.4",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Even well-formed, valid, consistent requests may have been sent without the user's knowledge. Web applications should therefore examine all requests for signs that they are not legitimate. The result of this test indicates that the application being scanned does not do this. The severity of this vulnerability depends on the functionality of the affected application. For example, a CSRF attack on a search page is less severe than a CSRF attack on a money-transfer or profile-update page. When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc., and can result in exposure of data or unintended code execution. If the user is currently logged-in to the victim site, the request will automatically use the user's credentials including session cookies, IP address, and other browser authentication methods. Using this method, the attacker forges the victim's identity and submits actions on his or her behalf.",
        "issueName": "Cross-Site Request Forgery",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attCrossSiteRequestForgery",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "330",
                "type": "cwe"
            },
            {
                "id": "352",
                "type": "cwe"
            },
            {
                "id": "79",
                "type": "cwe"
            },
            {
                "id": "6784",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Medium",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 6.4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-7807530195256900352",
                        "_raw_entity": {
                            "ref": "7463535076884699136"
                        },
                        "_raw_url": {
                            "ref": "-372305121"
                        },
                        "entity_name": "sendFeedback",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/sendFeedback",
                        "url_name": "https://demo.testfire.net/sendFeedback"
                    },
                    {
                        "_raw_@id": "-5111361654458112256",
                        "_raw_entity": {
                            "ref": "-3517474992796452096"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "queryxpath.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/queryxpath.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "-976605755460765184",
                        "_raw_entity": {
                            "ref": "3855082450745769216"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "customize.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-1191347938666687488",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "-1859503315063056896",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "2310271356214013952",
                        "_raw_entity": {
                            "ref": "-4784596934833808640"
                        },
                        "_raw_url": {
                            "ref": "-372305121"
                        },
                        "entity_name": "name",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/sendFeedback",
                        "url_name": "https://demo.testfire.net/sendFeedback"
                    },
                    {
                        "_raw_@id": "-4454018968918411776",
                        "_raw_entity": {
                            "ref": "-4831459913268758016"
                        },
                        "_raw_url": {
                            "ref": "226819437"
                        },
                        "entity_name": "HostName",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/util/serverStatusCheckService.jsp",
                        "url_name": "https://demo.testfire.net/util/serverStatusCheckService.jsp"
                    },
                    {
                        "_raw_@id": "5688035601109163520",
                        "_raw_entity": {
                            "ref": "-7168640119326840064"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "lang",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    },
                    {
                        "_raw_@id": "-6173898508298226944",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attCrossSiteScripting",
                    "asp-dot-net": {
                        "fixRecommendation": {
                            "@type": "ASP.NET",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// Vulnerable code\n  // Note that untrusted input is being treated as an HTML attribute\n  Literal1.Text = \"<hr noshade size=[untrusted input here]>\";\n  \n  \n  // Modified code\n  Literal1.Text = \"<hr noshade size=\"+Microsoft.Security.Application.AntiXss.HtmlAttributeEncode([untrusted input here])+\">\";",
                                "// Incorrect sequence\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n      // Read input\n      String Input = TextBox1.Text;\n      // Encode untrusted input\n      Input = Microsoft.Security.Application.AntiXss.HtmlEncode(Input);\n      // Process input\n      ...\n      // Write Output\n      Response.Write(\"The input you gave was\"+Input);\n  }\n  \n  \n  // Correct Sequence\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n      // Read input\n      String Input = TextBox1.Text;\n      // Process input\n      ...\n      // Encode untrusted input and write output\n      Response.Write(\"The input you gave was\"+ \n          Microsoft.Security.Application.AntiXss.HtmlEncode(Input));\n  }"
                            ],
                            "text": [
                                "[1] We recommend that you upgrade your server to .NET Framework 2.0 (or newer), which includes inherent security checks that protect against cross site scripting attacks.",
                                "[2] You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, tests for valid dates or values within a range). The validation controls also support custom-written validations, and allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page class file, including both HTML and Web server controls.",
                                "To make sure that user input contains only valid values, you can use one of the following validation controls:",
                                "[1] \"RangeValidator\": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.",
                                "[2] \"RegularExpressionValidator\": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.",
                                "Examples of regular expressions that may help block cross site scripting:",
                                "- A possible regular expression, which will deny the basic cross site scripting variants might be: ^([^<]|\\<[^a-zA-Z])*[<]?$",
                                "- A generic regular expression, which will deny all of the aforementioned characters might be: ^([^\\<\\>\\\"\\'\\%\\;\\)\\(\\&\\+]*)$",
                                "Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.",
                                "There are two ways to check for user input validity:",
                                "1. Test for a general error state:",
                                "In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.",
                                "2. Test for the error state of individual controls:",
                                "Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.",
                                "Finally, we recommend that the Microsoft Anti-Cross Site Scripting Library (v1.5 or higher) be used to encode untrusted user input.",
                                "The Anti-Cross Site Scripting library exposes the following methods:",
                                "[1] HtmlEncode - Encodes input strings for use in HTML",
                                "[2] HtmlAttributeEncode - Encodes input strings for use in HTML attributes",
                                "[3] JavaScriptEncode - Encodes input strings for use in JavaScript",
                                "[4] UrlEncode - Encodes input strings for use in Universal Resource Locators (URLs)",
                                "[5] VisualBasicScriptEncode - Encodes input strings for use in Visual Basic Script",
                                "[6] XmlEncode - Encodes input strings for use in XML",
                                "[7] XmlAttributeEncode - Encodes input strings for use in XML attributes",
                                "To properly use the Microsoft Anti-Cross Site Scripting Library to protect ASP.NET Web-applications, you need to:",
                                "Step 1: Review ASP.NET code that generates output",
                                "Step 2: Determine whether output includes untrusted input parameters",
                                "Step 3: Determine the context which the untrusted input is used as output, and determine which encoding method to use",
                                "Step 4: Encode output",
                                "Example for Step 3:",
                                "Note: If the untrusted input will be used to set an HTML attribute, then the Microsoft.Security.Application.HtmlAttributeEncode method should be used to encode the untrusted input.",
                                "Alternatively, if the untrusted input will be used within the context of JavaScript, then Microsoft.Security.Application.JavaScriptEncode should be used to encode.",
                                "Example for Step 4:",
                                "Some important things to remember about encoding outputs:",
                                "[1] Outputs should be encoded once.",
                                "[2] Output encoding should be done as close to the actual writing of the output as possible.  For example, if an application is reading user input, processing the input and then writing it back out in some form, then encoding should happen just before the output is written."
                            ]
                        }
                    },
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "link": {
                                "#text": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet",
                                "@target": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"
                            },
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] Strategy: Libraries or Frameworks",
                                "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                                "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                                "[2] Understand the context in which your data will be used, and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                                "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                                "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                                "[-] HTML body",
                                "[-] Element attributes (such as src=\"XYZ\")",
                                "[-] URIs",
                                "[-] JavaScript sections",
                                "[-] Cascading Style Sheets and style property",
                                "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                                "Consult the XSS Prevention Cheat Sheet",
                                "for more details on the types of encoding and escaping that are needed.",
                                "[3] Strategy: Identify and Reduce Attack Surface",
                                "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                                "[4] Strategy: Output Encoding",
                                "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                                "[5] Strategy: Identify and Reduce Attack Surface",
                                "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                                "[6] Strategy: Input Validation",
                                "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on blacklisting malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                                "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                                "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not only parameters that the user is expected to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only those fields that are expected to be redisplayed by the site. It is common for other data from the request to be reflected by the application server or the application, and for development teams to fail to anticipate this. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                                "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. Input validation effectively limits what will appear in output. It will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                                "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                                "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                            ]
                        }
                    },
                    "j2ee": {
                        "fixRecommendation": {
                            "@type": "J2EE",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// Java example to validate required fields\n  public Class Validator {\n      ...\n      public static boolean validateRequired(String value) {\n          boolean isFieldValid = false;\n          if (value != null && value.trim().length() > 0) {\n              isFieldValid = true;\n          }\n          return isFieldValid;\n      }\n      ...\n  }\n  ...\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateRequired(fieldValue)) {\n      // fieldValue is valid, continue processing request\n      ...\n  }",
                                "// Java example to validate that a field is an int number\n  public Class Validator {\n      ...\n      public static boolean validateInt(String value) {\n          boolean isFieldValid = false;\n          try {\n              Integer.parseInt(value);\n              isFieldValid = true;\n          } catch (Exception e) {\n              isFieldValid = false;\n          }\n          return isFieldValid;\n      }\n      ...\n  }\n  ...\n  // check if the HTTP request parameter is of type int\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateInt(fieldValue)) {\n      // fieldValue is valid, continue processing request\n      ...\n  }",
                                "// Example to convert the HTTP request parameter to a primitive wrapper data type\n  // and store this value in a request attribute for further processing\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateInt(fieldValue)) {\n      // convert fieldValue to an Integer\n      Integer integerValue = Integer.getInteger(fieldValue);\n      // store integerValue in a request attribute\n      request.setAttribute(\"fieldName\", integerValue);\n  }\n  ...\n  // Use the request attribute for further processing\n  Integer integerValue = (Integer)request.getAttribute(\"fieldName\");\n  ...",
                                "// Example to validate the field length\n  public Class Validator {\n      ...\n      public static boolean validateLength(String value, int minLength, int maxLength) {\n          String validatedValue = value;\n          if (!validateRequired(value)) {\n              validatedValue = \"\";\n          }\n          return (validatedValue.length() >= minLength &&\n                      validatedValue.length() <= maxLength);\n      }\n      ...\n  }\n  ...\n  String userName = request.getParameter(\"userName\");\n  if (Validator.validateRequired(userName)) {\n      if (Validator.validateLength(userName, 8, 20)) {\n          // userName is valid, continue further processing\n          ...\n      }\n  }",
                                "// Example to validate the field range\n  public Class Validator {\n      ...\n      public static boolean validateRange(int value, int min, int max) {\n          return (value >= min && value <= max);\n      }\n      ...\n  }\n  ...\n  String fieldValue = request.getParameter(\"numberOfChoices\");\n  if (Validator.validateRequired(fieldValue)) {\n      if (Validator.validateInt(fieldValue)) {\n          int numberOfChoices = Integer.parseInt(fieldValue);\n          if (Validator.validateRange(numberOfChoices, 10, 20)) {\n              // numberOfChoices is valid, continue processing request\n              ...\n          }\n      }\n  }",
                                "// Example to validate user selection against a list of options\n  public Class Validator {\n      ...\n      public static boolean validateOption(Object[] options, Object value) {\n          boolean isValidValue = false;\n          try {\n              List list = Arrays.asList(options);\n              if (list != null) {\n                  isValidValue = list.contains(value);\n              }\n          } catch (Exception e) {\n          }\n          return isValidValue;\n      }\n      ...\n  }\n  ...\n  // Allowed options\n  String[] options = {\"option1\", \"option2\", \"option3\");\n  // Verify that the user selection is one of the allowed options\n  String userSelection = request.getParameter(\"userSelection\");\n  if (Validator.validateOption(options, userSelection)) {\n      // valid user selection, continue processing request\n      ...\n  }",
                                "// Example to validate that a given value matches a specified pattern\n  // using the Apache regular expression package\n  import org.apache.regexp.RE;\n  import org.apache.regexp.RESyntaxException;\n  public Class Validator {\n      ...\n      public static boolean matchPattern(String value, String expression) {\n          boolean match = false;\n          if (validateRequired(expression)) {\n               RE r = new RE(expression);\n               match = r.match(value);             \n          }\n          return match;\n      }\n      ...\n  }\n  ...\n  // Verify that the userName request parameter is alphanumeric\n  String userName = request.getParameter(\"userName\");\n  if (Validator.matchPattern(userName, \"^[a-zA-Z0-9]*$\")) {\n      // userName is valid, continue processing request\n      ...\n  }",
                                "// Example to validate that a given value matches a specified pattern\n  // using the Java 1.4 regular expression package\n  import java.util.regex.Pattern;\n  import java.util.regexe.Matcher;\n  public Class Validator {\n      ...\n      public static boolean matchPattern(String value, String expression) {\n          boolean match = false;\n          if (validateRequired(expression)) {\n              match = Pattern.matches(expression, value);\n          }\n          return match;\n      }\n      ...\n  }",
                                "// Example to validate a required cookie value\n  // First retrieve all available cookies submitted in the HTTP request\n  Cookie[] cookies = request.getCookies();\n  if (cookies != null) {\n      // find the \"user\" cookie\n      for (int i=0; i<cookies.length; ++i) {\n          if (cookies[i].getName().equals(\"user\")) {\n              // validate the cookie value\n              if (Validator.validateRequired(cookies[i].getValue()) {\n                  // valid cookie value, continue processing request\n                  ...\n              }\n          }    \n      }\n  }",
                                "// Example to filter sensitive data to prevent cross-site scripting\n  public Class Validator {\n      ...\n      public static String filter(String value) {\n          if (value == null) {\n              return null;\n          }        \n          StringBuffer result = new StringBuffer(value.length());\n          for (int i=0; i<value.length(); ++i) {\n              switch (value.charAt(i)) {\n              case '<':\n                  result.append(\"&lt;\");\n                  break;\n              case '>': \n                  result.append(\"&gt;\");\n                  break;\n              case '\"': \n                  result.append(\"&quot;\");\n                  break;\n              case '\\'': \n                  result.append(\"&#39;\");\n                  break;\n              case '%': \n                  result.append(\"&#37;\");\n                  break;\n              case ';': \n                  result.append(\"&#59;\");\n                  break;\n              case '(': \n                  result.append(\"&#40;\");\n                  break;\n              case ')': \n                  result.append(\"&#41;\");\n                  break;\n              case '&': \n                  result.append(\"&amp;\");\n                  break;\n              case '+':\n                  result.append(\"&#43;\");\n                  break;\n              default:\n                  result.append(value.charAt(i));\n                  break;\n          }        \n          return result;\n      }\n      ...\n  }\n  ...\n  // Filter the HTTP response using Validator.filter\n  PrintWriter out = response.getWriter();\n  // set output response\n  out.write(Validator.filter(response));\n  out.close();",
                                "// Example to filter all sensitive characters in the HTTP response using a Java Filter.\n  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!\n  public class SensitiveCharsFilter implements Filter {\n      ...\n      public void doFilter(ServletRequest request,\n                      ServletResponse response,\n                      FilterChain chain)\n              throws IOException, ServletException {\n  \n          PrintWriter out = response.getWriter();\n          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);\n          chain.doFilter(request, wrapper);\n  \n          CharArrayWriter caw = new CharArrayWriter();\n          caw.write(Validator.filter(wrapper.toString()));\n          \n          response.setContentType(\"text/html\");\n          response.setContentLength(caw.toString().length());\n          out.write(caw.toString());\n          out.close();\n      }\n      ...\n      public class CharResponseWrapper extends HttpServletResponseWrapper {\n          private CharArrayWriter output;\n  \n          public String toString() {\n              return output.toString();\n          }\n      \n          public CharResponseWrapper(HttpServletResponse response){\n              super(response);\n              output = new CharArrayWriter();\n          }\n          \n          public PrintWriter getWriter(){\n              return new PrintWriter(output);\n          }\n      }\n  } \n  \n  }",
                                "// Example to secure a cookie, i.e. instruct the browser to\n  // send the cookie using a secure protocol\n  Cookie cookie = new Cookie(\"user\", \"sensitive\");\n  cookie.setSecure(true);\n  response.addCookie(cookie);",
                                "<form-validation>\n      <global>\n          ...\n          <validator name=\"required\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateRequired\"\n              msg=\"errors.required\">\n          </validator>\n          <validator name=\"mask\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateMask\"\n              msg=\"errors.invalid\">\n          </validator>\n          ...\n      </global>\n      <formset>\n          <form name=\"loginForm\">\n              <!-- userName is required and is alpha-numeric case insensitive -->\n              <field property=\"userName\" depends=\"required,mask\">\n                  <!-- message resource key to display if validation fails -->\n                  <msg name=\"mask\" key=\"login.userName.maskmsg\"/>\n                  <arg0 key=\"login.userName.displayname\"/>\n                  <var>\n                      <var-name>mask</var-name>\n                      <var-value>^[a-zA-Z0-9]*$</var-value>\n                  </var>\n              </field>\n          ...\n          </form>\n          ...\n      </formset>\n  </form-validation>",
                                "<%@ taglib uri=\"http://java.sun.com/jsf/html\" prefix=\"h\" %>\n  <%@ taglib uri=\"http://java.sun.com/jsf/core\" prefix=\"f\" %>\n  ...\n  <jsp:useBean id=\"UserBean\"\n      class=\"myApplication.UserBean\" scope=\"session\" />\n  <f:use_faces>\n    <h:form formName=\"loginForm\" >\n      <h:input_text id=\"userName\" size=\"20\" modelReference=\"UserBean.userName\">\n          <f:validate_required/>\n          <f:validate_length minimum=\"8\" maximum=\"20\"/>    \n      </h:input_text>\n      <!-- display errors if present -->\n      <h:output_errors id=\"loginErrors\" clientId=\"userName\"/>\n      <h:command_button id=\"submit\" label=\"Submit\" commandName=\"submit\" /><p>\n    </h:form>\n  </f:use_faces>",
                                "// Example: ErrorKeys defining the following error keys:    \n      //    - ERROR_USERNAME_REQUIRED\n      //    - ERROR_USERNAME_ALPHANUMERIC\n      //    - ERROR_USERNAME_DUPLICATE\n      //    - ERROR_USERNAME_INVALID\n      //    ...\n      public Class ErrorKeys {\n          public static final String ERROR_USERNAME_REQUIRED = \"error.username.required\";\n          public static final String ERROR_USERNAME_ALPHANUMERIC = \"error.username.alphanumeric\";\n          public static final String ERROR_USERNAME_DUPLICATE = \"error.username.duplicate\";\n          public static final String ERROR_USERNAME_INVALID = \"error.username.invalid\";\n          ...\n      }",
                                "// Example: Error encapsulates an error key.\n      // Error is serializable to support code executing in multiple JVMs.\n      public Class Error implements Serializable {\n          \n          // Constructor given a specified error key\n          public Error(String key) {\n              this(key, null);\n          }\n          \n          // Constructor given a specified error key and array of placeholder objects\n          public Error(String key, Object[] values) {\n              this.key = key;\n              this.values = values;\n          }\n          \n          // Returns the error key\n          public String getKey() {\n              return this.key;\n          }\n          \n          // Returns the placeholder values\n          public Object[] getValues() {\n              return this.values;\n          }\n          \n          private String key = null;\n          private Object[] values = null;\n      }",
                                "// Example: Errors encapsulates the Error objects being reported to the presentation layer.\n      // Errors are stored in a HashMap where the key is the bean property name and value is an\n      // ArrayList of Error objects.\n      public Class Errors implements Serializable {\n      \n          // Adds an Error object to the Collection of errors for the specified bean property.\n          public void addError(String property, Error error) {\n              ArrayList propertyErrors = (ArrayList)errors.get(property);\n              if (propertyErrors == null) {\n                  propertyErrors = new ArrayList();\n                  errors.put(property, propertyErrors);\n              }\n              propertyErrors.put(error);            \n          }\n          \n          // Returns true if there are any errors\n          public boolean hasErrors() {\n              return (errors.size > 0);\n          }\n          \n          // Returns the Errors for the specified property\n          public ArrayList getErrors(String property) {\n              return (ArrayList)errors.get(property);\n          }\n  \n          private HashMap errors = new HashMap();\n      }",
                                "// Example to process validation errors of the \"user_name\" field.\n  Errors errors = new Errors();\n  String userName = request.getParameter(\"user_name\");\n  // (a) Required validation rule\n  if (!Validator.validateRequired(userName)) {\n      errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));\n  } // (b) Alpha-numeric validation rule\n  else if (!Validator.matchPattern(userName, \"^[a-zA-Z0-9]*$\")) {\n      errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));\n  }\n  else\n  {\n      // (c) Duplicate check validation rule\n      // We assume that there is an existing UserValidationEJB session bean that implements\n      // a checkIfDuplicate() method to verify if the user already exists in the database.\n      try {\n          ...        \n          if (UserValidationEJB.checkIfDuplicate(userName)) {\n              errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));\n          }\n      } catch (RemoteException e) {\n          // log the error\n          logger.error(\"Could not validate user for specified userName: \" + userName);\n          errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);\n      }\n  }\n  // set the errors object in a request attribute called \"errors\"\n  request.setAttribute(\"errors\", errors);\n  ...",
                                "// Example to forward to the userInput.jsp following user validation errors\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/user/userInput.jsp\");\n  if (rd != null) {\n      rd.forward(request, response);\n  }",
                                "// Example to return a HTTP error code\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/user/userInput.jsp\");\n  if (rd == null) {\n      // messages is a resource bundle with all message keys and values\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));\n  }",
                                "<%@ page errorPage=\"/errors/userValidation.jsp\" %>",
                                "<%@ page isErrorPage=\"true\" %>",
                                "################################################\n  # ErrorMessages.properties\n  ################################################\n  # required user name error message\n  error.username.required=User name field is required\n  \n  # invalid user name format\n  error.username.alphanumeric=User name must be alphanumeric\n  \n  # duplicate user name error message\n  error.username.duplicate=User name {0} already exists, please choose another one\n  \n  ...",
                                "// Example to show how to format a message using placeholder parameters\n  String pattern = \"User name {0} already exists, please choose another one\";\n  String userName = request.getParameter(\"user_name\");\n  Object[] args = new Object[1];\n  args[0] = userName;\n  String message = MessageFormat.format(pattern, args);",
                                "// Example to render an error message from a localized ErrorMessages resource (properties file)\n  // Utility class to retrieve locale-specific error messages\n  public Class ErrorMessageResource {\n      \n      // Returns the error message for the specified error key in the environment locale\n      public String getErrorMessage(String errorKey) {\n          return getErrorMessage(errorKey, defaultLocale);\n      }\n      \n      // Returns the error message for the specified error key in the specified locale\n      public String getErrorMessage(String errorKey, Locale locale) {\n          return getErrorMessage(errorKey, null, locale);\n      }\n      \n      // Returns a formatted error message for the specified error key in the specified locale\n      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    \n          // Get localized ErrorMessageResource\n          ResourceBundle errorMessageResource = ResourceBundle.getBundle(\"ErrorMessages\", locale);\n          // Get localized error message\n          String errorMessage = errorMessageResource.getString(errorKey);\n          if (args != null) {\n              // Format the message using the specified placeholders args\n              return MessageFormat.format(errorMessage, args);\n          } else {\n              return errorMessage;\n          }\n      }\n      \n      // default environment locale\n      private Locale defaultLocale = Locale.getDefaultLocale();\n  }\n  ...\n  // Get the user's locale\n  Locale userLocale = request.getLocale();\n  // Check if there were any validation errors\n  Errors errors = (Errors)request.getAttribute(\"errors\");\n  if (errors != null && errors.hasErrors()) {\n      // iterate through errors and output error messages corresponding to the \"user_name\" property\n      ArrayList userNameErrors = errors.getErrors(\"user_name\");\n      ListIterator iterator = userNameErrors.iterator();\n      while (iterator.hasNext()) {\n          // Get the next error object\n          Error error = (Error)iterator.next();\n          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);\n          output.write(errorMessage + \"\\r\\n\");\n      }\n  }",
                                "<!-- Mapping of HTTP error codes and application exceptions to error pages -->\n  <error-page>\n    <exception-type>UserValidationException</exception-type>\n    <location>/errors/validationError.html</error-page>\n  </error-page>\n  <error-page>\n    <error-code>500</exception-type>\n    <location>/errors/internalError.html</error-page>\n  </error-page>\n  <error-page>\n  ...\n  </error-page>\n  ...",
                                "<form-validation>\n      <global>\n          ...\n          <validator name=\"required\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateRequired\"\n              msg=\"errors.required\">\n          </validator>\n          <validator name=\"mask\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateMask\"\n              msg=\"errors.invalid\">\n          </validator>\n          ...\n      </global>\n      <formset>\n          <form name=\"loginForm\">\n              <!-- userName is required and is alpha-numeric case insensitive -->\n              <field property=\"userName\" depends=\"required,mask\">\n                  <!-- message resource key to display if validation fails -->\n                  <msg name=\"mask\" key=\"login.userName.maskmsg\"/>\n                  <arg0 key=\"login.userName.displayname\"/>\n                  <var>\n                      <var-name>mask</var-name>\n                      <var-value>^[a-zA-Z0-9]*$</var-value>\n                  </var>\n              </field>\n          ...\n          </form>\n          ...\n      </formset>\n  </form-validation>",
                                "<%@ page language=\"java\" %>\n  <%@ taglib uri=\"/WEB-INF/struts-html.tld\" prefix=\"html\" %>\n  <%@ taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n  <html:html>\n  <head>\n  <body>\n      <html:form action=\"/logon.do\">    \n      <table border=\"0\" width=\"100%\">\n      <tr>\n          <th align=\"right\">\n              <html:errors property=\"username\"/>\n              <bean:message key=\"prompt.username\"/>\n          </th>\n          <td align=\"left\">\n              <html:text property=\"username\" size=\"16\"/>\n          </td>\n      </tr>\n      <tr>\n      <td align=\"right\">\n          <html:submit><bean:message key=\"button.submit\"/></html:submit>\n      </td>\n      <td align=\"right\">\n          <html:reset><bean:message key=\"button.reset\"/></html:reset>\n      </td>\n      </tr>\n      </table>\n      </html:form>\n  </body>\n  </html:html>",
                                "<%@ taglib uri=\"http://java.sun.com/jsf/html\" prefix=\"h\" %>\n  <%@ taglib uri=\"http://java.sun.com/jsf/core\" prefix=\"f\" %>\n  ...\n  <jsp:useBean id=\"UserBean\"\n      class=\"myApplication.UserBean\" scope=\"session\" />\n  <f:use_faces>\n    <h:form formName=\"loginForm\" >\n      <h:input_text id=\"userName\" size=\"20\" modelReference=\"UserBean.userName\">\n          <f:validate_required/>\n          <f:validate_length minimum=\"8\" maximum=\"20\"/>    \n      </h:input_text>\n      <!-- display errors if present -->\n      <h:output_errors id=\"loginErrors\" clientId=\"userName\"/>\n      <h:command_button id=\"submit\" label=\"Submit\" commandName=\"submit\" /><p>\n    </h:form>\n  </f:use_faces>"
                            ],
                            "link": [
                                {
                                    "#text": "http://java.sun.com/j2se/1.3/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.3/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.4/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.4/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/products/servlet/2.3/javadoc/",
                                    "@target": "http://java.sun.com/products/servlet/2.3/javadoc/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/regexp/",
                                    "@target": "http://jakarta.apache.org/regexp/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/commons/validator/",
                                    "@target": "http://jakarta.apache.org/commons/validator/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2ee/javaserverfaces/",
                                    "@target": "http://java.sun.com/j2ee/javaserverfaces/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.3/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.3/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.4/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.4/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/products/servlet/2.3/javadoc/",
                                    "@target": "http://java.sun.com/products/servlet/2.3/javadoc/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/regexp/",
                                    "@target": "http://jakarta.apache.org/regexp/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/commons/validator/",
                                    "@target": "http://jakarta.apache.org/commons/validator/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2ee/javaserverfaces/",
                                    "@target": "http://java.sun.com/j2ee/javaserverfaces/"
                                }
                            ],
                            "text": [
                                "** Input Data Validation:",
                                "While data validations may be provided as a user convenience on the \"client\" tier data, validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.",
                                "A good design usually requires the web application framework to provide server-side utility routines to validate the following:",
                                "[1] Required field",
                                "[2] Field data type (all HTTP request parameters are Strings by default)",
                                "[3] Field length",
                                "[4] Field range",
                                "[5] Field options",
                                "[6] Field pattern",
                                "[7] Cookie values",
                                "[8] HTTP Response",
                                "A good practice is to implement the above routine as static methods in a \"Validator\" utility class.  The following sections describe an example validator class.",
                                "[1] Required field",
                                "Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.",
                                "Example of how to validate required fields:",
                                "[2] Field data type",
                                "In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying that the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.",
                                "Example of how to validate a numeric field (type int):",
                                "A good practice is to convert all HTTP request parameters to their respective data types.  For example, the developer should store the \"integerValue\" of a request parameter in a request attribute and use it as shown in the following example:",
                                "The primary Java data types that the application should handle:",
                                "- Byte",
                                "- Short",
                                "- Integer",
                                "- Long",
                                "- Float",
                                "- Double",
                                "- Date",
                                "[3] Field length",
                                "Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.",
                                "Example to validate that the length of the userName field is between 8 and 20 characters:",
                                "[4] Field range",
                                "Always ensure that the input parameter is within a range as defined by the functional requirements.",
                                "Example to validate that the input numberOfChoices is between 10 and 20:",
                                "[5] Field options",
                                "Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.",
                                "Example to validate the user selection against a list of allowed options:",
                                "[6] Field pattern",
                                "Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:",
                                "^[a-zA-Z0-9]*$",
                                "Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.  Example to perform regular expression validation:",
                                "Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:",
                                "[7] Cookie value",
                                "Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements (validate a required value, validate length, etc).",
                                "Example to validate a required cookie value:",
                                "[8] HTTP Response",
                                "[8-1] Filter user input",
                                "To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:",
                                "< > \" ' % ; ) ( & +",
                                "Example to filter a specified string by converting sensitive characters to their corresponding character entities:",
                                "The Java Servlet API 2.3 introduced filters, which support the interception and transformation of HTTP requests or responses.",
                                "Example of using a Servlet Filter to sanitize the response using Validator.filter:",
                                "[8-2] Secure the cookie",
                                "When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.",
                                "Example to secure the \"user\" cookie:",
                                "RECOMMENDED JAVA TOOLS",
                                "The two main Java frameworkss for server-side validation are:",
                                "[1] Jakarta Commons Validator (integrated with Struts 1.1)",
                                "The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.",
                                "Struts defines the following basic input validators, but custom validators may also be defined:",
                                "required: succeeds if the field contains any characters other than white space.",
                                "mask: succeeds if the value matches the regular expression given by the mask attribute.",
                                "range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).",
                                "maxLength: succeeds if the field is length is less than or equal to the max attribute.",
                                "minLength: succeeds if the field is length is greater than or equal to the min attribute.",
                                "byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.",
                                "date: succeeds if the value represents a valid date. A date pattern may be provided.",
                                "creditCard: succeeds if the value could be a valid credit card number.",
                                "e-mail: succeeds if the value could be a valid e-mail address.",
                                "Example to validate the userName field of a loginForm using Struts Validator:",
                                "[2] JavaServer Faces Technology",
                                "JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, and validate input.",
                                "The JavaServer Faces API implements the following basic validators, but custom validators may be defined:",
                                "validate_doublerange: registers a DoubleRangeValidator on a component.",
                                "validate_length: registers a LengthValidator on a component.",
                                "validate_longrange: registers a LongRangeValidator on a component.",
                                "validate_required: registers a RequiredValidator on a component.",
                                "validate_stringrange: registers a StringRangeValidator on a component.",
                                "validator: registers a custom Validator on a component.",
                                "The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):",
                                "input_date: accepts a java.util.Date formatted with a java.text.Date instance.",
                                "output_date: displays a java.util.Date formatted with a java.text.Date instance.",
                                "input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance.",
                                "output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance.",
                                "input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat.",
                                "output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat.",
                                "input_text: accepts a text string of one line.",
                                "output_text: displays a text string of one line.",
                                "input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance.",
                                "output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance.",
                                "input_hidden: allows a page author to include a hidden variable in a page.",
                                "input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed.",
                                "input_textarea: accepts multiple lines of text.",
                                "output_errors: displays error messages for an entire page or error messages associated with a specified client identifier.",
                                "output_label: displays a nested component as a label for a specified input field.",
                                "output_message: displays a localized message.",
                                "Example to validate the userName field of a loginForm using JavaServer Faces:",
                                "REFERENCES",
                                "Java API 1.3 -",
                                "Java API 1.4 -",
                                "Java Servlet API 2.3 -",
                                "Java Regular Expression Package -",
                                "Jakarta Validator -",
                                "JavaServer Faces Technology -",
                                "** Error Handling:",
                                "Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.",
                                "While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:",
                                "[1] Defining Errors",
                                "[2] Reporting Errors",
                                "[3] Rendering Errors",
                                "[4] Error Mapping",
                                "[1] Defining Errors",
                                "Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the \"user_name\" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:",
                                "(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the \"user_name\" field is required;",
                                "(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the \"user_name\" field should be alphanumeric;",
                                "(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the \"user_name\" value is a duplicate in the database;",
                                "(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the \"user_name\" value is invalid;",
                                "A good practice is to define the following framework Java classes which are used to store and report application errors:",
                                "- ErrorKeys: defines all error keys",
                                "- Error: encapsulates an individual error",
                                "- Errors: encapsulates a Collection of errors",
                                "Using the above framework classes, here is an example to process validation errors of the \"user_name\" field:",
                                "[2] Reporting Errors",
                                "There are two ways to report web-tier application errors:",
                                "(a) Servlet Error Mechanism",
                                "(b) JSP Error Mechanism",
                                "[2-a] Servlet Error Mechanism",
                                "A Servlet may report errors by:",
                                "- forwarding to the input JSP (having already stored the errors in a request attribute), OR",
                                "- calling response.sendError with an HTTP error code argument, OR",
                                "- throwing an exception",
                                "It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):",
                                "If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as an argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.",
                                "Example to return a HTTP error:",
                                "As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:",
                                "- RuntimeException",
                                "- ServletException",
                                "- IOException",
                                "[2-b] JSP Error Mechanism",
                                "JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:",
                                "Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive:",
                                "The isErrorPage directive causes the \"exception\" variable to be initialized to the exception object being thrown.",
                                "[3] Rendering Errors",
                                "The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:",
                                "(a) Resource Bundles",
                                "(b) Message Formatting",
                                "[3-a] Resource Bundles",
                                "Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.",
                                "It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:",
                                "Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.",
                                "[3-b] Message Formatting",
                                "The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:",
                                "Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:",
                                "It is recommended to define a custom JSP tag (e.g. displayErrors), to iterate through and render error messages as shown in the above example.",
                                "[4] Error Mapping",
                                "Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages. It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:",
                                "RECOMMENDED JAVA TOOLS",
                                "The two main Java frameworkss for server-side validation are:",
                                "[1] Jakarta Commons Validator (integrated with Struts 1.1)",
                                "The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.",
                                "Example to validate the userName field of a loginForm using Struts Validator:",
                                "The Struts JSP tag library defines the \"errors\" tag that conditionally displays a set of accumulated error messages as shown in the following example:",
                                "[2] JavaServer Faces Technology",
                                "JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.",
                                "The JavaServer Faces API defines the \"output_errors\" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.",
                                "Example to validate the userName field of a loginForm using JavaServer Faces:",
                                "REFERENCES",
                                "Java API 1.3 -",
                                "Java API 1.4 -",
                                "Java Servlet API 2.3 -",
                                "Java Regular Expression Package -",
                                "Jakarta Validator -",
                                "JavaServer Faces Technology -"
                            ]
                        }
                    },
                    "php": {
                        "fixRecommendation": {
                            "@type": "PHP",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// PHP example to validate required fields\n  function validateRequired($input) {\n      ...\n      $pass = false;\n      if (strlen(trim($input))>0){\n          $pass = true;\n      }\n      return $pass;\n      ...\n  }\n  ...\n  if (validateRequired($fieldName)) {\n      // fieldName is valid, continue processing request\n      ...\n  }",
                                "$input = htmlentities($input, ENT_QUOTES, 'UTF-8');",
                                "<?php\n  \n  header('Content-Type: text/html; charset=UTF-8');\n  \n  ?>",
                                "<$php\n  \n      $value = \"some_value\";\n      $time = time()+3600;\n      $path = \"/application/\";\n      $domain = \".example.com\";\n      $secure = 1;\n  \n      setcookie(\"CookieName\", $value, $time, $path, $domain, $secure, TRUE);\n  ?>"
                            ],
                            "link": [
                                {
                                    "#text": "http://msdn2.microsoft.com/en-us/library/ms533046.aspx",
                                    "@target": "http://msdn2.microsoft.com/en-us/library/ms533046.aspx"
                                },
                                {
                                    "#text": "http://phpsec.org/",
                                    "@target": "http://phpsec.org/"
                                },
                                {
                                    "#text": "http://shiflett.org/",
                                    "@target": "http://shiflett.org/"
                                }
                            ],
                            "text": [
                                "** Input Data Validation:",
                                "While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.",
                                "A good design usually requires the web application framework to provide server-side utility routines to validate the following:",
                                "[1] Required field",
                                "[2] Field data type (all HTTP request parameters are Strings by default)",
                                "[3] Field length",
                                "[4] Field range",
                                "[5] Field options",
                                "[6] Field pattern",
                                "[7] Cookie values",
                                "[8] HTTP Response",
                                "A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.",
                                "[1] Required field",
                                "Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.",
                                "Example of how to validate required fields:",
                                "[2] Field data type",
                                "In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.",
                                "[3] Field length",
                                "Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.",
                                "[4] Field range",
                                "Always ensure that the input parameter is within a range as defined by the functional requirements.",
                                "[5] Field options",
                                "Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.",
                                "[6] Field pattern",
                                "Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:",
                                "^[a-zA-Z0-9]+$",
                                "[7] Cookie value",
                                "The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.",
                                "[8] HTTP Response",
                                "[8-1] Filter user input",
                                "To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:",
                                "< > \" ' % ; ) ( & +",
                                "PHP includes some automatic sanitization utility functions, such as htmlentities():",
                                "In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:",
                                "[8-2] Secure the cookie",
                                "When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.",
                                "You can use the following code example, for securing the cookie:",
                                "In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers).",
                                "The HttpOnly flag was Added in PHP 5.2.0.",
                                "REFERENCES",
                                "[1] Mitigating Cross-site Scripting With HTTP-only Cookies:",
                                "[2] PHP Security Consortium:",
                                "[3] PHP & Web Application Security Blog (Chris Shiflett):"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] Strategy: Libraries or Frameworks",
                    "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                    "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                    "[2] Understand the context in which your data will be used, and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                    "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                    "[-] HTML body",
                    "[-] Element attributes (such as src=\"XYZ\")",
                    "[-] URIs",
                    "[-] JavaScript sections",
                    "[-] Cascading Style Sheets and style property",
                    "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                    "Consult the XSS Prevention Cheat Sheet",
                    "for more details on the types of encoding and escaping that are needed.",
                    "[3] Strategy: Identify and Reduce Attack Surface",
                    "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "[4] Strategy: Output Encoding",
                    "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                    "[5] Strategy: Identify and Reduce Attack Surface",
                    "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "[6] Strategy: Input Validation",
                    "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on blacklisting malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                    "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not only parameters that the user is expected to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only those fields that are expected to be redisplayed by the site. It is common for other data from the request to be reflected by the application server or the application, and for development teams to fail to anticipate this. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. Input validation effectively limits what will appear in output. It will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                    "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                    "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_52000",
                    "name": "Review possible solutions for hazardous character injection",
                    "priority": "High",
                    "priority-id": "2"
                }
            },
            {
                "key": "remediation",
                "value": "Review possible solutions for hazardous character injection"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attCrossSiteScripting",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_0"
                        },
                        "cwe": {
                            "link": {
                                "#text": "79",
                                "@id": "CWE-79",
                                "@target": "http://cwe.mitre.org/data/definitions/79.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": [
                                {
                                    "#text": "attCrossSiteScripting",
                                    "@type": "General"
                                },
                                {
                                    "#text": "attCrossSiteScripting",
                                    "@type": "ASP.NET"
                                },
                                {
                                    "#text": "attCrossSiteScripting",
                                    "@type": "J2EE"
                                },
                                {
                                    "#text": "attCrossSiteScripting",
                                    "@type": "PHP"
                                }
                            ]
                        },
                        "name": "Cross-Site Scripting",
                        "references": {
                            "link": [
                                {
                                    "#text": "CERT Advisory CA-2000-02",
                                    "@target": "http://www.cert.org/advisories/CA-2000-02.html"
                                },
                                {
                                    "#text": "Microsoft How To: Prevent Cross-Site Scripting in ASP.NET",
                                    "@target": "http://msdn2.microsoft.com/en-us/library/ms998274.aspx"
                                },
                                {
                                    "#text": "Microsoft How To: Protect From Injection Attacks in ASP.NET",
                                    "@target": "http://msdn2.microsoft.com/en-us/library/Bb355989.aspx"
                                },
                                {
                                    "#text": "Microsoft How To: Use Regular Expressions to Constrain Input in ASP.NET",
                                    "@target": "http://msdn2.microsoft.com/en-us/library/ms998267.aspx"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "userImpersonation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "[REQUEST]\n  GET /index.aspx?name=JSmith HTTP/1.1",
                                "[RESPONSE]\n  HTTP/1.1 200 OK\n  Server: SomeServer\n  Date: Sun, 01 Jan 2002 00:31:19 GMT\n  Content-Type: text/html\n  Accept-Ranges: bytes\n  Content-Length: 27\n  \n  <HTML>\n  Hello JSmith\n  </HTML>",
                                "[ATTACK REQUEST]\n  GET /index.aspx?name=>\"'><script>alert('PWND')</script> HTTP/1.1",
                                "[ATTACK RESPONSE]\n  HTTP/1.1 200 OK\n  Server: SomeServer\n  Date: Sun, 01 Jan 2002 00:31:19 GMT\n  Content-Type: text/html\n  Accept-Ranges: bytes\n  Content-Length: 83\n  \n  <HTML>\n  Hello >\"'><script>alert('PWND')</script>\n  </HTML>"
                            ],
                            "text": [
                                "AppScan has detected that the application does not correctly neutralize user-controllable input before it is placed in output that is served as a web page.",
                                "This may be used in a Cross-site scripting attack.",
                                "Cross-site scripting (XSS) vulnerabilities occur when:",
                                "[1] Untrusted data enters a web application, typically from a web request.",
                                "[2] The web application dynamically generates a web page that contains this untrusted data.",
                                "[3] During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX.",
                                "[4] A victim visits the generated web page through a web browser, which contains a malicious script that was injected using the untrusted data.",
                                "[5] Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain.",
                                "[6] This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain.",
                                "Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.",
                                "Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself, possibly taking over the victim's machine (sometimes referred to as \"drive-by hacking\").",
                                "There are three main kinds of XSS:",
                                "Type 1: Reflected XSS (also called \"Non-Persistent\")",
                                "The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser.",
                                "Type 2: Stored XSS (also called \"Persistent\")",
                                "The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs.",
                                "Type 0: DOM-Based XSS",
                                "In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible.",
                                "The following example shows a script that returns a parameter value in the response.",
                                "The parameter value is sent to the script using a GET request, and then retured in the response embedded in the HTML.",
                                "An attacker might leverage the attack like so:",
                                "In this case, the JavaScript code will be executed by the browser (The >\"'> part is irrelevant here)."
                            ]
                        },
                        "threatClassification": {
                            "name": "Cross-site Scripting",
                            "reference": "http://projects.webappsec.org/Cross-Site+Scripting"
                        },
                        "xfid": {
                            "link": {
                                "#text": "6784",
                                "@id": "6784",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/6784"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Sanitation of hazardous characters was not performed correctly on user input",
                        "@id": "Cause_0"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Sanitation of hazardous characters was not performed correctly on user input"
                ]
            },
            {
                "key": "threat_class",
                "value": "Cross-site Scripting"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Cross-Site+Scripting"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user"
                ]
            },
            {
                "key": "issue_id",
                "value": "attCrossSiteScripting"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "3"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "79"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attCrossSiteScripting"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_52000"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catCrossSiteScripting"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "userImpersonation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "hazardousCharactersNotSanitized"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "7.5",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "AppScan has detected that the application does not correctly neutralize user-controllable input before it is placed in output that is served as a web page. This may be used in a Cross-site scripting attack. Cross-site scripting (XSS) vulnerabilities occur when: [1] Untrusted data enters a web application, typically from a web request. [2] The web application dynamically generates a web page that contains this untrusted data. [3] During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX. [4] A victim visits the generated web page through a web browser, which contains a malicious script that was injected using the untrusted data. [5] Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. [6] This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself, possibly taking over the victim's machine (sometimes referred to as \"drive-by hacking\"). There are three main kinds of XSS: Type 1: Reflected XSS (also called \"Non-Persistent\") The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (also called \"Persistent\") The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. The following example shows a script that returns a parameter value in the response. The parameter value is sent to the script using a GET request, and then retured in the response embedded in the HTML. An attacker might leverage the attack like so: In this case, the JavaScript code will be executed by the browser (The >\"'> part is irrelevant here).",
        "issueName": "Cross-Site Scripting",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attCrossSiteScripting",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "116",
                "type": "cwe"
            },
            {
                "id": "79",
                "type": "cwe"
            },
            {
                "id": "6784",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "High",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 7.5,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-8895801990045380352",
                        "_raw_entity": {
                            "ref": "1733046179033861888"
                        },
                        "_raw_url": {
                            "ref": "-1930822699"
                        },
                        "entity_name": null,
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/",
                        "url_name": "https://demo.testfire.net/"
                    },
                    {
                        "_raw_@id": "-4273490445057251840",
                        "_raw_entity": {
                            "ref": "2822766115314697472"
                        },
                        "_raw_url": {
                            "ref": "329275775"
                        },
                        "entity_name": "transaction.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/transaction.jsp",
                        "url_name": "https://demo.testfire.net/bank/transaction.jsp"
                    },
                    {
                        "_raw_@id": "-4238515218783411456",
                        "_raw_entity": {
                            "ref": "-3517474992796452096"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "queryxpath.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/queryxpath.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "-4069129211817790720",
                        "_raw_entity": {
                            "ref": "4927821206135434240"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "main.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    },
                    {
                        "_raw_@id": "-6953016427482516992",
                        "_raw_entity": {
                            "ref": "-2166482836966180864"
                        },
                        "_raw_url": {
                            "ref": "597790375"
                        },
                        "entity_name": "transfer.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/transfer.jsp",
                        "url_name": "https://demo.testfire.net/bank/transfer.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attHttpsToHttp",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": null,
                            "indentText": [
                                "- Username",
                                "- Password",
                                "- Social Security number",
                                "- Credit Card number",
                                "- Driver's License number",
                                "- e-mail address",
                                "- Phone number",
                                "- Zip code"
                            ],
                            "text": [
                                "Make sure that sensitive information such as:",
                                "is always sent encrypted to the server."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "Make sure that sensitive information such as:",
                    "is always sent encrypted to the server."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_52721",
                    "name": "Enforce the use of HTTPS when sending sensitive information",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Enforce the use of HTTPS when sending sensitive information"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attHttpsToHttp",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_2"
                        },
                        "causes": {
                            "cause": "Cause_7"
                        },
                        "cwe": {
                            "link": {
                                "#text": "311",
                                "@id": "CWE-311",
                                "@target": "http://cwe.mitre.org/data/definitions/311.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attHttpsToHttp",
                                "@type": "General"
                            }
                        },
                        "name": "Encryption Not Enforced",
                        "references": {
                            "link": [
                                {
                                    "#text": "Financial Privacy: The Gramm-Leach Bliley Act",
                                    "@target": "http://business.ftc.gov/privacy-and-security/gramm-leach-bliley-act/"
                                },
                                {
                                    "#text": "Health Insurance Portability and Accountability Act (HIPAA)",
                                    "@target": "http://www.hhs.gov/ocr/hipaa/"
                                },
                                {
                                    "#text": "Sarbanes-Oxley Act",
                                    "@target": "http://www.sec.gov/spotlight/sarbanes-oxley.htm"
                                },
                                {
                                    "#text": "California SB1386",
                                    "@target": "http://www.leginfo.ca.gov/pub/01-02/bill/sen/sb_1351-1400/sb_1386_bill_20020926_chaptered.html"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "sensitiveNotOverSSL"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null
                            ],
                            "text": [
                                "During the application test, it was detected that the site uses an encrypted connection to protect sensitive information.",
                                "However, it was possible to receive these resources using HTTP, which means that sensitive information may be sent unencrypted to the server and/or back to the user.",
                                "Any information sent to the server as clear text, may be stolen and used later for identity theft or user impersonation.",
                                "In addition, several privacy regulations state that sensitive information such as user credentials will always be sent encrypted to the web site.",
                                "It is recommended to enforce the use of an encrypted connection (e.g. SSL), and not allow access to sensitive information using unencrypted HTTP."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52586",
                                "@id": "52586",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52586"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Sensitive input fields such as usernames, password and credit card numbers are passed unencrypted",
                        "@id": "Cause_7"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Sensitive input fields such as usernames, password and credit card numbers are passed unencrypted"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It may be possible to steal sensitive data such as credit card numbers, social security numbers etc. that are sent unencrypted"
                ]
            },
            {
                "key": "issue_id",
                "value": "attHttpsToHttp"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "311"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attHttpsToHttp"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_52721"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "sensitiveNotOverSSL"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "sensitiveDataNotSSL"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "During the application test, it was detected that the site uses an encrypted connection to protect sensitive information. However, it was possible to receive these resources using HTTP, which means that sensitive information may be sent unencrypted to the server and/or back to the user. Any information sent to the server as clear text, may be stolen and used later for identity theft or user impersonation. In addition, several privacy regulations state that sensitive information such as user credentials will always be sent encrypted to the web site. It is recommended to enforce the use of an encrypted connection (e.g. SSL), and not allow access to sensitive information using unencrypted HTTP.",
        "issueName": "Encryption Not Enforced",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attHttpsToHttp",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "311",
                "type": "cwe"
            },
            {
                "id": "52586",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "7410384942478876928",
                        "_raw_entity": {
                            "ref": "-4344886403399488000"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "listAccounts",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "8241353586946276864",
                        "_raw_entity": {
                            "ref": "4751107591038376192"
                        },
                        "_raw_url": {
                            "ref": "345716453"
                        },
                        "entity_name": "toAccount",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/doTransfer",
                        "url_name": "https://demo.testfire.net/bank/doTransfer"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attIntegerOverflow",
                    "asp-dot-net": {
                        "fixRecommendation": {
                            "@type": "ASP.NET",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "indentText": "debug=\"false\"",
                            "link": {
                                "#text": "http://support.microsoft.com/default.aspx?scid=kb;en-us;815157",
                                "@target": "http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"
                            },
                            "text": [
                                "In order to disable debugging in ASP.NET, edit your web.config file to contain the following:",
                                "<compilation",
                                "/>",
                                "For more information, see \"HOW TO: Disable Debugging for ASP.NET Applications\" in:",
                                "You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.",
                                "To make sure that all the required parameters exist in a request, use the \"RequiredFieldValidator\" validation control. This control ensures that the user does not skip an entry in the web form.",
                                "To make sure user input contains only valid values, you can use one of the following validation controls:",
                                "[1] \"RangeValidator\": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.",
                                "[2] \"RegularExpressionValidator\": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.",
                                "Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.",
                                "There are two ways to check for user input validity:",
                                "1. Test for a general error state:",
                                "In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.",
                                "2. Test for the error state of individual controls:",
                                "Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control."
                            ]
                        }
                    },
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": [
                                "[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.",
                                "[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.",
                                "[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.",
                                "[4] Verify that the data belongs to the set offered to the client.",
                                "[5] Do not output debugging error messages and exceptions in a production environment."
                            ]
                        }
                    },
                    "j2ee": {
                        "fixRecommendation": {
                            "@type": "J2EE",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// Java example to validate required fields\n  public Class Validator {\n      ...\n      public static boolean validateRequired(String value) {\n          boolean isFieldValid = false;\n          if (value != null && value.trim().length() > 0) {\n              isFieldValid = true;\n          }\n          return isFieldValid;\n      }\n      ...\n  }\n  ...\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateRequired(fieldValue)) {\n      // fieldValue is valid, continue processing request\n      ...\n  }",
                                "// Java example to validate that a field is an int number\n  public Class Validator {\n      ...\n      public static boolean validateInt(String value) {\n          boolean isFieldValid = false;\n          try {\n              Integer.parseInt(value);\n              isFieldValid = true;\n          } catch (Exception e) {\n              isFieldValid = false;\n          }\n          return isFieldValid;\n      }\n      ...\n  }\n  ...\n  // check if the HTTP request parameter is of type int\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateInt(fieldValue)) {\n      // fieldValue is valid, continue processing request\n      ...\n  }",
                                "// Example to convert the HTTP request parameter to a primitive wrapper data type\n  // and store this value in a request attribute for further processing\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateInt(fieldValue)) {\n      // convert fieldValue to an Integer\n      Integer integerValue = Integer.getInteger(fieldValue);\n      // store integerValue in a request attribute\n      request.setAttribute(\"fieldName\", integerValue);\n  }\n  ...\n  // Use the request attribute for further processing\n  Integer integerValue = (Integer)request.getAttribute(\"fieldName\");\n  ...",
                                "// Example to validate the field length\n  public Class Validator {\n      ...\n      public static boolean validateLength(String value, int minLength, int maxLength) {\n          String validatedValue = value;\n          if (!validateRequired(value)) {\n              validatedValue = \"\";\n          }\n          return (validatedValue.length() >= minLength &&\n                      validatedValue.length() <= maxLength);\n      }\n      ...\n  }\n  ...\n  String userName = request.getParameter(\"userName\");\n  if (Validator.validateRequired(userName)) {\n      if (Validator.validateLength(userName, 8, 20)) {\n          // userName is valid, continue further processing\n          ...\n      }\n  }",
                                "// Example to validate the field range\n  public Class Validator {\n      ...\n      public static boolean validateRange(int value, int min, int max) {\n          return (value >= min && value <= max);\n      }\n      ...\n  }\n  ...\n  String fieldValue = request.getParameter(\"numberOfChoices\");\n  if (Validator.validateRequired(fieldValue)) {\n      if (Validator.validateInt(fieldValue)) {\n          int numberOfChoices = Integer.parseInt(fieldValue);\n          if (Validator.validateRange(numberOfChoices, 10, 20)) {\n              // numberOfChoices is valid, continue processing request\n              ...\n          }\n      }\n  }",
                                "// Example to validate user selection against a list of options\n  public Class Validator {\n      ...\n      public static boolean validateOption(Object[] options, Object value) {\n          boolean isValidValue = false;\n          try {\n              List list = Arrays.asList(options);\n              if (list != null) {\n                  isValidValue = list.contains(value);\n              }\n          } catch (Exception e) {\n          }\n          return isValidValue;\n      }\n      ...\n  }\n  ...\n  // Allowed options\n  String[] options = {\"option1\", \"option2\", \"option3\");\n  // Verify that the user selection is one of the allowed options\n  String userSelection = request.getParameter(\"userSelection\");\n  if (Validator.validateOption(options, userSelection)) {\n      // valid user selection, continue processing request\n      ...\n  }",
                                "// Example to validate that a given value matches a specified pattern\n  // using the Apache regular expression package\n  import org.apache.regexp.RE;\n  import org.apache.regexp.RESyntaxException;\n  public Class Validator {\n      ...\n      public static boolean matchPattern(String value, String expression) {\n          boolean match = false;\n          if (validateRequired(expression)) {\n               RE r = new RE(expression);\n               match = r.match(value);             \n          }\n          return match;\n      }\n      ...\n  }\n  ...\n  // Verify that the userName request parameter is alpha-numeric\n  String userName = request.getParameter(\"userName\");\n  if (Validator.matchPattern(userName, \"^[a-zA-Z0-9]*$\")) {\n      // userName is valid, continue processing request\n      ...\n  }",
                                "// Example to validate that a given value matches a specified pattern\n  // using the Java 1.4 regular expression package\n  import java.util.regex.Pattern;\n  import java.util.regexe.Matcher;\n  public Class Validator {\n      ...\n      public static boolean matchPattern(String value, String expression) {\n          boolean match = false;\n          if (validateRequired(expression)) {\n              match = Pattern.matches(expression, value);\n          }\n          return match;\n      }\n      ...\n  }",
                                "// Example to validate a required cookie value\n  // First retrieve all available cookies submitted in the HTTP request\n  Cookie[] cookies = request.getCookies();\n  if (cookies != null) {\n      // find the \"user\" cookie\n      for (int i=0; i<cookies.length; ++i) {\n          if (cookies[i].getName().equals(\"user\")) {\n              // validate the cookie value\n              if (Validator.validateRequired(cookies[i].getValue()) {\n                  // valid cookie value, continue processing request\n                  ...\n              }\n          }    \n      }\n  }",
                                "// Example to filter sensitive data to prevent cross-site scripting\n  public Class Validator {\n      ...\n      public static String filter(String value) {\n          if (value == null) {\n              return null;\n          }        \n          StringBuffer result = new StringBuffer(value.length());\n          for (int i=0; i<value.length(); ++i) {\n              switch (value.charAt(i)) {\n              case '<':\n                  result.append(\"&lt;\");\n                  break;\n              case '>': \n                  result.append(\"&gt;\");\n                  break;\n              case '\"': \n                  result.append(\"&quot;\");\n                  break;\n              case '\\'': \n                  result.append(\"&#39;\");\n                  break;\n              case '%': \n                  result.append(\"&#37;\");\n                  break;\n              case ';': \n                  result.append(\"&#59;\");\n                  break;\n              case '(': \n                  result.append(\"&#40;\");\n                  break;\n              case ')': \n                  result.append(\"&#41;\");\n                  break;\n              case '&': \n                  result.append(\"&amp;\");\n                  break;\n              case '+':\n                  result.append(\"&#43;\");\n                  break;\n              default:\n                  result.append(value.charAt(i));\n                  break;\n          }        \n          return result;\n      }\n      ...\n  }\n  ...\n  // Filter the HTTP response using Validator.filter\n  PrintWriter out = response.getWriter();\n  // set output response\n  out.write(Validator.filter(response));\n  out.close();",
                                "// Example to filter all sensitive characters in the HTTP response using a Java Filter.\n  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!\n  public class SensitiveCharsFilter implements Filter {\n      ...\n      public void doFilter(ServletRequest request,\n                      ServletResponse response,\n                      FilterChain chain)\n              throws IOException, ServletException {\n  \n          PrintWriter out = response.getWriter();\n          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);\n          chain.doFilter(request, wrapper);\n  \n          CharArrayWriter caw = new CharArrayWriter();\n          caw.write(Validator.filter(wrapper.toString()));\n          \n          response.setContentType(\"text/html\");\n          response.setContentLength(caw.toString().length());\n          out.write(caw.toString());\n          out.close();\n      }\n      ...\n      public class CharResponseWrapper extends HttpServletResponseWrapper {\n          private CharArrayWriter output;\n  \n          public String toString() {\n              return output.toString();\n          }\n      \n          public CharResponseWrapper(HttpServletResponse response){\n              super(response);\n              output = new CharArrayWriter();\n          }\n          \n          public PrintWriter getWriter(){\n              return new PrintWriter(output);\n          }\n      }\n  } \n  \n  }",
                                "// Example to secure a cookie, i.e. instruct the browser to\n  // send the cookie using a secure protocol\n  Cookie cookie = new Cookie(\"user\", \"sensitive\");\n  cookie.setSecure(true);\n  response.addCookie(cookie);",
                                "<form-validation>\n      <global>\n          ...\n          <validator name=\"required\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateRequired\"\n              msg=\"errors.required\">\n          </validator>\n          <validator name=\"mask\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateMask\"\n              msg=\"errors.invalid\">\n          </validator>\n          ...\n      </global>\n      <formset>\n          <form name=\"loginForm\">\n              <!-- userName is required and is alpha-numeric case insensitive -->\n              <field property=\"userName\" depends=\"required,mask\">\n                  <!-- message resource key to display if validation fails -->\n                  <msg name=\"mask\" key=\"login.userName.maskmsg\"/>\n                  <arg0 key=\"login.userName.displayname\"/>\n                  <var>\n                      <var-name>mask</var-name>\n                      <var-value>^[a-zA-Z0-9]*$</var-value>\n                  </var>\n              </field>\n          ...\n          </form>\n          ...\n      </formset>\n  </form-validation>",
                                "<%@ taglib uri=\"http://java.sun.com/jsf/html\" prefix=\"h\" %>\n  <%@ taglib uri=\"http://java.sun.com/jsf/core\" prefix=\"f\" %>\n  ...\n  <jsp:useBean id=\"UserBean\"\n      class=\"myApplication.UserBean\" scope=\"session\" />\n  <f:use_faces>\n    <h:form formName=\"loginForm\" >\n      <h:input_text id=\"userName\" size=\"20\" modelReference=\"UserBean.userName\">\n          <f:validate_required/>\n          <f:validate_length minimum=\"8\" maximum=\"20\"/>    \n      </h:input_text>\n      <!-- display errors if present -->\n      <h:output_errors id=\"loginErrors\" clientId=\"userName\"/>\n      <h:command_button id=\"submit\" label=\"Submit\" commandName=\"submit\" /><p>\n    </h:form>\n  </f:use_faces>",
                                "// Example: ErrorKeys defining the following error keys:    \n      //    - ERROR_USERNAME_REQUIRED\n      //    - ERROR_USERNAME_ALPHANUMERIC\n      //    - ERROR_USERNAME_DUPLICATE\n      //    - ERROR_USERNAME_INVALID\n      //    ...\n      public Class ErrorKeys {\n          public static final String ERROR_USERNAME_REQUIRED = \"error.username.required\";\n          public static final String ERROR_USERNAME_ALPHANUMERIC = \"error.username.alphanumeric\";\n          public static final String ERROR_USERNAME_DUPLICATE = \"error.username.duplicate\";\n          public static final String ERROR_USERNAME_INVALID = \"error.username.invalid\";\n          ...\n      }",
                                "// Example: Error encapsulates an error key.\n      // Error is serializable to support code executing in multiple JVMs.\n      public Class Error implements Serializable {\n          \n          // Constructor given a specified error key\n          public Error(String key) {\n              this(key, null);\n          }\n          \n          // Constructor given a specified error key and array of placeholder objects\n          public Error(String key, Object[] values) {\n              this.key = key;\n              this.values = values;\n          }\n          \n          // Returns the error key\n          public String getKey() {\n              return this.key;\n          }\n          \n          // Returns the placeholder values\n          public Object[] getValues() {\n              return this.values;\n          }\n          \n          private String key = null;\n          private Object[] values = null;\n      }",
                                "// Example: Errors encapsulates the Error objects being reported to the presentation layer.\n      // Errors are stored in a HashMap where the key is the bean property name and value is an\n      // ArrayList of Error objects.\n      public Class Errors implements Serializable {\n      \n          // Adds an Error object to the Collection of errors for the specified bean property.\n          public void addError(String property, Error error) {\n              ArrayList propertyErrors = (ArrayList)errors.get(property);\n              if (propertyErrors == null) {\n                  propertyErrors = new ArrayList();\n                  errors.put(property, propertyErrors);\n              }\n              propertyErrors.put(error);            \n          }\n          \n          // Returns true if there are any errors\n          public boolean hasErrors() {\n              return (errors.size > 0);\n          }\n          \n          // Returns the Errors for the specified property\n          public ArrayList getErrors(String property) {\n              return (ArrayList)errors.get(property);\n          }\n  \n          private HashMap errors = new HashMap();\n      }",
                                "// Example to process validation errors of the \"user_name\" field.\n  Errors errors = new Errors();\n  String userName = request.getParameter(\"user_name\");\n  // (a) Required validation rule\n  if (!Validator.validateRequired(userName)) {\n      errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));\n  } // (b) Alpha-numeric validation rule\n  else if (!Validator.matchPattern(userName, \"^[a-zA-Z0-9]*$\")) {\n      errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));\n  }\n  else\n  {\n      // (c) Duplicate check validation rule\n      // We assume that there is an existing UserValidationEJB session bean that implements\n      // a checkIfDuplicate() method to verify if the user already exists in the database.\n      try {\n          ...        \n          if (UserValidationEJB.checkIfDuplicate(userName)) {\n              errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));\n          }\n      } catch (RemoteException e) {\n          // log the error\n          logger.error(\"Could not validate user for specified userName: \" + userName);\n          errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);\n      }\n  }\n  // set the errors object in a request attribute called \"errors\"\n  request.setAttribute(\"errors\", errors);\n  ...",
                                "// Example to forward to the userInput.jsp following user validation errors\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/user/userInput.jsp\");\n  if (rd != null) {\n      rd.forward(request, response);\n  }",
                                "// Example to return a HTTP error code\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/user/userInput.jsp\");\n  if (rd == null) {\n      // messages is a resource bundle with all message keys and values\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));\n  }",
                                "<%@ page errorPage=\"/errors/userValidation.jsp\" %>",
                                "<%@ page isErrorPage=\"true\" %>",
                                "################################################\n  # ErrorMessages.properties\n  ################################################\n  # required user name error message\n  error.username.required=User name field is required\n  \n  # invalid user name format\n  error.username.alphanumeric=User name must be alphanumeric\n  \n  # duplicate user name error message\n  error.username.duplicate=User name {0} already exists, please choose another one\n  \n  ...",
                                "// Example to show how to format a message using placeholder parameters\n  String pattern = \"User name {0} already exists, please choose another one\";\n  String userName = request.getParameter(\"user_name\");\n  Object[] args = new Object[1];\n  args[0] = userName;\n  String message = MessageFormat.format(pattern, args);",
                                "// Example to render an error message from a localized ErrorMessages resource (properties file)\n  // Utility class to retrieve locale-specific error messages\n  public Class ErrorMessageResource {\n      \n      // Returns the error message for the specified error key in the environment locale\n      public String getErrorMessage(String errorKey) {\n          return getErrorMessage(errorKey, defaultLocale);\n      }\n      \n      // Returns the error message for the specified error key in the specified locale\n      public String getErrorMessage(String errorKey, Locale locale) {\n          return getErrorMessage(errorKey, null, locale);\n      }\n      \n      // Returns a formatted error message for the specified error key in the specified locale\n      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    \n          // Get localized ErrorMessageResource\n          ResourceBundle errorMessageResource = ResourceBundle.getBundle(\"ErrorMessages\", locale);\n          // Get localized error message\n          String errorMessage = errorMessageResource.getString(errorKey);\n          if (args != null) {\n              // Format the message using the specified placeholders args\n              return MessageFormat.format(errorMessage, args);\n          } else {\n              return errorMessage;\n          }\n      }\n      \n      // default environment locale\n      private Locale defaultLocale = Locale.getDefaultLocale();\n  }\n  ...\n  // Get the user's locale\n  Locale userLocale = request.getLocale();\n  // Check if there were any validation errors\n  Errors errors = (Errors)request.getAttribute(\"errors\");\n  if (errors != null && errors.hasErrors()) {\n      // iterate through errors and output error messages corresponding to the \"user_name\" property\n      ArrayList userNameErrors = errors.getErrors(\"user_name\");\n      ListIterator iterator = userNameErrors.iterator();\n      while (iterator.hasNext()) {\n          // Get the next error object\n          Error error = (Error)iterator.next();\n          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);\n          output.write(errorMessage + \"\\r\\n\");\n      }\n  }",
                                "<!-- Mapping of HTTP error codes and application exceptions to error pages -->\n  <error-page>\n    <exception-type>UserValidationException</exception-type>\n    <location>/errors/validationError.html</error-page>\n  </error-page>\n  <error-page>\n    <error-code>500</exception-type>\n    <location>/errors/internalError.html</error-page>\n  </error-page>\n  <error-page>\n  ...\n  </error-page>\n  ...",
                                "<form-validation>\n      <global>\n          ...\n          <validator name=\"required\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateRequired\"\n              msg=\"errors.required\">\n          </validator>\n          <validator name=\"mask\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateMask\"\n              msg=\"errors.invalid\">\n          </validator>\n          ...\n      </global>\n      <formset>\n          <form name=\"loginForm\">\n              <!-- userName is required and is alpha-numeric case insensitive -->\n              <field property=\"userName\" depends=\"required,mask\">\n                  <!-- message resource key to display if validation fails -->\n                  <msg name=\"mask\" key=\"login.userName.maskmsg\"/>\n                  <arg0 key=\"login.userName.displayname\"/>\n                  <var>\n                      <var-name>mask</var-name>\n                      <var-value>^[a-zA-Z0-9]*$</var-value>\n                  </var>\n              </field>\n          ...\n          </form>\n          ...\n      </formset>\n  </form-validation>",
                                "<%@ page language=\"java\" %>\n  <%@ taglib uri=\"/WEB-INF/struts-html.tld\" prefix=\"html\" %>\n  <%@ taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n  <html:html>\n  <head>\n  <body>\n      <html:form action=\"/logon.do\">    \n      <table border=\"0\" width=\"100%\">\n      <tr>\n          <th align=\"right\">\n              <html:errors property=\"username\"/>\n              <bean:message key=\"prompt.username\"/>\n          </th>\n          <td align=\"left\">\n              <html:text property=\"username\" size=\"16\"/>\n          </td>\n      </tr>\n      <tr>\n      <td align=\"right\">\n          <html:submit><bean:message key=\"button.submit\"/></html:submit>\n      </td>\n      <td align=\"right\">\n          <html:reset><bean:message key=\"button.reset\"/></html:reset>\n      </td>\n      </tr>\n      </table>\n      </html:form>\n  </body>\n  </html:html>",
                                "<%@ taglib uri=\"http://java.sun.com/jsf/html\" prefix=\"h\" %>\n  <%@ taglib uri=\"http://java.sun.com/jsf/core\" prefix=\"f\" %>\n  ...\n  <jsp:useBean id=\"UserBean\"\n      class=\"myApplication.UserBean\" scope=\"session\" />\n  <f:use_faces>\n    <h:form formName=\"loginForm\" >\n      <h:input_text id=\"userName\" size=\"20\" modelReference=\"UserBean.userName\">\n          <f:validate_required/>\n          <f:validate_length minimum=\"8\" maximum=\"20\"/>    \n      </h:input_text>\n      <!-- display errors if present -->\n      <h:output_errors id=\"loginErrors\" clientId=\"userName\"/>\n      <h:command_button id=\"submit\" label=\"Submit\" commandName=\"submit\" /><p>\n    </h:form>\n  </f:use_faces>"
                            ],
                            "link": [
                                {
                                    "#text": "http://java.sun.com/j2se/1.3/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.3/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.4/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.4/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/products/servlet/2.3/javadoc/",
                                    "@target": "http://java.sun.com/products/servlet/2.3/javadoc/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/regexp/",
                                    "@target": "http://jakarta.apache.org/regexp/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/commons/validator/",
                                    "@target": "http://jakarta.apache.org/commons/validator/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2ee/javaserverfaces/",
                                    "@target": "http://java.sun.com/j2ee/javaserverfaces/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.3/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.3/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.4/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.4/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/products/servlet/2.3/javadoc/",
                                    "@target": "http://java.sun.com/products/servlet/2.3/javadoc/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/regexp/",
                                    "@target": "http://jakarta.apache.org/regexp/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/commons/validator/",
                                    "@target": "http://jakarta.apache.org/commons/validator/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2ee/javaserverfaces/",
                                    "@target": "http://java.sun.com/j2ee/javaserverfaces/"
                                }
                            ],
                            "text": [
                                "** Input Data Validation:",
                                "While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.",
                                "A good design usually requires the web application framework to provide server-side utility routines to validate the following:",
                                "[1] Required field",
                                "[2] Field data type (all HTTP request parameters are Strings by default)",
                                "[3] Field length",
                                "[4] Field range",
                                "[5] Field options",
                                "[6] Field pattern",
                                "[7] Cookie values",
                                "[8] HTTP Response",
                                "A good practice is to implement the above routine as static methods in a \"Validator\" utility class.  The following sections describe an example validator class.",
                                "[1] Required field",
                                "Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.",
                                "Example of how to validate required fields:",
                                "[2] Field data type",
                                "In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.",
                                "Example of how to validate a numeric field (type int):",
                                "A good practice is to convert all HTTP request parameters to their respective data types.  For example, store the \"integerValue\" of a request parameter in a request attribute and use it as shown in the following example:",
                                "The primary Java data types that the application should handle:",
                                "- Byte",
                                "- Short",
                                "- Integer",
                                "- Long",
                                "- Float",
                                "- Double",
                                "- Date",
                                "[3] Field length",
                                "Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.",
                                "Example to validate that the length of the userName field is between 8 and 20 characters:",
                                "[4] Field range",
                                "Always ensure that the input parameter is within a range as defined by the functional requirements.",
                                "Example to validate that the input numberOfChoices is between 10 and 20:",
                                "[5] Field options",
                                "Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.",
                                "Example to validate the user selection against a list of allowed options:",
                                "[6] Field pattern",
                                "Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:",
                                "^[a-zA-Z0-9]*$",
                                "Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.",
                                "Example to perform regular expression validation:",
                                "Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:",
                                "[7] Cookie value",
                                "Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.",
                                "Example to validate a required cookie value:",
                                "[8] HTTP Response",
                                "[8-1] Filter user input",
                                "To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:",
                                "< > \" ' % ; ) ( & +",
                                "Example to filter a specified string by converting sensitive characters to their corresponding character entities:",
                                "The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.",
                                "Example of using a Servlet Filter to sanitize the response using Validator.filter:",
                                "[8-2] Secure the cookie",
                                "When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.",
                                "Example to secure the \"user\" cookie:",
                                "RECOMMENDED JAVA TOOLS",
                                "The two main Java frameworks for server-side validation are:",
                                "[1] Jakarta Commons Validator (integrated with Struts 1.1)",
                                "The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.",
                                "Struts defines the following basic input validators, but custom validators may also be defined:",
                                "required: succeeds if the field contains any characters other than white space.",
                                "mask: succeeds if the value matches the regular expression given by the mask attribute.",
                                "range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).",
                                "maxLength: succeeds if the field is length is less than or equal to the max attribute.",
                                "minLength: succeeds if the field is length is greater than or equal to the min attribute.",
                                "byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.",
                                "date: succeeds if the value represents a valid date. A date pattern may be provided.",
                                "creditCard: succeeds if the value could be a valid credit card number.",
                                "e-mail: succeeds if the value could be a valid e-mail address.",
                                "Example to validate the userName field of a loginForm using Struts Validator:",
                                "[2] JavaServer Faces Technology",
                                "JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.",
                                "The JavaServer Faces API implements the following basic validators, but custom validators may be defined:",
                                "validate_doublerange: registers a DoubleRangeValidator on a component",
                                "validate_length: registers a LengthValidator on a component",
                                "validate_longrange: registers a LongRangeValidator on a component",
                                "validate_required: registers a RequiredValidator on a component",
                                "validate_stringrange: registers a StringRangeValidator on a component",
                                "validator: registers a custom Validator on a component",
                                "The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):",
                                "input_date: accepts a java.util.Date formatted with a java.text.Date instance",
                                "output_date: displays a java.util.Date formatted with a java.text.Date instance",
                                "input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance",
                                "output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance",
                                "input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat",
                                "output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat",
                                "input_text: accepts a text string of one line.",
                                "output_text: displays a text string of one line.",
                                "input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance",
                                "output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance",
                                "input_hidden: allows a page author to include a hidden variable in a page",
                                "input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed",
                                "input_textarea: accepts multiple lines of text",
                                "output_errors: displays error messages for an entire page or error messages associated with a specified client identifier",
                                "output_label: displays a nested component as a label for a specified input field",
                                "output_message: displays a localized message",
                                "Example to validate the userName field of a loginForm using JavaServer Faces:",
                                "REFERENCES",
                                "Java API 1.3 -",
                                "Java API 1.4 -",
                                "Java Servlet API 2.3 -",
                                "Java Regular Expression Package -",
                                "Jakarta Validator -",
                                "JavaServer Faces Technology -",
                                "** Error Handling:",
                                "Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.",
                                "While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:",
                                "[1] Defining Errors",
                                "[2] Reporting Errors",
                                "[3] Rendering Errors",
                                "[4] Error Mapping",
                                "[1] Defining Errors",
                                "Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the \"user_name\" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:",
                                "(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the \"user_name\" field is required;",
                                "(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the \"user_name\" field should be alphanumeric;",
                                "(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the \"user_name\" value is a duplicate in the database;",
                                "(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the \"user_name\" value is invalid;",
                                "A good practice is to define the following framework Java classes which are used to store and report application errors:",
                                "- ErrorKeys: defines all error keys",
                                "- Error: encapsulates an individual error",
                                "- Errors: encapsulates a Collection of errors",
                                "Using the above framework classes, here is an example to process validation errors of the \"user_name\" field:",
                                "[2] Reporting Errors",
                                "There are two ways to report web-tier application errors:",
                                "(a) Servlet Error Mechanism",
                                "(b) JSP Error Mechanism",
                                "[2-a] Servlet Error Mechanism",
                                "A Servlet may report errors by:",
                                "- forwarding to the input JSP (having already stored the errors in a request attribute), OR",
                                "- calling response.sendError with an HTTP error code argument, OR",
                                "- throwing an exception",
                                "It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):",
                                "If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.",
                                "Example to return a HTTP error:",
                                "As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:",
                                "- RuntimeException",
                                "- ServletException",
                                "- IOException",
                                "[2-b] JSP Error Mechanism",
                                "JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:",
                                "Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive as shown below:",
                                "The isErrorPage directive causes the \"exception\" variable to be initialized to the exception object being thrown.",
                                "[3] Rendering Errors",
                                "The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:",
                                "(a) Resource Bundles",
                                "(b) Message Formatting",
                                "[3-a] Resource Bundles",
                                "Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.",
                                "It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:",
                                "Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.",
                                "[3-b] Message Formatting",
                                "The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:",
                                "Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:",
                                "It is recommended to define a custom JSP tag, e.g. displayErrors, to iterate through and render error messages as shown in the above example.",
                                "[4] Error Mapping",
                                "Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages.  It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:",
                                "RECOMMENDED JAVA TOOLS",
                                "The two main Java frameworks for server-side validation are:",
                                "[1] Jakarta Commons Validator (integrated with Struts 1.1)",
                                "The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.",
                                "Example to validate the userName field of a loginForm using Struts Validator:",
                                "The Struts JSP tag library defines the \"errors\" tag that conditionally displays a set of accumulated error messages as shown in the following example:",
                                "[2] JavaServer Faces Technology",
                                "JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.",
                                "The JavaServer Faces API defines the \"output_errors\" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.",
                                "Example to validate the userName field of a loginForm using JavaServer Faces:",
                                "REFERENCES",
                                "Java API 1.3 -",
                                "Java API 1.4 -",
                                "Java Servlet API 2.3 -",
                                "Java Regular Expression Package -",
                                "Jakarta Validator -",
                                "JavaServer Faces Technology -"
                            ]
                        }
                    },
                    "php": {
                        "fixRecommendation": {
                            "@type": "PHP",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// PHP example to validate required fields\n  function validateRequired($input) {\n      ...\n      $pass = false;\n      if (strlen(trim($input))>0){\n          $pass = true;\n      }\n      return $pass;\n      ...\n  }\n  ...\n  if (validateRequired($fieldName)) {\n      // fieldName is valid, continue processing request\n      ...\n  }",
                                "$input = htmlentities($input, ENT_QUOTES, 'UTF-8');",
                                "<?php\n  \n  header('Content-Type: text/html; charset=UTF-8');\n  \n  ?>",
                                "<$php\n  \n      $value = \"some_value\";\n      $time = time()+3600;\n      $path = \"/application/\";\n      $domain = \".example.com\";\n      $secure = 1;\n  \n      setcookie(\"CookieName\", $value, $time, $path, $domain, $secure, TRUE);\n  ?>"
                            ],
                            "link": [
                                {
                                    "#text": "http://msdn2.microsoft.com/en-us/library/ms533046.aspx",
                                    "@target": "http://msdn2.microsoft.com/en-us/library/ms533046.aspx"
                                },
                                {
                                    "#text": "http://phpsec.org/",
                                    "@target": "http://phpsec.org/"
                                },
                                {
                                    "#text": "http://shiflett.org/",
                                    "@target": "http://shiflett.org/"
                                }
                            ],
                            "text": [
                                "** Input Data Validation:",
                                "While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.",
                                "A good design usually requires the web application framework to provide server-side utility routines to validate the following:",
                                "[1] Required field",
                                "[2] Field data type (all HTTP request parameters are Strings by default)",
                                "[3] Field length",
                                "[4] Field range",
                                "[5] Field options",
                                "[6] Field pattern",
                                "[7] Cookie values",
                                "[8] HTTP Response",
                                "A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.",
                                "[1] Required field",
                                "Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.",
                                "Example of how to validate required fields:",
                                "[2] Field data type",
                                "In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.",
                                "[3] Field length",
                                "Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.",
                                "[4] Field range",
                                "Always ensure that the input parameter is within a range as defined by the functional requirements.",
                                "[5] Field options",
                                "Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.",
                                "[6] Field pattern",
                                "Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:",
                                "^[a-zA-Z0-9]+$",
                                "[7] Cookie value",
                                "The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.",
                                "[8] HTTP Response",
                                "[8-1] Filter user input",
                                "To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:",
                                "< > \" ' % ; ) ( & +",
                                "PHP includes some automatic sanitization utility functions, such as htmlentities():",
                                "In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:",
                                "[8-2] Secure the cookie",
                                "When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.",
                                "You can use the following code example, for securing the cookie:",
                                "In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers).",
                                "The HttpOnly flag was Added in PHP 5.2.0.",
                                "REFERENCES",
                                "[1] Mitigating Cross-site Scripting With HTTP-only Cookies:",
                                "[2] PHP Security Consortium:",
                                "[3] PHP & Web Application Security Blog (Chris Shiflett):"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.",
                    "[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.",
                    "[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.",
                    "[4] Verify that the data belongs to the set offered to the client.",
                    "[5] Do not output debugging error messages and exceptions in a production environment."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_50300",
                    "name": "Verify that parameter values are in their expected ranges and types. Do not output debugging error messages and exceptions",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Verify that parameter values are in their expected ranges and types. Do not output debugging error messages and exceptions"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attIntegerOverflow",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": [
                                "Cause_9",
                                "Cause_10"
                            ]
                        },
                        "cwe": {
                            "link": {
                                "#text": "550",
                                "@id": "CWE-550",
                                "@target": "http://cwe.mitre.org/data/definitions/550.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": [
                                {
                                    "#text": "attIntegerOverflow",
                                    "@type": "General"
                                },
                                {
                                    "#text": "attIntegerOverflow",
                                    "@type": "ASP.NET"
                                },
                                {
                                    "#text": "attIntegerOverflow",
                                    "@type": "J2EE"
                                },
                                {
                                    "#text": "attIntegerOverflow",
                                    "@type": "PHP"
                                }
                            ]
                        },
                        "name": "Integer Overflow",
                        "references": {
                            "link": [
                                {
                                    "#text": "An example for using apostrophe to hack a site can be found in \"How I hacked PacketStorm (by Rain Forest Puppy), RFP's site\"",
                                    "@target": "http://archives.neohapsis.com/archives/win2ksecadvice/2000-q1/0085.html"
                                },
                                {
                                    "#text": "\"Web Application Disassembly with ODBC Error Messages\" (By David Litchfield)",
                                    "@target": "http://www.cgisecurity.com/lib/webappdis.doc"
                                },
                                {
                                    "#text": "CERT Advisory (CA-1997-25): Sanitizing user-supplied data in CGI scripts",
                                    "@target": "http://www.cert.org/advisories/CA-1997-25.html"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "debugErrorInformation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "If an attacker probes the application by forging a request that contains parameters or parameter values other than the ones expected by the application (examples are listed below), the application may enter an undefined state that makes it vulnerable to attack. The attacker can gain useful information from the application's response to this request, which information may be exploited to locate application weaknesses.",
                                "For example, if the parameter field should be an apostrophe-quoted string (e.g. in an ASP script or SQL query), the injected apostrophe symbol will prematurely terminate the string stream, thus changing the normal flow/syntax of the script.",
                                "Another cause of vital information being revealed in error messages, is when the scripting engine, web server, or database are misconfigured.",
                                "Here are some different variants:",
                                "[1] Remove parameter",
                                "[2] Remove parameter value",
                                "[3] Set parameter value to null",
                                "[4] Set parameter value to a numeric overflow (+/- 99999999)",
                                "[5] Set parameter value to hazardous characters, such as ' \" \\' \\\" ) ;",
                                "[6] Append some string to a numeric parameter value",
                                "[7] Append \".\" (dot) or \"[]\" (angle brackets) to the parameter name"
                            ]
                        },
                        "threatClassification": {
                            "name": "Integer Overflows",
                            "reference": "http://projects.webappsec.org/Integer-Overflows"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Proper bounds checking were not performed on incoming parameter values",
                        "@id": "Cause_9"
                    },
                    {
                        "#text": "No validation was done in order to make sure that user input matches the data type expected",
                        "@id": "Cause_10"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Proper bounds checking were not performed on incoming parameter values",
                    "No validation was done in order to make sure that user input matches the data type expected"
                ]
            },
            {
                "key": "threat_class",
                "value": "Integer Overflows"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Integer-Overflows"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive debugging information"
                ]
            },
            {
                "key": "issue_id",
                "value": "attIntegerOverflow"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "550"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attIntegerOverflow"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_50300"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catIntegerOverflow"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "debugErrorInformation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": [
                        "boundsCheckingOnParamValues",
                        "incorrectDataType"
                    ]
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "If an attacker probes the application by forging a request that contains parameters or parameter values other than the ones expected by the application (examples are listed below), the application may enter an undefined state that makes it vulnerable to attack. The attacker can gain useful information from the application's response to this request, which information may be exploited to locate application weaknesses. For example, if the parameter field should be an apostrophe-quoted string (e.g. in an ASP script or SQL query), the injected apostrophe symbol will prematurely terminate the string stream, thus changing the normal flow/syntax of the script. Another cause of vital information being revealed in error messages, is when the scripting engine, web server, or database are misconfigured. Here are some different variants: [1] Remove parameter [2] Remove parameter value [3] Set parameter value to null [4] Set parameter value to a numeric overflow (+/- 99999999) [5] Set parameter value to hazardous characters, such as ' \" \\' \\\" ) ; [6] Append some string to a numeric parameter value [7] Append \".\" (dot) or \"[]\" (angle brackets) to the parameter name",
        "issueName": "Integer Overflow",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attIntegerOverflow",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "550",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "4884306166562680320",
                        "_raw_entity": {
                            "ref": "7085172262987230976"
                        },
                        "_raw_url": {
                            "ref": "1719736957"
                        },
                        "entity_name": "!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==type...",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/swagger/swagger-ui-bundle.js",
                        "url_name": "https://demo.testfire.net/swagger/swagger-ui-bundle.js"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attJSCookie",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": [
                                "[1] Avoid placing business/security logic at the client side.",
                                "[2] Find and remove insecure client-side Javascript code which may pose a security threat to the site."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "[1] Avoid placing business/security logic at the client side.",
                    "[2] Find and remove insecure client-side Javascript code which may pose a security threat to the site."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_50780",
                    "name": "Remove business and security logic from the client side",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Remove business and security logic from the client side"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attJSCookie",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_11"
                        },
                        "cwe": {
                            "link": {
                                "#text": "602",
                                "@id": "CWE-602",
                                "@target": "http://cwe.mitre.org/data/definitions/602.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attJSCookie",
                                "@type": "General"
                            }
                        },
                        "name": "Client-Side (JavaScript) Cookie References",
                        "references": {
                            "link": {
                                "#text": "WASC Threat Classification: Information Leakage",
                                "@target": "http://www.webappsec.org/projects/threat/classes/information_leakage.shtml"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "genericWorstCaseJSCookie"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null
                            ],
                            "text": [
                                "A cookie is a piece of information usually created by the Web server and stored in the Web browser.",
                                "The cookie contains information used by web applications mainly (but not only) to identify users and maintain their state.",
                                "AppScan detected that the JavaScript code at the client side is used to manipulate (either create or modify) the site's cookies.",
                                "It is possible for an attacker to view this code, understand its logic, and use it to compose his own cookies, or modify existing ones, based on this knowledge.",
                                "The damage an attacker may cause depends on how the application uses its cookies, or what information it stores in them.",
                                "Among other things, cookie manipulation may lead to session hijacking or privilege escalation.",
                                "Other vulnerabilities caused by cookie poisoning contain SQL injection and Cross-Site scripting."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52514",
                                "@id": "52514",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52514"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Cookies are created at the client side",
                        "@id": "Cause_11"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Cookies are created at the client side"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "The worst case scenario for this attack depends on the context and role of the cookies that are created at the client side"
                ]
            },
            {
                "key": "issue_id",
                "value": "attJSCookie"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "602"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attJSCookie"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_50780"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "genericWorstCaseJSCookie"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "cookiesCreatedAtClientSide"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "A cookie is a piece of information usually created by the Web server and stored in the Web browser. The cookie contains information used by web applications mainly (but not only) to identify users and maintain their state. AppScan detected that the JavaScript code at the client side is used to manipulate (either create or modify) the site's cookies. It is possible for an attacker to view this code, understand its logic, and use it to compose his own cookies, or modify existing ones, based on this knowledge. The damage an attacker may cause depends on how the application uses its cookies, or what information it stores in them. Among other things, cookie manipulation may lead to session hijacking or privilege escalation. Other vulnerabilities caused by cookie poisoning contain SQL injection and Cross-Site scripting.",
        "issueName": "Client-Side (JavaScript) Cookie References",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attJSCookie",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "602",
                "type": "cwe"
            },
            {
                "id": "52514",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "1453300429529775104",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-5414040837350322688",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "3057626639865310208",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "7022616069586322176",
                        "_raw_entity": {
                            "ref": "-4784596934833808640"
                        },
                        "_raw_url": {
                            "ref": "-372305121"
                        },
                        "entity_name": "name",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/sendFeedback",
                        "url_name": "https://demo.testfire.net/sendFeedback"
                    },
                    {
                        "_raw_@id": "5777788384741464064",
                        "_raw_entity": {
                            "ref": "-4831459913268758016"
                        },
                        "_raw_url": {
                            "ref": "226819437"
                        },
                        "entity_name": "HostName",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/util/serverStatusCheckService.jsp",
                        "url_name": "https://demo.testfire.net/util/serverStatusCheckService.jsp"
                    },
                    {
                        "_raw_@id": "-4710989595529225984",
                        "_raw_entity": {
                            "ref": "-7168640119326840064"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "lang",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attLinkInjection",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "link": {
                                "#text": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet",
                                "@target": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"
                            },
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] Strategy: Libraries or Frameworks",
                                "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                                "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                                "[2] Understand the context in which your data will be used, and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                                "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                                "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                                "[-] HTML body",
                                "[-] Element attributes (such as src=\"XYZ\")",
                                "[-] URIs",
                                "[-] JavaScript sections",
                                "[-] Cascading Style Sheets and style property",
                                "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                                "Consult the XSS Prevention Cheat Sheet",
                                "for more details on the types of encoding and escaping that are needed.",
                                "[3] Strategy: Identify and Reduce Attack Surface",
                                "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                                "[4] Strategy: Output Encoding",
                                "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing the web page encoding. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                                "[5] Strategy: Identify and Reduce Attack Surface",
                                "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                                "[6] Strategy: Input Validation",
                                "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                                "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                                "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed: not only parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so on. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                                "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                                "Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                                "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] Strategy: Libraries or Frameworks",
                    "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                    "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                    "[2] Understand the context in which your data will be used, and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                    "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                    "[-] HTML body",
                    "[-] Element attributes (such as src=\"XYZ\")",
                    "[-] URIs",
                    "[-] JavaScript sections",
                    "[-] Cascading Style Sheets and style property",
                    "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                    "Consult the XSS Prevention Cheat Sheet",
                    "for more details on the types of encoding and escaping that are needed.",
                    "[3] Strategy: Identify and Reduce Attack Surface",
                    "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "[4] Strategy: Output Encoding",
                    "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing the web page encoding. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                    "[5] Strategy: Identify and Reduce Attack Surface",
                    "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "[6] Strategy: Input Validation",
                    "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                    "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed: not only parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so on. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                    "Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                    "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_52000",
                    "name": "Review possible solutions for hazardous character injection",
                    "priority": "High",
                    "priority-id": "2"
                }
            },
            {
                "key": "remediation",
                "value": "Review possible solutions for hazardous character injection"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attLinkInjection",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_0"
                        },
                        "cwe": {
                            "link": {
                                "#text": "74",
                                "@id": "CWE-74",
                                "@target": "http://cwe.mitre.org/data/definitions/74.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attLinkInjection",
                                "@type": "General"
                            }
                        },
                        "name": "Link Injection (facilitates Cross-Site Request Forgery)",
                        "references": {
                            "link": [
                                {
                                    "#text": "OWASP Article",
                                    "@target": "http://www.owasp.org/index.php/Cross-Site_Request_Forgery"
                                },
                                {
                                    "#text": "The Cross-Site Request Forgery FAQ",
                                    "@target": "http://www.cgisecurity.com/csrf-faq.html"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "phishing",
                                "userImpersonation",
                                "siteDefacement"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "<HTML>\n  <BODY>\n          Hello, John Smith.\n  </BODY>\n  </HTML>",
                                "<HTML>\n  <BODY>\n          Hello, <IMG SRC=\"http://www.ANY-SITE.com/ANY-SCRIPT.asp\">.\n  </BODY>\n  </HTML>"
                            ],
                            "text": [
                                "The software constructs all or part of a command, data structure, or record using externally-influenced input, but fails to neutralize elements that could modify how it is parsed or interpreted.",
                                "Link Injection is the modifying of the content of a site by embedding in it a URL to an external site, or to a script in the vulnerable site. After embedding the URL in the vulnerable site, an attacker is able to use it as a platform to launch attacks against other sites, as well as against the vulnerable site itself.",
                                "Some of these possible attacks require the user to be logged in to the site during the attack. By launching these attacks from the vulnerable site itself, the attacker increases the chances of success, because the user is more likely to be logged in.",
                                "The Link Injection vulnerability is a result of insufficient user input sanitization, the input being later returned to the user in the site response. The resulting ability to inject hazardous characters into the response makes it possible for attackers to embed URLs, among other possible content modifications.",
                                "Below is an example for a Link Injection (We will assume that site \"www.vulnerable.com\" has a parameter called \"name\", which is used to greet users).",
                                "The following request:",
                                "HTTP://www.vulnerable.com/greet.asp?name=John Smith",
                                "Will yield the following response:",
                                "However, a malicious user may send the following request:",
                                "HTTP://www.vulnerable.com/greet.asp?name=<IMG SRC=\"http://www.ANY-SITE.com/ANY-SCRIPT.asp\">",
                                "This will return the following response:",
                                "As this example shows, it is possible to cause a user's browser to issue automatic requests to virtually any site the attacker desires. As a result, Link Injection vulnerability can be used to launch several types of attack:",
                                "[-] Cross-Site Request Forgery",
                                "[-] Cross-Site Scripting",
                                "[-] Phishing"
                            ]
                        },
                        "threatClassification": {
                            "name": "Content Spoofing",
                            "reference": "http://projects.webappsec.org/Content-Spoofing"
                        },
                        "xfid": {
                            "link": {
                                "#text": "6784",
                                "@id": "6784",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/6784"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Sanitation of hazardous characters was not performed correctly on user input",
                        "@id": "Cause_0"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Sanitation of hazardous characters was not performed correctly on user input"
                ]
            },
            {
                "key": "threat_class",
                "value": "Content Spoofing"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Content-Spoofing"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc.",
                    "It may be possible to steal or manipulate customer session and cookies, which might be used to impersonate a legitimate user, allowing the hacker to view or alter user records, and to perform transactions as that user",
                    "It is possible to upload, modify or delete web pages, scripts and files on the web server"
                ]
            },
            {
                "key": "issue_id",
                "value": "attLinkInjection"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "2"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:P/A:P",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "74"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attLinkInjection"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_52000"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catContentSpoofing"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "phishing",
                        "userImpersonation",
                        "siteDefacement"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "hazardousCharactersNotSanitized"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "6.4",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The software constructs all or part of a command, data structure, or record using externally-influenced input, but fails to neutralize elements that could modify how it is parsed or interpreted. Link Injection is the modifying of the content of a site by embedding in it a URL to an external site, or to a script in the vulnerable site. After embedding the URL in the vulnerable site, an attacker is able to use it as a platform to launch attacks against other sites, as well as against the vulnerable site itself. Some of these possible attacks require the user to be logged in to the site during the attack. By launching these attacks from the vulnerable site itself, the attacker increases the chances of success, because the user is more likely to be logged in. The Link Injection vulnerability is a result of insufficient user input sanitization, the input being later returned to the user in the site response. The resulting ability to inject hazardous characters into the response makes it possible for attackers to embed URLs, among other possible content modifications. Below is an example for a Link Injection (We will assume that site \"www.vulnerable.com\" has a parameter called \"name\", which is used to greet users). The following request: HTTP://www.vulnerable.com/greet.asp?name=John Smith Will yield the following response: However, a malicious user may send the following request: HTTP://www.vulnerable.com/greet.asp?name=<IMG SRC=\"http://www.ANY-SITE.com/ANY-SCRIPT.asp\"> This will return the following response: As this example shows, it is possible to cause a user's browser to issue automatic requests to virtually any site the attacker desires. As a result, Link Injection vulnerability can be used to launch several types of attack: [-] Cross-Site Request Forgery [-] Cross-Site Scripting [-] Phishing",
        "issueName": "Link Injection (facilitates Cross-Site Request Forgery)",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attLinkInjection",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "116",
                "type": "cwe"
            },
            {
                "id": "74",
                "type": "cwe"
            },
            {
                "id": "6784",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Medium",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 6.4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-4550195450966878720",
                        "_raw_entity": {
                            "ref": "-3211338186064466688"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "http://www.exampledomainnotinuse.org/mybeacon.gif",
                        "entity_type": "Link",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attNXDOMAIN",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": [
                                "It is advised to remove all links to non-existent domains.",
                                "In addition, periodically check the validity of links to external sites."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "It is advised to remove all links to non-existent domains.",
                    "In addition, periodically check the validity of links to external sites."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61745",
                    "name": "Remove the non-existing domain from the web site",
                    "priority": "High",
                    "priority-id": "2"
                }
            },
            {
                "key": "remediation",
                "value": "Remove the non-existing domain from the web site"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attNXDOMAIN",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_1"
                        },
                        "cwe": {
                            "link": {
                                "#text": "601",
                                "@id": "CWE-601",
                                "@target": "http://cwe.mitre.org/data/definitions/601.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attNXDOMAIN",
                                "@type": "General"
                            }
                        },
                        "name": "Link to Non-Existing Domain Found",
                        "references": null,
                        "securityRisks": {
                            "securityRisk": "phishing"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "text": [
                                "The web site contains a link to a non-existent domain.",
                                "An attacker can exploit this scenario to launch a phishing attack by registering the non-existent domain.",
                                "A naive user may browse to that link, thinking that he is within the original site, while in fact he is browsing the attacker site.",
                                "This situation may lead to sensitive information leakage, because the user trusts the malicious site."
                            ]
                        },
                        "threatClassification": {
                            "name": "URL Redirector Abuse",
                            "reference": "http://projects.webappsec.org/URL-Redirector-Abuse"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "The web application contains a link to a non-existing domain",
                        "@id": "Cause_1"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "The web application contains a link to a non-existing domain"
                ]
            },
            {
                "key": "threat_class",
                "value": "URL Redirector Abuse"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/URL-Redirector-Abuse"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "attNXDOMAIN"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "3"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:C/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "601"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attNXDOMAIN"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61745"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catURLRedirectoryAbuse"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "phishing"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "NXDOMAIN"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "8.5",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The web site contains a link to a non-existent domain. An attacker can exploit this scenario to launch a phishing attack by registering the non-existent domain. A naive user may browse to that link, thinking that he is within the original site, while in fact he is browsing the attacker site. This situation may lead to sensitive information leakage, because the user trusts the malicious site.",
        "issueName": "Link to Non-Existing Domain Found",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attNXDOMAIN",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "601",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "High",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 8.5,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-7783431027707645952",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attRedirectInURL",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "link": {
                                "#text": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet",
                                "@target": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"
                            },
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] Strategy: Libraries or Frameworks",
                                "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                                "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                                "[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                                "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                                "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                                "[-] HTML body",
                                "[-] Element attributes (such as src=\"XYZ\")",
                                "[-] URIs",
                                "[-] JavaScript sections",
                                "[-] Cascading Style Sheets and style property",
                                "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                                "Consult the XSS Prevention Cheat Sheet",
                                "for more details on the types of encoding and escaping that are needed.",
                                "[3] Strategy: Identify and Reduce Attack Surface",
                                "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                                "[4] Strategy: Output Encoding",
                                "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                                "[5] Strategy: Identify and Reduce Attack Surface",
                                "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                                "[6] Strategy: Input Validation",
                                "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                                "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                                "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                                "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                                "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                                "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] Strategy: Libraries or Frameworks",
                    "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                    "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                    "[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                    "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                    "[-] HTML body",
                    "[-] Element attributes (such as src=\"XYZ\")",
                    "[-] URIs",
                    "[-] JavaScript sections",
                    "[-] Cascading Style Sheets and style property",
                    "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                    "Consult the XSS Prevention Cheat Sheet",
                    "for more details on the types of encoding and escaping that are needed.",
                    "[3] Strategy: Identify and Reduce Attack Surface",
                    "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "[4] Strategy: Output Encoding",
                    "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                    "[5] Strategy: Identify and Reduce Attack Surface",
                    "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "[6] Strategy: Input Validation",
                    "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                    "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                    "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                    "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_53140",
                    "name": "Disable redirection to external sites based on parameter values",
                    "priority": "High",
                    "priority-id": "2"
                }
            },
            {
                "key": "remediation",
                "value": "Disable redirection to external sites based on parameter values"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attRedirectInURL",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_2"
                        },
                        "cwe": {
                            "link": {
                                "#text": "601",
                                "@id": "CWE-601",
                                "@target": "http://cwe.mitre.org/data/definitions/601.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attRedirectInURL",
                                "@type": "General"
                            }
                        },
                        "name": "Phishing Through URL Redirection",
                        "references": {
                            "link": {
                                "#text": "FTC Consumer Alert - \"How Not to Get Hooked by a 'Phishing' Scam\"",
                                "@target": "http://www.ftc.gov/bcp/edu/pubs/consumer/alerts/alt127.shtm"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "phishing"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
                                "An http parameter was found to hold a URL value and cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials.",
                                "The fact that the server name in the modified link is identical to the original site helps the attacker by giving his phishing attempts a more reliable appearance."
                            ]
                        },
                        "threatClassification": {
                            "name": "URL Redirector Abuse",
                            "reference": "http://projects.webappsec.org/URL-Redirector-Abuse"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52830",
                                "@id": "52830",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52830"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "The web application performs a redirection to an external site",
                        "@id": "Cause_2"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "The web application performs a redirection to an external site"
                ]
            },
            {
                "key": "threat_class",
                "value": "URL Redirector Abuse"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/URL-Redirector-Abuse"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "attRedirectInURL"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "3"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:C/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "601"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attRedirectInURL"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_53140"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catURLRedirectoryAbuse"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "phishing"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "redirectionFromWithinSite"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "8.5",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information. An http parameter was found to hold a URL value and cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. The fact that the server name in the modified link is identical to the original site helps the attacker by giving his phishing attempts a more reliable appearance.",
        "issueName": "Phishing Through URL Redirection",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attRedirectInURL",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "116",
                "type": "cwe"
            },
            {
                "id": "601",
                "type": "cwe"
            },
            {
                "id": "52830",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "High",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 8.5,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "6926055275708827392",
                        "_raw_entity": {
                            "ref": "5278201610254473472"
                        },
                        "_raw_url": {
                            "ref": "1305356544"
                        },
                        "entity_name": "To get the latest admin login, please contact SiteOps at 415-555-6159",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/login.jsp",
                        "url_name": "https://demo.testfire.net/login.jsp"
                    },
                    {
                        "_raw_@id": "9097867473260083968",
                        "_raw_entity": {
                            "ref": "59673210263644672"
                        },
                        "_raw_url": {
                            "ref": "-1274676571"
                        },
                        "entity_name": "Be careful what you change.  All changes are made directly to AltoroJ database.",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/admin/admin.jsp",
                        "url_name": "https://demo.testfire.net/admin/admin.jsp"
                    },
                    {
                        "_raw_@id": "-1657366961290739968",
                        "_raw_entity": {
                            "ref": "1738086959665785344"
                        },
                        "_raw_url": {
                            "ref": "1671735663"
                        },
                        "entity_name": "<li><a id=\"MenuHyperLink3\" href=\"/bank/stocks.jsp\">Trade Stocks</a></li>",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/main.jsp",
                        "url_name": "https://demo.testfire.net/bank/main.jsp"
                    },
                    {
                        "_raw_@id": "1734712626520731136",
                        "_raw_entity": {
                            "ref": "4795255983614942464"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "To modify account information do not connect to SQL source directly.  Make all changes",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "5211838176289115648",
                        "_raw_entity": {
                            "ref": "4166659523441492992"
                        },
                        "_raw_url": {
                            "ref": "-1274676571"
                        },
                        "entity_name": "action=\"changePassword\"",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/admin/admin.jsp",
                        "url_name": "https://demo.testfire.net/admin/admin.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attSensitiveInHtmlComments",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": [
                                "[1] Do not leave any vital information such as filenames or file paths in HTML comments.",
                                "[2] Remove traces of previous (or future) site links in the production site comments.",
                                "[3] Avoid placing sensitive information in HTML comments.",
                                "[4] Make sure that HTML comments do not include source code fragments.",
                                "[5] Make sure that no vital information was left behind by programmers."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "[1] Do not leave any vital information such as filenames or file paths in HTML comments.",
                    "[2] Remove traces of previous (or future) site links in the production site comments.",
                    "[3] Avoid placing sensitive information in HTML comments.",
                    "[4] Make sure that HTML comments do not include source code fragments.",
                    "[5] Make sure that no vital information was left behind by programmers."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_50750",
                    "name": "Remove sensitive information from HTML comments",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Remove sensitive information from HTML comments"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attSensitiveInHtmlComments",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_12"
                        },
                        "cwe": {
                            "link": {
                                "#text": "615",
                                "@id": "CWE-615",
                                "@target": "http://cwe.mitre.org/data/definitions/615.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "attSensitiveInHtmlComments",
                                "@type": "General"
                            }
                        },
                        "name": "HTML Comments Sensitive Information Disclosure",
                        "references": {
                            "link": {
                                "#text": "WASC Threat Classification: Information Leakage",
                                "@target": "http://www.webappsec.org/projects/threat/classes/information_leakage.shtml"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "sensitiveInformation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "text": "Many web application programmers use HTML comments to help debug the application when needed. While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc. An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site."
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52601",
                                "@id": "52601",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52601"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Debugging information was left by the programmer in web pages",
                        "@id": "Cause_12"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Debugging information was left by the programmer in web pages"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations"
                ]
            },
            {
                "key": "issue_id",
                "value": "attSensitiveInHtmlComments"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "615"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attSensitiveInHtmlComments"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_50750"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "sensitiveInformation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "debugInfoInHtmlSource"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "M a n y   w e b   a p p l i c a t i o n   p r o g r a m m e r s   u s e   H T M L   c o m m e n t s   t o   h e l p   d e b u g   t h e   a p p l i c a t i o n   w h e n   n e e d e d .   W h i l e   a d d i n g   g e n e r a l   c o m m e n t s   i s   v e r y   u s e f u l ,   s o m e   p r o g r a m m e r s   t e n d   t o   l e a v e   i m p o r t a n t   d a t a ,   s u c h   a s :   f i l e n a m e s   r e l a t e d   t o   t h e   w e b   a p p l i c a t i o n ,   o l d   l i n k s   o r   l i n k s   w h i c h   w e r e   n o t   m e a n t   t o   b e   b r o w s e d   b y   u s e r s ,   o l d   c o d e   f r a g m e n t s ,   e t c .   A n   a t t a c k e r   w h o   f i n d s   t h e s e   c o m m e n t s   c a n   m a p   t h e   a p p l i c a t i o n ' s   s t r u c t u r e   a n d   f i l e s ,   e x p o s e   h i d d e n   p a r t s   o f   t h e   s i t e ,   a n d   s t u d y   t h e   f r a g m e n t s   o f   c o d e   t o   r e v e r s e   e n g i n e e r   t h e   a p p l i c a t i o n ,   w h i c h   m a y   h e l p   d e v e l o p   f u r t h e r   a t t a c k s   a g a i n s t   t h e   s i t e .",
        "issueName": "HTML Comments Sensitive Information Disclosure",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attSensitiveInHtmlComments",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "615",
                "type": "cwe"
            },
            {
                "id": "52601",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-5717128788260262400",
                        "_raw_entity": {
                            "ref": "6856104062088173056"
                        },
                        "_raw_url": {
                            "ref": "345716453"
                        },
                        "entity_name": "transferAmount",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/doTransfer",
                        "url_name": "https://demo.testfire.net/bank/doTransfer"
                    },
                    {
                        "_raw_@id": "3446816155366055936",
                        "_raw_entity": {
                            "ref": "-4344886403399488000"
                        },
                        "_raw_url": {
                            "ref": "62259479"
                        },
                        "entity_name": "listAccounts",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/showAccount",
                        "url_name": "https://demo.testfire.net/bank/showAccount"
                    },
                    {
                        "_raw_@id": "-597973806125883392",
                        "_raw_entity": {
                            "ref": "4751107591038376192"
                        },
                        "_raw_url": {
                            "ref": "345716453"
                        },
                        "entity_name": "toAccount",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/doTransfer",
                        "url_name": "https://demo.testfire.net/bank/doTransfer"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "attUndefinedState",
                    "asp-dot-net": {
                        "fixRecommendation": {
                            "@type": "ASP.NET",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "indentText": "debug=\"false\"",
                            "link": {
                                "#text": "http://support.microsoft.com/default.aspx?scid=kb;en-us;815157",
                                "@target": "http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"
                            },
                            "text": [
                                "In order to disable debugging in ASP.NET, edit your web.config file to contain the following:",
                                "<compilation",
                                "/>",
                                "For more information, see \"HOW TO: Disable Debugging for ASP.NET Applications\" in:",
                                "You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.",
                                "To make sure that all the required parameters exist in a request, use the \"RequiredFieldValidator\" validation control. This control ensures that the user does not skip an entry in the web form.",
                                "To make sure user input contains only valid values, you can use one of the following validation controls:",
                                "[1] \"RangeValidator\": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.",
                                "[2] \"RegularExpressionValidator\": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.",
                                "Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.",
                                "There are two ways to check for user input validity:",
                                "1. Test for a general error state:",
                                "In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.",
                                "2. Test for the error state of individual controls:",
                                "Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control."
                            ]
                        }
                    },
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": [
                                "[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.",
                                "[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.",
                                "[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.",
                                "[4] Verify that the data belongs to the set offered to the client.",
                                "[5] Do not output debugging error messages and exceptions in a production environment."
                            ]
                        }
                    },
                    "j2ee": {
                        "fixRecommendation": {
                            "@type": "J2EE",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// Java example to validate required fields\n  public Class Validator {\n      ...\n      public static boolean validateRequired(String value) {\n          boolean isFieldValid = false;\n          if (value != null && value.trim().length() > 0) {\n              isFieldValid = true;\n          }\n          return isFieldValid;\n      }\n      ...\n  }\n  ...\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateRequired(fieldValue)) {\n      // fieldValue is valid, continue processing request\n      ...\n  }",
                                "// Java example to validate that a field is an int number\n  public Class Validator {\n      ...\n      public static boolean validateInt(String value) {\n          boolean isFieldValid = false;\n          try {\n              Integer.parseInt(value);\n              isFieldValid = true;\n          } catch (Exception e) {\n              isFieldValid = false;\n          }\n          return isFieldValid;\n      }\n      ...\n  }\n  ...\n  // check if the HTTP request parameter is of type int\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateInt(fieldValue)) {\n      // fieldValue is valid, continue processing request\n      ...\n  }",
                                "// Example to convert the HTTP request parameter to a primitive wrapper data type\n  // and store this value in a request attribute for further processing\n  String fieldValue = request.getParameter(\"fieldName\");\n  if (Validator.validateInt(fieldValue)) {\n      // convert fieldValue to an Integer\n      Integer integerValue = Integer.getInteger(fieldValue);\n      // store integerValue in a request attribute\n      request.setAttribute(\"fieldName\", integerValue);\n  }\n  ...\n  // Use the request attribute for further processing\n  Integer integerValue = (Integer)request.getAttribute(\"fieldName\");\n  ...",
                                "// Example to validate the field length\n  public Class Validator {\n      ...\n      public static boolean validateLength(String value, int minLength, int maxLength) {\n          String validatedValue = value;\n          if (!validateRequired(value)) {\n              validatedValue = \"\";\n          }\n          return (validatedValue.length() >= minLength &&\n                      validatedValue.length() <= maxLength);\n      }\n      ...\n  }\n  ...\n  String userName = request.getParameter(\"userName\");\n  if (Validator.validateRequired(userName)) {\n      if (Validator.validateLength(userName, 8, 20)) {\n          // userName is valid, continue further processing\n          ...\n      }\n  }",
                                "// Example to validate the field range\n  public Class Validator {\n      ...\n      public static boolean validateRange(int value, int min, int max) {\n          return (value >= min && value <= max);\n      }\n      ...\n  }\n  ...\n  String fieldValue = request.getParameter(\"numberOfChoices\");\n  if (Validator.validateRequired(fieldValue)) {\n      if (Validator.validateInt(fieldValue)) {\n          int numberOfChoices = Integer.parseInt(fieldValue);\n          if (Validator.validateRange(numberOfChoices, 10, 20)) {\n              // numberOfChoices is valid, continue processing request\n              ...\n          }\n      }\n  }",
                                "// Example to validate user selection against a list of options\n  public Class Validator {\n      ...\n      public static boolean validateOption(Object[] options, Object value) {\n          boolean isValidValue = false;\n          try {\n              List list = Arrays.asList(options);\n              if (list != null) {\n                  isValidValue = list.contains(value);\n              }\n          } catch (Exception e) {\n          }\n          return isValidValue;\n      }\n      ...\n  }\n  ...\n  // Allowed options\n  String[] options = {\"option1\", \"option2\", \"option3\");\n  // Verify that the user selection is one of the allowed options\n  String userSelection = request.getParameter(\"userSelection\");\n  if (Validator.validateOption(options, userSelection)) {\n      // valid user selection, continue processing request\n      ...\n  }",
                                "// Example to validate that a given value matches a specified pattern\n  // using the Apache regular expression package\n  import org.apache.regexp.RE;\n  import org.apache.regexp.RESyntaxException;\n  public Class Validator {\n      ...\n      public static boolean matchPattern(String value, String expression) {\n          boolean match = false;\n          if (validateRequired(expression)) {\n               RE r = new RE(expression);\n               match = r.match(value);             \n          }\n          return match;\n      }\n      ...\n  }\n  ...\n  // Verify that the userName request parameter is alpha-numeric\n  String userName = request.getParameter(\"userName\");\n  if (Validator.matchPattern(userName, \"^[a-zA-Z0-9]*$\")) {\n      // userName is valid, continue processing request\n      ...\n  }",
                                "// Example to validate that a given value matches a specified pattern\n  // using the Java 1.4 regular expression package\n  import java.util.regex.Pattern;\n  import java.util.regexe.Matcher;\n  public Class Validator {\n      ...\n      public static boolean matchPattern(String value, String expression) {\n          boolean match = false;\n          if (validateRequired(expression)) {\n              match = Pattern.matches(expression, value);\n          }\n          return match;\n      }\n      ...\n  }",
                                "// Example to validate a required cookie value\n  // First retrieve all available cookies submitted in the HTTP request\n  Cookie[] cookies = request.getCookies();\n  if (cookies != null) {\n      // find the \"user\" cookie\n      for (int i=0; i<cookies.length; ++i) {\n          if (cookies[i].getName().equals(\"user\")) {\n              // validate the cookie value\n              if (Validator.validateRequired(cookies[i].getValue()) {\n                  // valid cookie value, continue processing request\n                  ...\n              }\n          }    \n      }\n  }",
                                "// Example to filter sensitive data to prevent cross-site scripting\n  public Class Validator {\n      ...\n      public static String filter(String value) {\n          if (value == null) {\n              return null;\n          }        \n          StringBuffer result = new StringBuffer(value.length());\n          for (int i=0; i<value.length(); ++i) {\n              switch (value.charAt(i)) {\n              case '<':\n                  result.append(\"&lt;\");\n                  break;\n              case '>': \n                  result.append(\"&gt;\");\n                  break;\n              case '\"': \n                  result.append(\"&quot;\");\n                  break;\n              case '\\'': \n                  result.append(\"&#39;\");\n                  break;\n              case '%': \n                  result.append(\"&#37;\");\n                  break;\n              case ';': \n                  result.append(\"&#59;\");\n                  break;\n              case '(': \n                  result.append(\"&#40;\");\n                  break;\n              case ')': \n                  result.append(\"&#41;\");\n                  break;\n              case '&': \n                  result.append(\"&amp;\");\n                  break;\n              case '+':\n                  result.append(\"&#43;\");\n                  break;\n              default:\n                  result.append(value.charAt(i));\n                  break;\n          }        \n          return result;\n      }\n      ...\n  }\n  ...\n  // Filter the HTTP response using Validator.filter\n  PrintWriter out = response.getWriter();\n  // set output response\n  out.write(Validator.filter(response));\n  out.close();",
                                "// Example to filter all sensitive characters in the HTTP response using a Java Filter.\n  // This example is for illustration purposes since it will filter all content in the response, including HTML tags!\n  public class SensitiveCharsFilter implements Filter {\n      ...\n      public void doFilter(ServletRequest request,\n                      ServletResponse response,\n                      FilterChain chain)\n              throws IOException, ServletException {\n  \n          PrintWriter out = response.getWriter();\n          ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response);\n          chain.doFilter(request, wrapper);\n  \n          CharArrayWriter caw = new CharArrayWriter();\n          caw.write(Validator.filter(wrapper.toString()));\n          \n          response.setContentType(\"text/html\");\n          response.setContentLength(caw.toString().length());\n          out.write(caw.toString());\n          out.close();\n      }\n      ...\n      public class CharResponseWrapper extends HttpServletResponseWrapper {\n          private CharArrayWriter output;\n  \n          public String toString() {\n              return output.toString();\n          }\n      \n          public CharResponseWrapper(HttpServletResponse response){\n              super(response);\n              output = new CharArrayWriter();\n          }\n          \n          public PrintWriter getWriter(){\n              return new PrintWriter(output);\n          }\n      }\n  } \n  \n  }",
                                "// Example to secure a cookie, i.e. instruct the browser to\n  // send the cookie using a secure protocol\n  Cookie cookie = new Cookie(\"user\", \"sensitive\");\n  cookie.setSecure(true);\n  response.addCookie(cookie);",
                                "<form-validation>\n      <global>\n          ...\n          <validator name=\"required\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateRequired\"\n              msg=\"errors.required\">\n          </validator>\n          <validator name=\"mask\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateMask\"\n              msg=\"errors.invalid\">\n          </validator>\n          ...\n      </global>\n      <formset>\n          <form name=\"loginForm\">\n              <!-- userName is required and is alpha-numeric case insensitive -->\n              <field property=\"userName\" depends=\"required,mask\">\n                  <!-- message resource key to display if validation fails -->\n                  <msg name=\"mask\" key=\"login.userName.maskmsg\"/>\n                  <arg0 key=\"login.userName.displayname\"/>\n                  <var>\n                      <var-name>mask</var-name>\n                      <var-value>^[a-zA-Z0-9]*$</var-value>\n                  </var>\n              </field>\n          ...\n          </form>\n          ...\n      </formset>\n  </form-validation>",
                                "<%@ taglib uri=\"http://java.sun.com/jsf/html\" prefix=\"h\" %>\n  <%@ taglib uri=\"http://java.sun.com/jsf/core\" prefix=\"f\" %>\n  ...\n  <jsp:useBean id=\"UserBean\"\n      class=\"myApplication.UserBean\" scope=\"session\" />\n  <f:use_faces>\n    <h:form formName=\"loginForm\" >\n      <h:input_text id=\"userName\" size=\"20\" modelReference=\"UserBean.userName\">\n          <f:validate_required/>\n          <f:validate_length minimum=\"8\" maximum=\"20\"/>    \n      </h:input_text>\n      <!-- display errors if present -->\n      <h:output_errors id=\"loginErrors\" clientId=\"userName\"/>\n      <h:command_button id=\"submit\" label=\"Submit\" commandName=\"submit\" /><p>\n    </h:form>\n  </f:use_faces>",
                                "// Example: ErrorKeys defining the following error keys:    \n      //    - ERROR_USERNAME_REQUIRED\n      //    - ERROR_USERNAME_ALPHANUMERIC\n      //    - ERROR_USERNAME_DUPLICATE\n      //    - ERROR_USERNAME_INVALID\n      //    ...\n      public Class ErrorKeys {\n          public static final String ERROR_USERNAME_REQUIRED = \"error.username.required\";\n          public static final String ERROR_USERNAME_ALPHANUMERIC = \"error.username.alphanumeric\";\n          public static final String ERROR_USERNAME_DUPLICATE = \"error.username.duplicate\";\n          public static final String ERROR_USERNAME_INVALID = \"error.username.invalid\";\n          ...\n      }",
                                "// Example: Error encapsulates an error key.\n      // Error is serializable to support code executing in multiple JVMs.\n      public Class Error implements Serializable {\n          \n          // Constructor given a specified error key\n          public Error(String key) {\n              this(key, null);\n          }\n          \n          // Constructor given a specified error key and array of placeholder objects\n          public Error(String key, Object[] values) {\n              this.key = key;\n              this.values = values;\n          }\n          \n          // Returns the error key\n          public String getKey() {\n              return this.key;\n          }\n          \n          // Returns the placeholder values\n          public Object[] getValues() {\n              return this.values;\n          }\n          \n          private String key = null;\n          private Object[] values = null;\n      }",
                                "// Example: Errors encapsulates the Error objects being reported to the presentation layer.\n      // Errors are stored in a HashMap where the key is the bean property name and value is an\n      // ArrayList of Error objects.\n      public Class Errors implements Serializable {\n      \n          // Adds an Error object to the Collection of errors for the specified bean property.\n          public void addError(String property, Error error) {\n              ArrayList propertyErrors = (ArrayList)errors.get(property);\n              if (propertyErrors == null) {\n                  propertyErrors = new ArrayList();\n                  errors.put(property, propertyErrors);\n              }\n              propertyErrors.put(error);            \n          }\n          \n          // Returns true if there are any errors\n          public boolean hasErrors() {\n              return (errors.size > 0);\n          }\n          \n          // Returns the Errors for the specified property\n          public ArrayList getErrors(String property) {\n              return (ArrayList)errors.get(property);\n          }\n  \n          private HashMap errors = new HashMap();\n      }",
                                "// Example to process validation errors of the \"user_name\" field.\n  Errors errors = new Errors();\n  String userName = request.getParameter(\"user_name\");\n  // (a) Required validation rule\n  if (!Validator.validateRequired(userName)) {\n      errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED));\n  } // (b) Alpha-numeric validation rule\n  else if (!Validator.matchPattern(userName, \"^[a-zA-Z0-9]*$\")) {\n      errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC));\n  }\n  else\n  {\n      // (c) Duplicate check validation rule\n      // We assume that there is an existing UserValidationEJB session bean that implements\n      // a checkIfDuplicate() method to verify if the user already exists in the database.\n      try {\n          ...        \n          if (UserValidationEJB.checkIfDuplicate(userName)) {\n              errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE));\n          }\n      } catch (RemoteException e) {\n          // log the error\n          logger.error(\"Could not validate user for specified userName: \" + userName);\n          errors.addError(\"user_name\", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE);\n      }\n  }\n  // set the errors object in a request attribute called \"errors\"\n  request.setAttribute(\"errors\", errors);\n  ...",
                                "// Example to forward to the userInput.jsp following user validation errors\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/user/userInput.jsp\");\n  if (rd != null) {\n      rd.forward(request, response);\n  }",
                                "// Example to return a HTTP error code\n  RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/user/userInput.jsp\");\n  if (rd == null) {\n      // messages is a resource bundle with all message keys and values\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,\n                              messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID));\n  }",
                                "<%@ page errorPage=\"/errors/userValidation.jsp\" %>",
                                "<%@ page isErrorPage=\"true\" %>",
                                "################################################\n  # ErrorMessages.properties\n  ################################################\n  # required user name error message\n  error.username.required=User name field is required\n  \n  # invalid user name format\n  error.username.alphanumeric=User name must be alphanumeric\n  \n  # duplicate user name error message\n  error.username.duplicate=User name {0} already exists, please choose another one\n  \n  ...",
                                "// Example to show how to format a message using placeholder parameters\n  String pattern = \"User name {0} already exists, please choose another one\";\n  String userName = request.getParameter(\"user_name\");\n  Object[] args = new Object[1];\n  args[0] = userName;\n  String message = MessageFormat.format(pattern, args);",
                                "// Example to render an error message from a localized ErrorMessages resource (properties file)\n  // Utility class to retrieve locale-specific error messages\n  public Class ErrorMessageResource {\n      \n      // Returns the error message for the specified error key in the environment locale\n      public String getErrorMessage(String errorKey) {\n          return getErrorMessage(errorKey, defaultLocale);\n      }\n      \n      // Returns the error message for the specified error key in the specified locale\n      public String getErrorMessage(String errorKey, Locale locale) {\n          return getErrorMessage(errorKey, null, locale);\n      }\n      \n      // Returns a formatted error message for the specified error key in the specified locale\n      public String getErrorMessage(String errorKey, Object[] args, Locale locale) {    \n          // Get localized ErrorMessageResource\n          ResourceBundle errorMessageResource = ResourceBundle.getBundle(\"ErrorMessages\", locale);\n          // Get localized error message\n          String errorMessage = errorMessageResource.getString(errorKey);\n          if (args != null) {\n              // Format the message using the specified placeholders args\n              return MessageFormat.format(errorMessage, args);\n          } else {\n              return errorMessage;\n          }\n      }\n      \n      // default environment locale\n      private Locale defaultLocale = Locale.getDefaultLocale();\n  }\n  ...\n  // Get the user's locale\n  Locale userLocale = request.getLocale();\n  // Check if there were any validation errors\n  Errors errors = (Errors)request.getAttribute(\"errors\");\n  if (errors != null && errors.hasErrors()) {\n      // iterate through errors and output error messages corresponding to the \"user_name\" property\n      ArrayList userNameErrors = errors.getErrors(\"user_name\");\n      ListIterator iterator = userNameErrors.iterator();\n      while (iterator.hasNext()) {\n          // Get the next error object\n          Error error = (Error)iterator.next();\n          String errorMessage = ErrorMessageResource.getErrorMessage(error.getKey(), userLocale);\n          output.write(errorMessage + \"\\r\\n\");\n      }\n  }",
                                "<!-- Mapping of HTTP error codes and application exceptions to error pages -->\n  <error-page>\n    <exception-type>UserValidationException</exception-type>\n    <location>/errors/validationError.html</error-page>\n  </error-page>\n  <error-page>\n    <error-code>500</exception-type>\n    <location>/errors/internalError.html</error-page>\n  </error-page>\n  <error-page>\n  ...\n  </error-page>\n  ...",
                                "<form-validation>\n      <global>\n          ...\n          <validator name=\"required\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateRequired\"\n              msg=\"errors.required\">\n          </validator>\n          <validator name=\"mask\"\n              classname=\"org.apache.struts.validator.FieldChecks\"\n              method=\"validateMask\"\n              msg=\"errors.invalid\">\n          </validator>\n          ...\n      </global>\n      <formset>\n          <form name=\"loginForm\">\n              <!-- userName is required and is alpha-numeric case insensitive -->\n              <field property=\"userName\" depends=\"required,mask\">\n                  <!-- message resource key to display if validation fails -->\n                  <msg name=\"mask\" key=\"login.userName.maskmsg\"/>\n                  <arg0 key=\"login.userName.displayname\"/>\n                  <var>\n                      <var-name>mask</var-name>\n                      <var-value>^[a-zA-Z0-9]*$</var-value>\n                  </var>\n              </field>\n          ...\n          </form>\n          ...\n      </formset>\n  </form-validation>",
                                "<%@ page language=\"java\" %>\n  <%@ taglib uri=\"/WEB-INF/struts-html.tld\" prefix=\"html\" %>\n  <%@ taglib uri=\"/WEB-INF/struts-bean.tld\" prefix=\"bean\" %>\n  <html:html>\n  <head>\n  <body>\n      <html:form action=\"/logon.do\">    \n      <table border=\"0\" width=\"100%\">\n      <tr>\n          <th align=\"right\">\n              <html:errors property=\"username\"/>\n              <bean:message key=\"prompt.username\"/>\n          </th>\n          <td align=\"left\">\n              <html:text property=\"username\" size=\"16\"/>\n          </td>\n      </tr>\n      <tr>\n      <td align=\"right\">\n          <html:submit><bean:message key=\"button.submit\"/></html:submit>\n      </td>\n      <td align=\"right\">\n          <html:reset><bean:message key=\"button.reset\"/></html:reset>\n      </td>\n      </tr>\n      </table>\n      </html:form>\n  </body>\n  </html:html>",
                                "<%@ taglib uri=\"http://java.sun.com/jsf/html\" prefix=\"h\" %>\n  <%@ taglib uri=\"http://java.sun.com/jsf/core\" prefix=\"f\" %>\n  ...\n  <jsp:useBean id=\"UserBean\"\n      class=\"myApplication.UserBean\" scope=\"session\" />\n  <f:use_faces>\n    <h:form formName=\"loginForm\" >\n      <h:input_text id=\"userName\" size=\"20\" modelReference=\"UserBean.userName\">\n          <f:validate_required/>\n          <f:validate_length minimum=\"8\" maximum=\"20\"/>    \n      </h:input_text>\n      <!-- display errors if present -->\n      <h:output_errors id=\"loginErrors\" clientId=\"userName\"/>\n      <h:command_button id=\"submit\" label=\"Submit\" commandName=\"submit\" /><p>\n    </h:form>\n  </f:use_faces>"
                            ],
                            "link": [
                                {
                                    "#text": "http://java.sun.com/j2se/1.3/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.3/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.4/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.4/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/products/servlet/2.3/javadoc/",
                                    "@target": "http://java.sun.com/products/servlet/2.3/javadoc/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/regexp/",
                                    "@target": "http://jakarta.apache.org/regexp/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/commons/validator/",
                                    "@target": "http://jakarta.apache.org/commons/validator/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2ee/javaserverfaces/",
                                    "@target": "http://java.sun.com/j2ee/javaserverfaces/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.3/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.3/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2se/1.4/docs/api/",
                                    "@target": "http://java.sun.com/j2se/1.4/docs/api/"
                                },
                                {
                                    "#text": "http://java.sun.com/products/servlet/2.3/javadoc/",
                                    "@target": "http://java.sun.com/products/servlet/2.3/javadoc/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/regexp/",
                                    "@target": "http://jakarta.apache.org/regexp/"
                                },
                                {
                                    "#text": "http://jakarta.apache.org/commons/validator/",
                                    "@target": "http://jakarta.apache.org/commons/validator/"
                                },
                                {
                                    "#text": "http://java.sun.com/j2ee/javaserverfaces/",
                                    "@target": "http://java.sun.com/j2ee/javaserverfaces/"
                                }
                            ],
                            "text": [
                                "** Input Data Validation:",
                                "While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.",
                                "A good design usually requires the web application framework to provide server-side utility routines to validate the following:",
                                "[1] Required field",
                                "[2] Field data type (all HTTP request parameters are Strings by default)",
                                "[3] Field length",
                                "[4] Field range",
                                "[5] Field options",
                                "[6] Field pattern",
                                "[7] Cookie values",
                                "[8] HTTP Response",
                                "A good practice is to implement the above routine as static methods in a \"Validator\" utility class.  The following sections describe an example validator class.",
                                "[1] Required field",
                                "Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.",
                                "Example of how to validate required fields:",
                                "[2] Field data type",
                                "In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.  Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.",
                                "Example of how to validate a numeric field (type int):",
                                "A good practice is to convert all HTTP request parameters to their respective data types.  For example, store the \"integerValue\" of a request parameter in a request attribute and use it as shown in the following example:",
                                "The primary Java data types that the application should handle:",
                                "- Byte",
                                "- Short",
                                "- Integer",
                                "- Long",
                                "- Float",
                                "- Double",
                                "- Date",
                                "[3] Field length",
                                "Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.",
                                "Example to validate that the length of the userName field is between 8 and 20 characters:",
                                "[4] Field range",
                                "Always ensure that the input parameter is within a range as defined by the functional requirements.",
                                "Example to validate that the input numberOfChoices is between 10 and 20:",
                                "[5] Field options",
                                "Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.",
                                "Example to validate the user selection against a list of allowed options:",
                                "[6] Field pattern",
                                "Always check that the user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:",
                                "^[a-zA-Z0-9]*$",
                                "Java 1.3 or earlier versions do not include any regular expression packages.  Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support.",
                                "Example to perform regular expression validation:",
                                "Java 1.4 introduced a new regular expression package (java.util.regex).  Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:",
                                "[7] Cookie value",
                                "Use the javax.servlet.http.Cookie object to validate the cookie value.  The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.",
                                "Example to validate a required cookie value:",
                                "[8] HTTP Response",
                                "[8-1] Filter user input",
                                "To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:",
                                "< > \" ' % ; ) ( & +",
                                "Example to filter a specified string by converting sensitive characters to their corresponding character entities:",
                                "The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.",
                                "Example of using a Servlet Filter to sanitize the response using Validator.filter:",
                                "[8-2] Secure the cookie",
                                "When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie  using  a secure protocol, such as HTTPS or SSL.",
                                "Example to secure the \"user\" cookie:",
                                "RECOMMENDED JAVA TOOLS",
                                "The two main Java frameworks for server-side validation are:",
                                "[1] Jakarta Commons Validator (integrated with Struts 1.1)",
                                "The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements.  These rules are configured in an XML file that defines input validation rules for form fields.  Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag.  This filtering may be disabled by setting the 'filter=false' flag.",
                                "Struts defines the following basic input validators, but custom validators may also be defined:",
                                "required: succeeds if the field contains any characters other than white space.",
                                "mask: succeeds if the value matches the regular expression given by the mask attribute.",
                                "range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).",
                                "maxLength: succeeds if the field is length is less than or equal to the max attribute.",
                                "minLength: succeeds if the field is length is greater than or equal to the min attribute.",
                                "byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.",
                                "date: succeeds if the value represents a valid date. A date pattern may be provided.",
                                "creditCard: succeeds if the value could be a valid credit card number.",
                                "e-mail: succeeds if the value could be a valid e-mail address.",
                                "Example to validate the userName field of a loginForm using Struts Validator:",
                                "[2] JavaServer Faces Technology",
                                "JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.",
                                "The JavaServer Faces API implements the following basic validators, but custom validators may be defined:",
                                "validate_doublerange: registers a DoubleRangeValidator on a component",
                                "validate_length: registers a LengthValidator on a component",
                                "validate_longrange: registers a LongRangeValidator on a component",
                                "validate_required: registers a RequiredValidator on a component",
                                "validate_stringrange: registers a StringRangeValidator on a component",
                                "validator: registers a custom Validator on a component",
                                "The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):",
                                "input_date: accepts a java.util.Date formatted with a java.text.Date instance",
                                "output_date: displays a java.util.Date formatted with a java.text.Date instance",
                                "input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance",
                                "output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance",
                                "input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat",
                                "output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat",
                                "input_text: accepts a text string of one line.",
                                "output_text: displays a text string of one line.",
                                "input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance",
                                "output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance",
                                "input_hidden: allows a page author to include a hidden variable in a page",
                                "input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed",
                                "input_textarea: accepts multiple lines of text",
                                "output_errors: displays error messages for an entire page or error messages associated with a specified client identifier",
                                "output_label: displays a nested component as a label for a specified input field",
                                "output_message: displays a localized message",
                                "Example to validate the userName field of a loginForm using JavaServer Faces:",
                                "REFERENCES",
                                "Java API 1.3 -",
                                "Java API 1.4 -",
                                "Java Servlet API 2.3 -",
                                "Java Regular Expression Package -",
                                "Jakarta Validator -",
                                "JavaServer Faces Technology -",
                                "** Error Handling:",
                                "Many J2EE web application architectures follow the Model View Controller (MVC) pattern.  In this pattern a Servlet acts as a Controller.  A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model).  The Servlet then forwards the request to a JSP (View) to render the processing results.  Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.",
                                "While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces.  A good error handling strategy addresses the following items:",
                                "[1] Defining Errors",
                                "[2] Reporting Errors",
                                "[3] Rendering Errors",
                                "[4] Error Mapping",
                                "[1] Defining Errors",
                                "Hard-coded error messages in the application layer (e.g. Servlets) should be avoided.  Instead, the application should use error keys that map to known application failures.  A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties.  For example, if the \"user_name\" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:",
                                "(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the \"user_name\" field is required;",
                                "(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the \"user_name\" field should be alphanumeric;",
                                "(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the \"user_name\" value is a duplicate in the database;",
                                "(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the \"user_name\" value is invalid;",
                                "A good practice is to define the following framework Java classes which are used to store and report application errors:",
                                "- ErrorKeys: defines all error keys",
                                "- Error: encapsulates an individual error",
                                "- Errors: encapsulates a Collection of errors",
                                "Using the above framework classes, here is an example to process validation errors of the \"user_name\" field:",
                                "[2] Reporting Errors",
                                "There are two ways to report web-tier application errors:",
                                "(a) Servlet Error Mechanism",
                                "(b) JSP Error Mechanism",
                                "[2-a] Servlet Error Mechanism",
                                "A Servlet may report errors by:",
                                "- forwarding to the input JSP (having already stored the errors in a request attribute), OR",
                                "- calling response.sendError with an HTTP error code argument, OR",
                                "- throwing an exception",
                                "It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data.  The following example illustrates how to forward to an input JSP (userInput.jsp):",
                                "If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument.  Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes.",
                                "Example to return a HTTP error:",
                                "As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:",
                                "- RuntimeException",
                                "- ServletException",
                                "- IOException",
                                "[2-b] JSP Error Mechanism",
                                "JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:",
                                "Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request parameter called javax.servlet.jsp.jspException.  The error page must include a isErrorPage directive as shown below:",
                                "The isErrorPage directive causes the \"exception\" variable to be initialized to the exception object being thrown.",
                                "[3] Rendering Errors",
                                "The J2SE Internationalization APIs provide utility classes for externalizing application resources and formatting messages including:",
                                "(a) Resource Bundles",
                                "(b) Message Formatting",
                                "[3-a] Resource Bundles",
                                "Resource bundles support internationalization by separating localized data from the source code that uses it.  Each resource bundle stores a map of key/value pairs for a specific locale.",
                                "It is common to use or extend java.util.PropertyResourceBundle, which stores the content in an external properties file as shown in the following example:",
                                "Multiple resources can be defined to support different locales (hence the name resource bundle).  For example, ErrorMessages_fr.properties can be defined to support the French member of the bundle family.  If the resource member of the requested locale does not exist, the default member is used.  In the above example, the default resource is ErrorMessages.properties.  Depending on the user's locale, the application (JSP or Servlet) retrieves content from the appropriate resource.",
                                "[3-b] Message Formatting",
                                "The J2SE standard class java.util.MessageFormat provides a generic way to create messages with replacement placeholders.  A MessageFormat object contains a pattern string with embedded format specifiers as shown below:",
                                "Here is a more comprehensive example to render error messages using ResourceBundle and MessageFormat:",
                                "It is recommended to define a custom JSP tag, e.g. displayErrors, to iterate through and render error messages as shown in the above example.",
                                "[4] Error Mapping",
                                "Normally, the Servlet Container will return a default error page corresponding to either the response status code or the exception.  A mapping between the status code or the exception and a web resource may be specified using custom error pages.  It is a good practice to develop static error pages that do not disclose internal error states (by default, most Servlet containers will report internal error messages).  This mapping is configured in the Web Deployment Descriptor (web.xml) as specified in the following example:",
                                "RECOMMENDED JAVA TOOLS",
                                "The two main Java frameworks for server-side validation are:",
                                "[1] Jakarta Commons Validator (integrated with Struts 1.1)",
                                "The Jakarta Commons Validator is a Java framework that defines the error handling mechanism as described above.  Validation rules are configured in an XML file that defines input validation rules for form fields and the corresponding validation error keys.  Struts provides internationalization support to build localized applications using resource bundles and message formatting.",
                                "Example to validate the userName field of a loginForm using Struts Validator:",
                                "The Struts JSP tag library defines the \"errors\" tag that conditionally displays a set of accumulated error messages as shown in the following example:",
                                "[2] JavaServer Faces Technology",
                                "JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events, validate input, and support internationalization.",
                                "The JavaServer Faces API defines the \"output_errors\" UIOutput Renderer, which displays error messages for an entire page or error messages associated with a specified client identifier.",
                                "Example to validate the userName field of a loginForm using JavaServer Faces:",
                                "REFERENCES",
                                "Java API 1.3 -",
                                "Java API 1.4 -",
                                "Java Servlet API 2.3 -",
                                "Java Regular Expression Package -",
                                "Jakarta Validator -",
                                "JavaServer Faces Technology -"
                            ]
                        }
                    },
                    "php": {
                        "fixRecommendation": {
                            "@type": "PHP",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "code": [
                                "// PHP example to validate required fields\n  function validateRequired($input) {\n      ...\n      $pass = false;\n      if (strlen(trim($input))>0){\n          $pass = true;\n      }\n      return $pass;\n      ...\n  }\n  ...\n  if (validateRequired($fieldName)) {\n      // fieldName is valid, continue processing request\n      ...\n  }",
                                "$input = htmlentities($input, ENT_QUOTES, 'UTF-8');",
                                "<?php\n  \n  header('Content-Type: text/html; charset=UTF-8');\n  \n  ?>",
                                "<$php\n  \n      $value = \"some_value\";\n      $time = time()+3600;\n      $path = \"/application/\";\n      $domain = \".example.com\";\n      $secure = 1;\n  \n      setcookie(\"CookieName\", $value, $time, $path, $domain, $secure, TRUE);\n  ?>"
                            ],
                            "link": [
                                {
                                    "#text": "http://msdn2.microsoft.com/en-us/library/ms533046.aspx",
                                    "@target": "http://msdn2.microsoft.com/en-us/library/ms533046.aspx"
                                },
                                {
                                    "#text": "http://phpsec.org/",
                                    "@target": "http://phpsec.org/"
                                },
                                {
                                    "#text": "http://shiflett.org/",
                                    "@target": "http://shiflett.org/"
                                }
                            ],
                            "text": [
                                "** Input Data Validation:",
                                "While data validations may be provided as a user convenience on the client-tier, data validation must always be performed on the server-tier.  Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.",
                                "A good design usually requires the web application framework to provide server-side utility routines to validate the following:",
                                "[1] Required field",
                                "[2] Field data type (all HTTP request parameters are Strings by default)",
                                "[3] Field length",
                                "[4] Field range",
                                "[5] Field options",
                                "[6] Field pattern",
                                "[7] Cookie values",
                                "[8] HTTP Response",
                                "A good practice is to implement a function or functions that validates each application parameter.  The following sections describe some example checking.",
                                "[1] Required field",
                                "Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces.",
                                "Example of how to validate required fields:",
                                "[2] Field data type",
                                "In web applications, input parameters are poorly typed.  For example, all HTTP request parameters or cookie values are of type String.  The developer is responsible for verifying the input is of the correct data type.",
                                "[3] Field length",
                                "Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.",
                                "[4] Field range",
                                "Always ensure that the input parameter is within a range as defined by the functional requirements.",
                                "[5] Field options",
                                "Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options.  Remember that a malicious user can easily modify any option value.  Always validate the selected user value against the allowed options as defined by the functional requirements.",
                                "[6] Field pattern",
                                "Always check that user input matches a pattern as defined by the functionality requirements.  For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:",
                                "^[a-zA-Z0-9]+$",
                                "[7] Cookie value",
                                "The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.",
                                "[8] HTTP Response",
                                "[8-1] Filter user input",
                                "To guard the application against cross-site scripting, the developer should sanitize HTML by converting sensitive characters to their corresponding character entities.  These are the HTML sensitive characters:",
                                "< > \" ' % ; ) ( & +",
                                "PHP includes some automatic sanitization utility functions, such as htmlentities():",
                                "In addition, in order to avoid UTF-7 variants of Cross-site Scripting, you should explicitly define the Content-Type header of the response, for example:",
                                "[8-2] Secure the cookie",
                                "When storing sensitive data in a cookie and transporting it over SSL, make sure that you first set the secure flag of the cookie in the HTTP response. This will instruct the browser to only use that cookie over SSL connections.",
                                "You can use the following code example, for securing the cookie:",
                                "In addition, we recommend that you use the HttpOnly flag. When the HttpOnly flag is set to TRUE the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. This setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers).",
                                "The HttpOnly flag was Added in PHP 5.2.0.",
                                "REFERENCES",
                                "[1] Mitigating Cross-site Scripting With HTTP-only Cookies:",
                                "[2] PHP Security Consortium:",
                                "[3] PHP & Web Application Security Blog (Chris Shiflett):"
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.",
                    "[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.",
                    "[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.",
                    "[4] Verify that the data belongs to the set offered to the client.",
                    "[5] Do not output debugging error messages and exceptions in a production environment."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_50300",
                    "name": "Verify that parameter values are in their expected ranges and types. Do not output debugging error messages and exceptions",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Verify that parameter values are in their expected ranges and types. Do not output debugging error messages and exceptions"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "attUndefinedState",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": [
                                "Cause_9",
                                "Cause_10"
                            ]
                        },
                        "cwe": {
                            "link": {
                                "#text": "550",
                                "@id": "CWE-550",
                                "@target": "http://cwe.mitre.org/data/definitions/550.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": [
                                {
                                    "#text": "attUndefinedState",
                                    "@type": "General"
                                },
                                {
                                    "#text": "attUndefinedState",
                                    "@type": "ASP.NET"
                                },
                                {
                                    "#text": "attUndefinedState",
                                    "@type": "J2EE"
                                },
                                {
                                    "#text": "attUndefinedState",
                                    "@type": "PHP"
                                }
                            ]
                        },
                        "name": "Application Error",
                        "references": {
                            "link": [
                                {
                                    "#text": "An example for using apostrophe to hack a site can be found in \"How I hacked PacketStorm (by Rain Forest Puppy), RFP's site\"",
                                    "@target": "http://archives.neohapsis.com/archives/win2ksecadvice/2000-q1/0085.html"
                                },
                                {
                                    "#text": "\"Web Application Disassembly with ODBC Error Messages\" (By David Litchfield)",
                                    "@target": "http://www.cgisecurity.com/lib/webappdis.doc"
                                },
                                {
                                    "#text": "CERT Advisory (CA-1997-25): Sanitizing user-supplied data in CGI scripts",
                                    "@target": "http://www.cert.org/advisories/CA-1997-25.html"
                                }
                            ]
                        },
                        "securityRisks": {
                            "securityRisk": "debugErrorInformation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "If an attacker probes the application by forging a request that contains parameters or parameter values other than the ones expected by the application (examples are listed below), the application may enter an undefined state that makes it vulnerable to attack. The attacker can gain useful information from the application's response to this request, which information may be exploited to locate application weaknesses.",
                                "For example, if the parameter field should be an apostrophe-quoted string (e.g. in an ASP script or SQL query), the injected apostrophe symbol will prematurely terminate the string stream, thus changing the normal flow/syntax of the script.",
                                "Another cause of vital information being revealed in error messages, is when the scripting engine, web server, or database are misconfigured.",
                                "Here are some different variants:",
                                "[1] Remove parameter",
                                "[2] Remove parameter value",
                                "[3] Set parameter value to null",
                                "[4] Set parameter value to a numeric overflow (+/- 99999999)",
                                "[5] Set parameter value to hazardous characters, such as ' \" \\' \\\" ) ;",
                                "[6] Append some string to a numeric parameter value",
                                "[7] Append \".\" (dot) or \"[]\" (angle brackets) to the parameter name"
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52502",
                                "@id": "52502",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52502"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Proper bounds checking were not performed on incoming parameter values",
                        "@id": "Cause_9"
                    },
                    {
                        "#text": "No validation was done in order to make sure that user input matches the data type expected",
                        "@id": "Cause_10"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Proper bounds checking were not performed on incoming parameter values",
                    "No validation was done in order to make sure that user input matches the data type expected"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive debugging information"
                ]
            },
            {
                "key": "issue_id",
                "value": "attUndefinedState"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "0"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "550"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "attUndefinedState"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_50300"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "debugErrorInformation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": [
                        "boundsCheckingOnParamValues",
                        "incorrectDataType"
                    ]
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "0.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "If an attacker probes the application by forging a request that contains parameters or parameter values other than the ones expected by the application (examples are listed below), the application may enter an undefined state that makes it vulnerable to attack. The attacker can gain useful information from the application's response to this request, which information may be exploited to locate application weaknesses. For example, if the parameter field should be an apostrophe-quoted string (e.g. in an ASP script or SQL query), the injected apostrophe symbol will prematurely terminate the string stream, thus changing the normal flow/syntax of the script. Another cause of vital information being revealed in error messages, is when the scripting engine, web server, or database are misconfigured. Here are some different variants: [1] Remove parameter [2] Remove parameter value [3] Set parameter value to null [4] Set parameter value to a numeric overflow (+/- 99999999) [5] Set parameter value to hazardous characters, such as ' \" \\' \\\" ) ; [6] Append some string to a numeric parameter value [7] Append \".\" (dot) or \"[]\" (angle brackets) to the parameter name",
        "issueName": "Application Error",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "attUndefinedState",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "550",
                "type": "cwe"
            },
            {
                "id": "52502",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Informational",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0.0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-5674067758735514368",
                        "_raw_entity": {
                            "ref": "-3961925784633657600"
                        },
                        "_raw_url": {
                            "ref": "345716453"
                        },
                        "entity_name": "doTransfer",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/bank/doTransfer",
                        "url_name": "https://demo.testfire.net/bank/doTransfer"
                    },
                    {
                        "_raw_@id": "-6898109928042793728",
                        "_raw_entity": {
                            "ref": "-8616786764826749184"
                        },
                        "_raw_url": {
                            "ref": "-1274676571"
                        },
                        "entity_name": "admin.jsp",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/admin/admin.jsp",
                        "url_name": "https://demo.testfire.net/admin/admin.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "bodyParamsInQuery",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "text": "Re-program the application to disallow handling of POST parameters that were listed in the Query"
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": "Re-program the application to disallow handling of POST parameters that were listed in the Query"
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61757",
                    "name": "Do not accept body parameters that are sent in the query string",
                    "priority": "Low",
                    "priority-id": "0"
                }
            },
            {
                "key": "remediation",
                "value": "Do not accept body parameters that are sent in the query string"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "bodyParamsInQuery",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_4"
                        },
                        "cwe": {
                            "link": {
                                "#text": "200",
                                "@id": "CWE-200",
                                "@target": "http://cwe.mitre.org/data/definitions/200.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "bodyParamsInQuery",
                                "@type": "General"
                            }
                        },
                        "name": "Body Parameters Accepted in Query",
                        "references": {
                            "link": [
                                {
                                    "#text": "GET",
                                    "@target": "http://tools.ietf.org/html/rfc7231#section-4.3.1"
                                },
                                {
                                    "#text": "POST",
                                    "@target": "http://tools.ietf.org/html/rfc7231#section-4.3.3"
                                }
                            ],
                            "text": "Hypertext Transfer Protocol (HTTP/1.1) Semantics and Content:"
                        },
                        "securityRisks": {
                            "securityRisk": [
                                "sensitiveInformation",
                                "phishing"
                            ]
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "text": [
                                "GET requests are designed to query the server, while POST requests are for submitting data.",
                                "However, aside from the technical purpose, attacking query parameters is easier than body parameters, because sending a link to the original site, or posting it in a blog or comment, is easier and has better results than the alternative - in order to attack a request with body parameters, an attacker would need to create a page containing a form that will be submitted when visited by the victim.",
                                "It is a lot harder to convince the victim to visit a page that he doesn't know, than letting him visit the original site. It it therefore not recommended to support body parameters that arrive in the query string."
                            ]
                        },
                        "threatClassification": {
                            "name": "Information Leakage",
                            "reference": "http://projects.webappsec.org/Information-Leakage"
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Insecure web application programming or configuration",
                        "@id": "Cause_4"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Insecure web application programming or configuration"
                ]
            },
            {
                "key": "threat_class",
                "value": "Information Leakage"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Information-Leakage"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to gather sensitive information about the web application such as usernames, passwords, machine name and/or sensitive file locations",
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "bodyParamsInQuery"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "1"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:N/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "200"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "bodyParamsInQuery"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61757"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catInformationLeakage"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": [
                        "sensitiveInformation",
                        "phishing"
                    ]
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "insecureWebAppConfiguration"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "5.0",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "GET requests are designed to query the server, while POST requests are for submitting data. However, aside from the technical purpose, attacking query parameters is easier than body parameters, because sending a link to the original site, or posting it in a blog or comment, is easier and has better results than the alternative - in order to attack a request with body parameters, an attacker would need to create a page containing a form that will be submitted when visited by the victim. It is a lot harder to convince the victim to visit a page that he doesn't know, than letting him visit the original site. It it therefore not recommended to support body parameters that arrive in the query string.",
        "issueName": "Body Parameters Accepted in Query",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "bodyParamsInQuery",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "200",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Low",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 5.0,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "-5724360596176220928",
                        "_raw_entity": {
                            "ref": "9016840211346226688"
                        },
                        "_raw_url": {
                            "ref": "865016179"
                        },
                        "entity_name": "disclaimer.htm:35",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/disclaimer.htm",
                        "url_name": "https://demo.testfire.net/disclaimer.htm"
                    },
                    {
                        "_raw_@id": "-6102358388797847296",
                        "_raw_entity": {
                            "ref": "2034765036004408576"
                        },
                        "_raw_url": {
                            "ref": "865016179"
                        },
                        "entity_name": "disclaimer.htm:32",
                        "entity_type": "Page",
                        "entity_url": "https://demo.testfire.net/disclaimer.htm",
                        "url_name": "https://demo.testfire.net/disclaimer.htm"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "jsOpenRedirect",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "link": {
                                "#text": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet",
                                "@target": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"
                            },
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] Strategy: Libraries or Frameworks",
                                "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                                "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                                "[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                                "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                                "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                                "[-] HTML body",
                                "[-] Element attributes (such as src=\"XYZ\")",
                                "[-] URIs",
                                "[-] JavaScript sections",
                                "[-] Cascading Style Sheets and style property",
                                "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                                "Consult the XSS Prevention Cheat Sheet",
                                "for more details on the types of encoding and escaping that are needed.",
                                "[3] Strategy: Identify and Reduce Attack Surface",
                                "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                                "[4] Strategy: Output Encoding",
                                "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                                "[5] Strategy: Identify and Reduce Attack Surface",
                                "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                                "[6] Strategy: Input Validation",
                                "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                                "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                                "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                                "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                                "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                                "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] Strategy: Libraries or Frameworks",
                    "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                    "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                    "[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                    "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                    "[-] HTML body",
                    "[-] Element attributes (such as src=\"XYZ\")",
                    "[-] URIs",
                    "[-] JavaScript sections",
                    "[-] Cascading Style Sheets and style property",
                    "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                    "Consult the XSS Prevention Cheat Sheet",
                    "for more details on the types of encoding and escaping that are needed.",
                    "[3] Strategy: Identify and Reduce Attack Surface",
                    "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "[4] Strategy: Output Encoding",
                    "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                    "[5] Strategy: Identify and Reduce Attack Surface",
                    "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "[6] Strategy: Input Validation",
                    "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                    "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                    "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                    "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_61400",
                    "name": "Analyze and harden client side (JavaScript) code.",
                    "priority": "Medium",
                    "priority-id": "1"
                }
            },
            {
                "key": "remediation",
                "value": "Analyze and harden client side (JavaScript) code."
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "jsOpenRedirect",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_2"
                        },
                        "cwe": {
                            "link": {
                                "#text": "601",
                                "@id": "CWE-601",
                                "@target": "http://cwe.mitre.org/data/definitions/601.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "jsOpenRedirect",
                                "@type": "General"
                            }
                        },
                        "name": "Open Redirect",
                        "references": {
                            "link": {
                                "#text": "FTC Consumer Alert - \"How Not to Get Hooked by a 'Phishing' Scam\"",
                                "@target": "http://www.ftc.gov/bcp/edu/pubs/consumer/alerts/alt127.shtm"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "attackFacilitation"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
                                "An http parameter was found to hold a URL value and cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials.",
                                "The fact that the server name in the modified link is identical to the original site helps the attacker by giving his phishing attempts a more reliable appearance."
                            ]
                        },
                        "threatClassification": {
                            "name": "URL Redirector Abuse",
                            "reference": "http://projects.webappsec.org/URL-Redirector-Abuse"
                        },
                        "xfid": {
                            "link": {
                                "#text": "89135",
                                "@id": "89135",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/89135"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "The web application performs a redirection to an external site",
                        "@id": "Cause_2"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "The web application performs a redirection to an external site"
                ]
            },
            {
                "key": "threat_class",
                "value": "URL Redirector Abuse"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/URL-Redirector-Abuse"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible for an attacker to use the web server to attack other sites, which increases his or her anonymity"
                ]
            },
            {
                "key": "issue_id",
                "value": "jsOpenRedirect"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "2"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:P/I:P/A:N",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "601"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "jsOpenRedirect"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_61400"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catURLRedirectoryAbuse"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "attackFacilitation"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "redirectionFromWithinSite"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "6.4",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information. An http parameter was found to hold a URL value and cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. The fact that the server name in the modified link is identical to the original site helps the attacker by giving his phishing attempts a more reliable appearance.",
        "issueName": "Open Redirect",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "jsOpenRedirect",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "116",
                "type": "cwe"
            },
            {
                "id": "601",
                "type": "cwe"
            },
            {
                "id": "89135",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Medium",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 6.4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@id": "6629776795387204352",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "1007445343"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/search.jsp"
                    },
                    {
                        "_raw_@id": "-5711107956867142656",
                        "_raw_entity": {
                            "ref": "-2105342084864231680"
                        },
                        "_raw_url": {
                            "ref": "-1782759758"
                        },
                        "entity_name": "content",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/index.jsp",
                        "url_name": "https://demo.testfire.net/index.jsp"
                    },
                    {
                        "_raw_@id": "-3444834840997817088",
                        "_raw_entity": {
                            "ref": "-6983105739602322944"
                        },
                        "_raw_url": {
                            "ref": "-372305121"
                        },
                        "entity_name": "email_addr",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/sendFeedback",
                        "url_name": "https://demo.testfire.net/sendFeedback"
                    },
                    {
                        "_raw_@id": "5114085902405409536",
                        "_raw_entity": {
                            "ref": "-4831459913268758016"
                        },
                        "_raw_url": {
                            "ref": "226819437"
                        },
                        "entity_name": "HostName",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/util/serverStatusCheckService.jsp",
                        "url_name": "https://demo.testfire.net/util/serverStatusCheckService.jsp"
                    },
                    {
                        "_raw_@id": "1289887454588249088",
                        "_raw_entity": {
                            "ref": "-4784596934833808640"
                        },
                        "_raw_url": {
                            "ref": "-372305121"
                        },
                        "entity_name": "name",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/sendFeedback",
                        "url_name": "https://demo.testfire.net/sendFeedback"
                    },
                    {
                        "_raw_@id": "-6184603581908167424",
                        "_raw_entity": {
                            "ref": "8787226202325719296"
                        },
                        "_raw_url": {
                            "ref": "437400969"
                        },
                        "entity_name": "query",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/search.jsp",
                        "url_name": "https://demo.testfire.net/bank/queryxpath.jsp"
                    },
                    {
                        "_raw_@id": "-3583375353343204352",
                        "_raw_entity": {
                            "ref": "-7168640119326840064"
                        },
                        "_raw_url": {
                            "ref": "-292871159"
                        },
                        "entity_name": "lang",
                        "entity_type": "Parameter",
                        "entity_url": "https://demo.testfire.net/bank/customize.jsp",
                        "url_name": "https://demo.testfire.net/bank/customize.jsp"
                    }
                ]
            },
            {
                "key": "fix_recommendation_raw",
                "value": {
                    "@id": "phishingInFrames",
                    "general": {
                        "fixRecommendation": {
                            "@type": "General",
                            "br": [
                                null,
                                null,
                                null,
                                null,
                                null
                            ],
                            "link": {
                                "#text": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet",
                                "@target": "http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"
                            },
                            "text": [
                                "There are several mitigation techniques:",
                                "[1] Strategy: Libraries or Frameworks",
                                "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                                "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                                "[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                                "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                                "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                                "[-] HTML body",
                                "[-] Element attributes (such as src=\"XYZ\")",
                                "[-] URIs",
                                "[-] JavaScript sections",
                                "[-] Cascading Style Sheets and style property",
                                "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                                "Consult the XSS Prevention Cheat Sheet",
                                "for more details on the types of encoding and escaping that are needed.",
                                "[3] Strategy: Identify and Reduce Attack Surface",
                                "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                                "[4] Strategy: Output Encoding",
                                "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                                "[5] Strategy: Identify and Reduce Attack Surface",
                                "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                                "[6] Strategy: Input Validation",
                                "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                                "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                                "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                                "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                                "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                                "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                            ]
                        }
                    }
                }
            },
            {
                "key": "fix_recommendation",
                "value": [
                    "There are several mitigation techniques:",
                    "[1] Strategy: Libraries or Frameworks",
                    "Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.",
                    "Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.",
                    "[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.",
                    "For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.",
                    "Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:",
                    "[-] HTML body",
                    "[-] Element attributes (such as src=\"XYZ\")",
                    "[-] URIs",
                    "[-] JavaScript sections",
                    "[-] Cascading Style Sheets and style property",
                    "Note that HTML Entity Encoding is only appropriate for the HTML body.",
                    "Consult the XSS Prevention Cheat Sheet",
                    "for more details on the types of encoding and escaping that are needed.",
                    "[3] Strategy: Identify and Reduce Attack Surface",
                    "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.",
                    "[4] Strategy: Output Encoding",
                    "For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.",
                    "[5] Strategy: Identify and Reduce Attack Surface",
                    "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.",
                    "[6] Strategy: Input Validation",
                    "Assume all input is malicious. Use an \"accept known good\" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.",
                    "When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as \"red\" or \"blue.\"",
                    "When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.",
                    "Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (\"<3\") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the \"<\" character, which would need to be escaped or otherwise handled. In this case, stripping the \"<\" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.",
                    "Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.",
                    "Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere."
                ]
            },
            {
                "key": "remediation_raw",
                "value": {
                    "@id": "fix_52000",
                    "name": "Review possible solutions for hazardous character injection",
                    "priority": "High",
                    "priority-id": "2"
                }
            },
            {
                "key": "remediation",
                "value": "Review possible solutions for hazardous character injection"
            },
            {
                "key": "advisory",
                "value": {
                    "@id": "phishingInFrames",
                    "advisory": {
                        "affectedProducts": {
                            "affectedProduct": "AffectedProduct_0"
                        },
                        "causes": {
                            "cause": "Cause_0"
                        },
                        "cwe": {
                            "link": {
                                "#text": "79",
                                "@id": "CWE-79",
                                "@target": "http://cwe.mitre.org/data/definitions/79.html"
                            }
                        },
                        "fixRecommendations": {
                            "fixRecommendation": {
                                "#text": "phishingInFrames",
                                "@type": "General"
                            }
                        },
                        "name": "Phishing Through Frames",
                        "references": {
                            "link": {
                                "#text": "FTC Consumer Alert - \"How Not to Get Hooked by a 'Phishing' Scam\"",
                                "@target": "http://www.ftc.gov/bcp/edu/pubs/consumer/alerts/alt127.shtm"
                            }
                        },
                        "securityRisks": {
                            "securityRisk": "phishing"
                        },
                        "testDescription": "Application-level test",
                        "testTechnicalDescription": {
                            "br": null,
                            "text": [
                                "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
                                "It is possible for an attacker to inject a frame or an iframe tag with malicious content. An incautious user may browse it and not realize that he is leaving the original site and surfing to a malicious site. The attacker may then lure the user to login again, thus acquiring his login credentials.",
                                "The fact that the fake site is embedded in the original site helps the attacker by giving his phishing attempts a more reliable appearance."
                            ]
                        },
                        "threatClassification": {
                            "name": "Content Spoofing",
                            "reference": "http://projects.webappsec.org/Content-Spoofing"
                        },
                        "xfid": {
                            "link": {
                                "#text": "52829",
                                "@id": "52829",
                                "@target": "https://exchange.xforce.ibmcloud.com/vulnerabilities/52829"
                            }
                        }
                    }
                }
            },
            {
                "key": "causes_raw",
                "value": [
                    {
                        "#text": "Sanitation of hazardous characters was not performed correctly on user input",
                        "@id": "Cause_0"
                    }
                ]
            },
            {
                "key": "causes",
                "value": [
                    "Sanitation of hazardous characters was not performed correctly on user input"
                ]
            },
            {
                "key": "threat_class",
                "value": "Content Spoofing"
            },
            {
                "key": "threat_class_href",
                "value": "http://projects.webappsec.org/Content-Spoofing"
            },
            {
                "key": "security_risks",
                "value": [
                    "It is possible to persuade a naive user to supply sensitive information such as username, password, credit card number, social security number etc."
                ]
            },
            {
                "key": "issue_id",
                "value": "phishingInFrames"
            },
            {
                "key": "key_values",
                "value": [
                    "issue_id"
                ]
            },
            {
                "key": "_raw_severity-id",
                "value": "2"
            },
            {
                "key": "_raw_cvss-vector",
                "value": {
                    "base-vector": "AV:N/AC:L/Au:N/C:N/I:P/A:P",
                    "environmental-vector": "CDP:ND/TD:ND/CR:ND/IR:ND/AR:ND",
                    "temporal-vector": "E:ND/RL:ND/RC:ND"
                }
            },
            {
                "key": "_raw_cwe",
                "value": "79"
            },
            {
                "key": "_raw_issue-type",
                "value": {
                    "ref": "phishingInFrames"
                }
            },
            {
                "key": "_raw_remediation",
                "value": {
                    "ref": "fix_52000"
                }
            },
            {
                "key": "_raw_threat-class",
                "value": {
                    "ref": "catContentSpoofing"
                }
            },
            {
                "key": "_raw_security-risks",
                "value": {
                    "ref": "phishing"
                }
            },
            {
                "key": "_raw_cause-id",
                "value": {
                    "ref": "hazardousCharactersNotSanitized"
                }
            },
            {
                "key": "_raw_user-image-group",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": "6.4",
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information. It is possible for an attacker to inject a frame or an iframe tag with malicious content. An incautious user may browse it and not realize that he is leaving the original site and surfing to a malicious site. The attacker may then lure the user to login again, thus acquiring his login credentials. The fact that the fake site is embedded in the original site helps the attacker by giving his phishing attempts a more reliable appearance.",
        "issueName": "Phishing Through Frames",
        "issueType": null,
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "phishingInFrames",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "app_scan",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "116",
                "type": "cwe"
            },
            {
                "id": "79",
                "type": "cwe"
            },
            {
                "id": "52829",
                "type": "xfid"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": "Medium",
        "scanStatus": null,
        "scanTool": "app_scan",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 6.4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    }
]