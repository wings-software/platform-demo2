[
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "48",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "53",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.customize_jsp",
                        "_raw_@sourcefile": "customize.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.sendRedirect",
                        "file_name": "/bank/customize.jsp",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "35",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "73",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "25",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.servlet.LoginServlet",
                        "_raw_@sourcefile": "LoginServlet.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/servlet/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/ibm/security/appscan/altoromutual/servlet/LoginServlet.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variable accountCookie. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "95",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-113"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "113"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "21"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-113",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "113",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void logError(java.lang.String)",
                        "_raw_@functionrelativelocation": "55",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "31",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.Log4AltoroJ",
                        "_raw_@sourcefile": "Log4AltoroJ.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/",
                        "_raw_@type": "org.apache.log4j.Category.error",
                        "file_name": "com/ibm/security/appscan/Log4AltoroJ.java",
                        "issue_description": "This call to org.apache.log4j.Category.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable error. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "40",
                        "module": "altoromutual.war/Log4AltoroJ.jar",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void logTransaction(java.lang.String, java.lang.String, double)",
                        "_raw_@functionrelativelocation": "94",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "7",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.Log4AltoroJ",
                        "_raw_@sourcefile": "Log4AltoroJ.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/ibm/security/appscan/Log4AltoroJ.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "55",
                        "module": "altoromutual.war/Log4AltoroJ.jar",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-117"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "117"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "21"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "npp"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to org.apache.log4j.Category.error() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error() contains tainted data from the variable error. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Output Neutralization for Logs",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-117",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "117",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@issueid": "86",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/",
                        "_raw_@vuln_parameter": "x-content-type-options header",
                        "file_name": "",
                        "issue_description": "The site demo.testfire.net:80 does not properly utilize the X-Content-Type-Options header. This header can be set to protect against MIME type confusion attacks in Internet Explorer versions 9 and higher, Chrome and Safari. Content sniffing is a method browsers use to attempt to determine the real content type of a response by looking at the content itself, instead of the response header's content-type value. By returning X-Content-Type-Options: nosniff, certain elements will only load external resources if their content-type matches what is expected. It should be noted this check was only executed against the first few pages of this site.\r\n\r\nSet the X-Content-Type-Options header to a value of \"nosniff\" (without quotes). It is recommended this header be set side wide by configuring your web or application server to return this value for all resources. More information on configuring this header can be found at https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers#xcto\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=16)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-16"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "0"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "16"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "27"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "zzz"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "false"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The site demo.testfire.net:80 does not properly utilize the X-Content-Type-Options header. This header can be set to protect against MIME type confusion attacks in Internet Explorer versions 9 and higher, Chrome and Safari. Content sniffing is a method browsers use to attempt to determine the real content type of a response by looking at the content itself, instead of the response header's content-type value. By returning X-Content-Type-Options: nosniff, certain elements will only load external resources if their content-type matches what is expected. It should be noted this check was only executed against the first few pages of this site.\r\n\r\nSet the X-Content-Type-Options header to a value of \"nosniff\" (without quotes). It is recommended this header be set side wide by configuring your web or application server to return this value for all resources. More information on configuring this header can be found at https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers#xcto\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=16)\r\n\r\n",
        "issueName": "Configuration",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-16",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "16",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "28",
                        "_raw_@issueid": "39",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp",
                        "_raw_@sourcefile": "admin.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/admin.jsp",
                        "issue_description": "The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.toString. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "line_number": "61",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "56",
                        "_raw_@issueid": "54",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.apply_jsp",
                        "_raw_@sourcefile": "apply.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/apply.jsp",
                        "issue_description": "The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "line_number": "38",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "64",
                        "_raw_@issueid": "28",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.index_jsp",
                        "_raw_@sourcefile": "index.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/index.jsp",
                        "issue_description": "The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable sanitzieHtmlWithRegex(). The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "line_number": "93",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "81",
                        "_raw_@issueid": "14",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.index_jsp",
                        "_raw_@sourcefile": "index.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/index.jsp",
                        "issue_description": "The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable sanitzieHtmlWithRegex(). The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "line_number": "103",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "56",
                        "_raw_@issueid": "37",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.login_jsp",
                        "_raw_@sourcefile": "login.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/login.jsp",
                        "issue_description": "The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "line_number": "40",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "52",
                        "_raw_@issueid": "13",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.notfound_jsp",
                        "_raw_@sourcefile": "notfound.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.println",
                        "file_name": "/notfound.jsp",
                        "issue_description": "The application calls the javax.servlet.jsp.JspWriter.println() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getMessage. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "line_number": "37",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-209"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "2"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "209"
            },
            {
                "key": "_raw_@categoryid",
                "value": "8"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "pnn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "false"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
        "issueName": "Generation of Error Message Containing Sensitive Information",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-209",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "209",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.sql.Connection getConnection(void)",
                        "_raw_@functionrelativelocation": "61",
                        "_raw_@issueid": "55",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "line_number": "119",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.sql.Connection getConnection(void)",
                        "_raw_@functionrelativelocation": "86",
                        "_raw_@issueid": "36",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "line_number": "127",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-245"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "2"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "245"
            },
            {
                "key": "_raw_@categoryid",
                "value": "7"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "nnp"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
        "issueName": "J2EE Bad Practices: Direct Management of Connections",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-245",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "245",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "97",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net/",
                        "_raw_@vuln_parameter": "NONE",
                        "file_name": "",
                        "issue_description": "The SSL certificate for altoromutual.com (CN=altoromutual.com, O=IBM, L=Ottawa, ST=Ontario, C=CA) on demo.testfire.net:443 has expired.\r\n\r\nObtain a new certificate and deploy it on your device or server.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=298)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-298"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "298"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "12"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The SSL certificate for altoromutual.com (CN=altoromutual.com, O=IBM, L=Ottawa, ST=Ontario, C=CA) on demo.testfire.net:443 has expired.\r\n\r\nObtain a new certificate and deploy it on your device or server.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=298)\r\n\r\n",
        "issueName": "Improper Validation of Certificate Expiration",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-298",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "298",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String makeRandomString(void)",
                        "_raw_@functionrelativelocation": "40",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "17",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.OperationsUtil",
                        "_raw_@sourcefile": "OperationsUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.util.Random.nextBytes",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/OperationsUtil.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "line_number": "148",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-331"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "331"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "12"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
        "issueName": "Insufficient Entropy",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-331",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "331",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "92",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/crossdomain.xml",
                        "_raw_@vuln_parameter": "JSESSIONID",
                        "file_name": "",
                        "issue_description": "The JSESSIONID cookie does not have the SameSite attribute set. Using this attribute helps protect against Cross-Site-Request-Forgery (CSRF) attacks, by restricting when cookies will be sent to the site. CSRF attacks are a class of confused deputy attacks that exploit the behavior of browsers always sending authorization cookies in requests.\r\n\r\nBy setting the SameSite attribute to 'Strict' or 'Lax' on security-related cookies, it is possible to prevent the web browser from sending cookies to the target site when form submissions or requests are initiated from third party sites. In Strict mode, under no circumstances can a third party site initiate requests with the cookie value being transmitted to the protected site. The cookie will only be sent in requests that originate from the same origin where the cookie was created. This effectively mitigates CSRF attacks provided cookies are set with the SameSite=Strict directive. The 'Lax' directive allows the cookie to be sent from third party sites for GET requests, but not POST, DELETE, or PUT requests. As such, it is recommended if the Lax directive is selected, it be used in combination with other Anti-CSRF measures. More information on CSRF protections and frameworks can be found on OWASP's website: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF). More information on the SameSite cookie attribute can be found at https://www.owasp.org/index.php/SameSite.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=352) \r\nOWASP (https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-352"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "352"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "4"
            },
            {
                "key": "_raw_@categoryid",
                "value": "11"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The JSESSIONID cookie does not have the SameSite attribute set. Using this attribute helps protect against Cross-Site-Request-Forgery (CSRF) attacks, by restricting when cookies will be sent to the site. CSRF attacks are a class of confused deputy attacks that exploit the behavior of browsers always sending authorization cookies in requests.\r\n\r\nBy setting the SameSite attribute to 'Strict' or 'Lax' on security-related cookies, it is possible to prevent the web browser from sending cookies to the target site when form submissions or requests are initiated from third party sites. In Strict mode, under no circumstances can a third party site initiate requests with the cookie value being transmitted to the protected site. The cookie will only be sent in requests that originate from the same origin where the cookie was created. This effectively mitigates CSRF attacks provided cookies are set with the SameSite=Strict directive. The 'Lax' directive allows the cookie to be sent from third party sites for GET requests, but not POST, DELETE, or PUT requests. As such, it is recommended if the Lax directive is selected, it be used in combination with other Anti-CSRF measures. More information on CSRF protections and frameworks can be found on OWASP's website: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF). More information on the SameSite cookie attribute can be found at https://www.owasp.org/index.php/SameSite.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=352) \r\nOWASP (https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))\r\n\r\n",
        "issueName": "Cross-Site Request Forgery (CSRF)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-352",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "352",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "53",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "23",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.search_jsp",
                        "_raw_@sourcefile": "search.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "getSession",
                        "file_name": "/search.jsp",
                        "issue_description": "The application calls getSession(), and never invalidates user sessions, which can lead to session fixation attacks. As a result, the session identifier stays the same before, during, and after a user has logged in or out. An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in.\r\n\r\nInvalidate any existing session after the user has authenticated but before calling methods that establish the UserPrincipal. Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/384.html) \r\nOWASP (https://www.owasp.org/index.php/Session_Fixation) \r\nWASC (https://webappsec.pbworks.com/Session-Fixation)\r\n\r\n",
                        "line_number": "35",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-384"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "384"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "15"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The application calls getSession(), and never invalidates user sessions, which can lead to session fixation attacks. As a result, the session identifier stays the same before, during, and after a user has logged in or out. An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in.\r\n\r\nInvalidate any existing session after the user has authenticated but before calling methods that establish the UserPrincipal. Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/384.html) \r\nOWASP (https://www.owasp.org/index.php/Session_Fixation) \r\nWASC (https://webappsec.pbworks.com/Session-Fixation)\r\n\r\n",
        "issueName": "Session Fixation",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-384",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "384",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.sql.Connection getConnection(void)",
                        "_raw_@issueid": "61",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable connection, which was previously allocated by a call to java.sql.DriverManager.getConnection().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "119",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.sql.Connection getConnection(void)",
                        "_raw_@functionrelativelocation": "86",
                        "_raw_@issueid": "83",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable connection, which was previously allocated by a call to java.sql.DriverManager.getConnection().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "127",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "void initDB()",
                        "_raw_@functionrelativelocation": "6",
                        "_raw_@issueid": "74",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "145",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.util.ArrayList getFeedback(long)",
                        "_raw_@functionrelativelocation": "8",
                        "_raw_@issueid": "84",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "178",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.util.ArrayList getFeedback(long)",
                        "_raw_@functionrelativelocation": "35",
                        "_raw_@issueid": "62",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "186",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "boolean isValidUser(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "37",
                        "_raw_@issueid": "76",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "217",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "boolean isValidUser(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "74",
                        "_raw_@issueid": "75",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "219",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.User getUserInfo(java.lang.String)",
                        "_raw_@functionrelativelocation": "16",
                        "_raw_@issueid": "73",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "241",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.User getUserInfo(java.lang.String)",
                        "_raw_@functionrelativelocation": "37",
                        "_raw_@issueid": "78",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "242",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.Account [] getAccounts(java.lang.String)",
                        "_raw_@issueid": "69",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "275",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.Account [] getAccounts(java.lang.String)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@issueid": "79",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "276",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String transferFunds(java.lang.String, long, long, double)",
                        "_raw_@functionrelativelocation": "3",
                        "_raw_@issueid": "68",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "305",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.Transaction [] getTransactions(java.lang.String, java.lang.String, model.Account  [], int)",
                        "_raw_@functionrelativelocation": "4",
                        "_raw_@issueid": "65",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "378",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.Transaction [] getTransactions(java.lang.String, java.lang.String, model.Account  [], int)",
                        "_raw_@functionrelativelocation": "69",
                        "_raw_@issueid": "77",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "403",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String [] getBankUsernames(void)",
                        "_raw_@functionrelativelocation": "12",
                        "_raw_@issueid": "63",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "428",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String [] getBankUsernames(void)",
                        "_raw_@functionrelativelocation": "23",
                        "_raw_@issueid": "70",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "431",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.Account getAccount(long)",
                        "_raw_@functionrelativelocation": "7",
                        "_raw_@issueid": "85",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "450",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "model.Account getAccount(long)",
                        "_raw_@functionrelativelocation": "31",
                        "_raw_@issueid": "72",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "451",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String addAccount(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "16",
                        "_raw_@issueid": "64",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "470",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String addSpecialUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "14",
                        "_raw_@issueid": "80",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "481",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String addUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "14",
                        "_raw_@issueid": "81",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "493",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "java.lang.String changePassword(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "16",
                        "_raw_@issueid": "82",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "505",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "long storeFeedback(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "9",
                        "_raw_@issueid": "71",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "518",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "52",
                        "_raw_@issueid": "67",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.index_jsp",
                        "_raw_@sourcefile": "index.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "java.io.BufferedReader.!operator_javanewinit",
                        "file_name": "/index.jsp",
                        "issue_description": "The program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.!operator_javanewinit().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "84",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-13 14:26:47 UTC",
                        "_raw_@functionprototype": "void initializeRestAPI(javax.servlet.ServletContext)",
                        "_raw_@functionrelativelocation": "68",
                        "_raw_@issueid": "66",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.ServletUtil",
                        "_raw_@sourcefile": "ServletUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.io.BufferedWriter.!operator_javanewinit",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/ServletUtil.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable swaggerWriter, which was previously allocated by a call to java.io.BufferedWriter.!operator_javanewinit().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "line_number": "396",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-404"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "0"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "404"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "17"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "zzz"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
        "issueName": "Improper Resource Shutdown or Release",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-404",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "404",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 0,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "87",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/doLogin",
                        "_raw_@vuln_parameter": "BODY",
                        "file_name": "",
                        "issue_description": "It has been observed that credentials are being sent over clear text channels when logging in to http://demo.testfire.net/doLogin.\r\n\r\nEnsure that credentials are transmitted over encrypted channels such as HTTPS.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=522)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-522"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "522"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "10"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "It has been observed that credentials are being sent over clear text channels when logging in to http://demo.testfire.net/doLogin.\r\n\r\nEnsure that credentials are transmitted over encrypted channels such as HTTPS.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=522)\r\n\r\n",
        "issueName": "Insufficiently Protected Credentials",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-522",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "522",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@issueid": "95",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/",
                        "_raw_@vuln_parameter": "Server: Apache-Coyote/1.1",
                        "file_name": "",
                        "issue_description": "HTTP response headers often contain information identifying technologies and version numbers that can be used by tools or attackers to target subsequent attacks. For , \"Server: Apache-Coyote/1.1\" was observed in the server response.\r\n\r\nTo suppress version information from Apache, set ServerTokens to prod. More information can be found at http://httpd.apache.org/docs/current/mod/core.html#servertokens. For Microsoft IIS versions earlier than 5.1 use Microsoft's URLScan found at http://support.microsoft.com/default.aspx?scid=kb;en-us;307608. For IIS version 5.1 and higher please use UrlScan 3.1 http://www.iis.net/downloads/microsoft/urlscan. For nginx remove the version information by setting \"server_tokens\" to \"off\" in the nginx configuration file. More information can be found at http://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens. For other services or devices, consult documentation to determine how to disable extraneous headers.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=526) \r\nMicrosoft (http://www.microsoft.com/technet/security/prodtech/IIS.mspx) \r\nOWASP (http://www.owasp.org/index.php/Testing_for_Web_Application_Fingerprint) \r\nWASC (http://webappsec.pbworks.com/Server-Misconfiguration)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-526"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "2"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "526"
            },
            {
                "key": "_raw_@categoryid",
                "value": "8"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "pnn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "HTTP response headers often contain information identifying technologies and version numbers that can be used by tools or attackers to target subsequent attacks. For , \"Server: Apache-Coyote/1.1\" was observed in the server response.\r\n\r\nTo suppress version information from Apache, set ServerTokens to prod. More information can be found at http://httpd.apache.org/docs/current/mod/core.html#servertokens. For Microsoft IIS versions earlier than 5.1 use Microsoft's URLScan found at http://support.microsoft.com/default.aspx?scid=kb;en-us;307608. For IIS version 5.1 and higher please use UrlScan 3.1 http://www.iis.net/downloads/microsoft/urlscan. For nginx remove the version information by setting \"server_tokens\" to \"off\" in the nginx configuration file. More information can be found at http://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens. For other services or devices, consult documentation to determine how to disable extraneous headers.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=526) \r\nMicrosoft (http://www.microsoft.com/technet/security/prodtech/IIS.mspx) \r\nOWASP (http://www.owasp.org/index.php/Testing_for_Web_Application_Fingerprint) \r\nWASC (http://webappsec.pbworks.com/Server-Misconfiguration)\r\n\r\n",
        "issueName": "Exposure of Sensitive Information Through Environmental Variables",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-526",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "526",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "48",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "52",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.customize_jsp",
                        "_raw_@sourcefile": "customize.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.sendRedirect",
                        "file_name": "/bank/customize.jsp",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\r\n\r\nAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/601.html) \r\nOWASP (https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) \r\nWASC (https://webappsec.pbworks.com/URL-Redirector-Abuse)\r\n\r\n",
                        "line_number": "35",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-601"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "601"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "25"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.http.HttpServletResponse.sendRedirect() contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.\r\n\r\nAlways validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/601.html) \r\nOWASP (https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) \r\nWASC (https://webappsec.pbworks.com/URL-Redirector-Abuse)\r\n\r\n",
        "issueName": "URL Redirection to Untrusted Site ('Open Redirect')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-601",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "601",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String [] searchArticles(java.lang.String, java.lang.String)",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "58",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.ServletUtil",
                        "_raw_@sourcefile": "ServletUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "javax.xml.parsers.DocumentBuilder.parse",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/ServletUtil.java",
                        "issue_description": "The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity (XXE) attack.\r\n\r\nConfigure the XML parser to disable external entity resolution.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/611.html) \r\nOWASP (https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md) \r\nWASC (https://webappsec.pbworks.com/XML-External-Entities)\r\n\r\n",
                        "line_number": "95",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-611"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "611"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "8"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity (XXE) attack.\r\n\r\nConfigure the XML parser to disable external entity resolution.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/611.html) \r\nOWASP (https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.md) \r\nWASC (https://webappsec.pbworks.com/XML-External-Entities)\r\n\r\n",
        "issueName": "Improper Restriction of XML External Entity Reference",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-611",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "611",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "73",
                        "_raw_@issueid": "45",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.servlet.LoginServlet",
                        "_raw_@sourcefile": "LoginServlet.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/servlet/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/ibm/security/appscan/altoromutual/servlet/LoginServlet.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/614.html) \r\nWASC (https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n",
                        "line_number": "95",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-614"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "2"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "614"
            },
            {
                "key": "_raw_@categoryid",
                "value": "12"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "pnn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "false"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/614.html) \r\nWASC (https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n",
        "issueName": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-614",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "614",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "88",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/crossdomain.xml",
                        "_raw_@vuln_parameter": "/crossdomain.xml",
                        "file_name": "",
                        "issue_description": "The product does not use a protection mechanism that provides sufficient defense against directed attacks against the product. Specifically, the site does not take appropriate measures to protect against UI redressing attacks (Clickjacking). It is possible to overlay the target page inside an IFRAME from an attacker's controlled web site. By doing so, they can attempt to trick a user into executing an unwarranted action without the user's knowledge or consent. More information on Clickjacking can be found on OWASP's website: https://www.owasp.org/index.php/Clickjacking.\r\n\r\nTo protect against Clickjacking, it is recommended that any page that contains forms which require a user to enter sensitive information use the X-Frame-Options header set to either DENY or SAMEORIGIN. More information on security headers can be found on Veracode's website: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/#xfo.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=693) \r\nOWASP (https://www.owasp.org/index.php/Clickjacking)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-693"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "693"
            },
            {
                "key": "_raw_@categoryid",
                "value": "22"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The product does not use a protection mechanism that provides sufficient defense against directed attacks against the product. Specifically, the site does not take appropriate measures to protect against UI redressing attacks (Clickjacking). It is possible to overlay the target page inside an IFRAME from an attacker's controlled web site. By doing so, they can attempt to trick a user into executing an unwarranted action without the user's knowledge or consent. More information on Clickjacking can be found on OWASP's website: https://www.owasp.org/index.php/Clickjacking.\r\n\r\nTo protect against Clickjacking, it is recommended that any page that contains forms which require a user to enter sensitive information use the X-Frame-Options header set to either DENY or SAMEORIGIN. More information on security headers can be found on Veracode's website: https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/#xfo.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=693) \r\nOWASP (https://www.owasp.org/index.php/Clickjacking)\r\n\r\n",
        "issueName": "Protection Mechanism Failure",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-693",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "693",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "94",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net/",
                        "_raw_@vuln_parameter": "NONE",
                        "file_name": "",
                        "issue_description": "TLSv1 is running on demo.testfire.net:443. This version of the TLSv1 protocol is outdated and suffers from multiple cryptographic flaws. Attackers situated between the victim and the target application could intercept sensitive traffic by exploiting Man In The Middle (MITM) attacks.\r\n\r\nTLSv1 should be completely disabled from the application server as it is no longer secure. For Apache 2.2.23 and newer, disable the TLSv1 protocols by changing the SSLProtocol line to \"SSLProtocol +TLSv1.1 +TLSv1.2\" for 2.2.22 and older, change the SSLProtocol line to \"SSLProtocol TLSv1.1\" in the Apache configuration file for your system. More information can be found at http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslprotocol. For Microsoft IIS 5.x/6.x/7.0, details for disabling TLSv1 can be found on the Microsoft web site http://support.microsoft.com/kb/187498. For F5 devices, follow the steps outlined in http://support.f5.com/kb/en-us/solutions/public/6000/700/sol6768.html according to your version. For nginx, set the ssl_protocols line to: \"ssl_protocols TLSv1.1 TLSv1.2\" in the nginx.conf file. More information on SSL in nginx can be found at http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_protocols. For other services or devices, consult documentation to determine how to disable TLSv1.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=757)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-757"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@cweid",
                "value": "757"
            },
            {
                "key": "_raw_@categoryid",
                "value": "27"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "TLSv1 is running on demo.testfire.net:443. This version of the TLSv1 protocol is outdated and suffers from multiple cryptographic flaws. Attackers situated between the victim and the target application could intercept sensitive traffic by exploiting Man In The Middle (MITM) attacks.\r\n\r\nTLSv1 should be completely disabled from the application server as it is no longer secure. For Apache 2.2.23 and newer, disable the TLSv1 protocols by changing the SSLProtocol line to \"SSLProtocol +TLSv1.1 +TLSv1.2\" for 2.2.22 and older, change the SSLProtocol line to \"SSLProtocol TLSv1.1\" in the Apache configuration file for your system. More information can be found at http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslprotocol. For Microsoft IIS 5.x/6.x/7.0, details for disabling TLSv1 can be found on the Microsoft web site http://support.microsoft.com/kb/187498. For F5 devices, follow the steps outlined in http://support.f5.com/kb/en-us/solutions/public/6000/700/sol6768.html according to your version. For nginx, set the ssl_protocols line to: \"ssl_protocols TLSv1.1 TLSv1.2\" in the nginx.conf file. More information on SSL in nginx can be found at http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_protocols. For other services or devices, consult documentation to determine how to disable TLSv1.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=757)\r\n\r\n",
        "issueName": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-757",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "757",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "42",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.index_jsp",
                        "_raw_@sourcefile": "index.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "java.lang.Runtime.exec",
                        "file_name": "/index.jsp",
                        "issue_description": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
                        "line_number": "65",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-78"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "5"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "78"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "3"
            },
            {
                "key": "_raw_@categoryid",
                "value": "18"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ccp"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
        "issueName": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-78",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "78",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 10,
        "severityCode": "Critical",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "41",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "19",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp",
                        "_raw_@sourcefile": "admin.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/admin.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "90",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "46",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "15",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp",
                        "_raw_@sourcefile": "admin.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/admin.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "90",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "67",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "12",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp",
                        "_raw_@sourcefile": "admin.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/admin.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "126",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "62",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "33",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp",
                        "_raw_@sourcefile": "admin.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/admin.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "126",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "32",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "35",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.balance_jsp",
                        "_raw_@sourcefile": "balance.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/balance.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable accountName. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, javax.servlet.http.HttpServletRequest.getCookies, and javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "57",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "44",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.balance_jsp",
                        "_raw_@sourcefile": "balance.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.println",
                        "file_name": "/bank/balance.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "72",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "76",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "49",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.balance_jsp",
                        "_raw_@sourcefile": "balance.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/balance.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable transaction.getTransactionType(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "111",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "59",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "60",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.customize_jsp",
                        "_raw_@sourcefile": "customize.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/customize.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "44",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "64",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "46",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedback_jsp",
                        "_raw_@sourcefile": "feedback.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedback.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "59",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "48",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp",
                        "_raw_@sourcefile": "feedbackReview.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/feedbackReview.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.get().getName(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "51",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "49",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "10",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp",
                        "_raw_@sourcefile": "feedbackReview.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/feedbackReview.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.get().getEmail(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "55",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "56",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "18",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp",
                        "_raw_@sourcefile": "feedbackReview.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/feedbackReview.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.get().getSubject(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "59",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "62",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp",
                        "_raw_@sourcefile": "feedbackReview.jsp",
                        "_raw_@sourcefilepath": "/admin/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/admin/feedbackReview.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.get().getMessage(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "63",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "26",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "57",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "42",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "40",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "29",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable sanitzieHtmlWithRegex(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "46",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "34",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable sanitzieHtmlWithRegex(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "48",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "65",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "41",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.getName(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "74",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "69",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "43",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.getEmail(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "78",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "72",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "11",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.getSubject(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "82",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "76",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "47",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp",
                        "_raw_@sourcefile": "feedbacksuccess.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/feedbacksuccess.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable feedbackDetails.getMessage(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "86",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "59",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "32",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.index_jsp",
                        "_raw_@sourcefile": "index.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/index.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable text. The tainted data originated from earlier calls to java.lang.Process.getInputStream, and java.lang.Process.getErrorStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "91",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "6",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.main_jsp",
                        "_raw_@sourcefile": "main.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/main.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "36",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "65",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "20",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.main_jsp",
                        "_raw_@sourcefile": "main.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.println",
                        "file_name": "/bank/main.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "51",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "29",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "51",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.queryxpath_jsp",
                        "_raw_@sourcefile": "queryxpath.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/queryxpath.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable request.getRequestURL(). The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "32",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "26",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.queryxpath_jsp",
                        "_raw_@sourcefile": "queryxpath.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/queryxpath.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "36",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "59",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "2",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.search_jsp",
                        "_raw_@sourcefile": "search.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/search.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "44",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "21",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.util.serverStatusCheckService_jsp",
                        "_raw_@sourcefile": "serverStatusCheckService.jsp",
                        "_raw_@sourcefilepath": "/util/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/util/serverStatusCheckService.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable request.getParameter(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "4",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "52",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "16",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.subscribe_jsp",
                        "_raw_@sourcefile": "subscribe.jsp",
                        "_raw_@sourcefilepath": "/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/subscribe.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "40",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@functionprototype": "void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "96",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "8",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.servlet.SurveyServlet",
                        "_raw_@sourcefile": "SurveyServlet.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/servlet/",
                        "_raw_@type": "java.io.PrintWriter.write",
                        "file_name": "com/ibm/security/appscan/altoromutual/servlet/SurveyServlet.java",
                        "issue_description": "This call to java.io.PrintWriter.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable content. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "101",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "38",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.transaction_jsp",
                        "_raw_@sourcefile": "transaction.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/transaction.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "126",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "44",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "22",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.transaction_jsp",
                        "_raw_@sourcefile": "transaction.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/transaction.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "128",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "72",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "59",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.transaction_jsp",
                        "_raw_@sourcefile": "transaction.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/bank/transaction.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable transactions.getTransactionType(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "148",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "9",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.transfer_jsp",
                        "_raw_@sourcefile": "transfer.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.println",
                        "file_name": "/bank/transfer.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "70",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "62",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "4",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.veracode.compiledjsp.xaltoromutualwar.bank.transfer_jsp",
                        "_raw_@sourcefile": "transfer.jsp",
                        "_raw_@sourcefilepath": "/bank/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.println",
                        "file_name": "/bank/transfer.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.println() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "line_number": "82",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "91",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/search.jsp?query=vcode%22%3Cscript%3Evc0d3%283960413529%29%3C%2Fscript%3E%22",
                        "_raw_@vuln_parameter": "<INPUT accesskey='S' id='query' name='query' type='text'></INPUT>",
                        "file_name": "",
                        "issue_description": "It is possible to execute Javascript code by entering a payload such as vcode\"vc0d3(3960413529)\" into the following input field  located at http://demo.testfire.net/. This attack was carried out via text entry in a web browser. This type of vulnerability can be exploited by a malicious third party convincing a user to cut and paste untrusted data into their browser or via compromised client-side tools, such as browser extensions. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "98",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/search.jsp?query=vcode%22%3Cscript%3Evc0d3(7603558784)%3C/script%3E%22",
                        "_raw_@vuln_parameter": "query",
                        "file_name": "",
                        "issue_description": "It is possible to execute Javascript code by injecting a payload such as vcode\"vc0d3(7603558784)\" into the query parameter at http://demo.testfire.net/search.jsp?query=vcode. This attack was carried out via a direct navigation to a URL, a method commonly used in phishing emails and other scenarios where an embedded hyperlink can be clicked by a user, thereby initiating a navigation to the URL by the user's default web browser. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "89",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/sendFeedback",
                        "_raw_@vuln_parameter": "<INPUT name='name' size='25' type='text' value=''></INPUT>",
                        "file_name": "",
                        "issue_description": "It is possible to execute Javascript code by entering a payload such as Dynamic Scanner\"vc0d3(2348266336)\" into the following input field  located at http://demo.testfire.net/feedback.jsp. This attack was carried out via text entry in a web browser. This type of vulnerability can be exploited by a malicious third party convincing a user to cut and paste untrusted data into their browser or via compromised client-side tools, such as browser extensions. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "90",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/sendFeedback",
                        "_raw_@vuln_parameter": "name",
                        "file_name": "",
                        "issue_description": "It is possible to inject arbitrary HTML tags such as 1vc0d3(9437249531) into the name parameter on http://demo.testfire.net/sendFeedback which can result in script code being executed on http://demo.testfire.net/sendFeedback. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-04-14 20:05:52 UTC",
                        "_raw_@grace_period_expires": "2020-04-14 20:09:14 UTC",
                        "_raw_@issueid": "96",
                        "_raw_@remediation_status": "New",
                        "_raw_@url": "http://demo.testfire.net:80/util/serverStatusCheckService.jsp?HostName=AltoroMutual%3Cimg+src%3Dx+onerror%3Dvc0d3%283593169600%29%3E",
                        "_raw_@vuln_parameter": "HostName",
                        "file_name": "",
                        "issue_description": "It is possible to inject arbitrary HTML tags such as AltoroMutual into the HostName parameter on http://demo.testfire.net/util/serverStatusCheckService.jsp?HostName=AltoroMutual which can result in script code being executed on http://demo.testfire.net/util/serverStatusCheckService.jsp?HostName=AltoroMutual. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet.\r\n\r\n\r\nCWE (http://cwe.mitre.org/cgi-bin/jumpmenu.cgi?id=80) \r\nOWASP (http://www.owasp.org/index.php/XSS) \r\nWASC (http://webappsec.pbworks.com/Cross-Site-Scripting)\r\n\r\n",
                        "module": "dynamic_analysis",
                        "scan_type": "DAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-80"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "80"
            },
            {
                "key": "_raw_@categoryid",
                "value": "20"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-80",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "80",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "boolean isValidUser(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "74",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "5",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, javax.servlet.http.HttpServletRequest.getHeader, and AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "219",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "model.User getUserInfo(java.lang.String)",
                        "_raw_@functionrelativelocation": "37",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "40",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and javax.servlet.http.HttpServletRequest.getHeader.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "242",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "model.Account [] getAccounts(java.lang.String)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and javax.servlet.http.HttpServletRequest.getHeader.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "276",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "model.Transaction [] getTransactions(java.lang.String, java.lang.String, model.Account  [], int)",
                        "_raw_@functionrelativelocation": "69",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "27",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "403",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "java.lang.String addAccount(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "76",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "50",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "471",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "java.lang.String addUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "80",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "30",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "494",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "java.lang.String changePassword(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "76",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "24",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "506",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    },
                    {
                        "_raw_@date_first_occurrence": "2020-03-20 14:37:04 UTC",
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "long storeFeedback(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "53",
                        "_raw_@grace_period_expires": "2020-03-20 14:49:20 UTC",
                        "_raw_@issueid": "56",
                        "_raw_@remediation_status": "Open",
                        "_raw_@scope": "com.ibm.security.appscan.altoromutual.util.DBUtil",
                        "_raw_@sourcefile": "DBUtil.java",
                        "_raw_@sourcefilepath": "com/ibm/security/appscan/altoromutual/util/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/ibm/security/appscan/altoromutual/util/DBUtil.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "line_number": "519",
                        "module": "altoromutual.war",
                        "scan_type": "SAST"
                    }
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-89"
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "_raw_@severity",
                "value": "4"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "89"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "3"
            },
            {
                "key": "_raw_@categoryid",
                "value": "19"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppp"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
        "issueName": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-89",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "89",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 8,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "file_name": {
                            "@value": "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/commons-codec-1.6.jar"
                        },
                        "issue_description": "commons-codec does not properly perform input validation on encoded values. The `decode()` function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate.",
                        "scan_type": "SCA"
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/commons-codec-1.6.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "vendor",
                "value": "commons-codec"
            },
            {
                "key": "added_date",
                "value": "2020-03-20 14:38:21 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "a3a0cab2-1963-4a1b-b24d-7aaa7a7fd9e4"
            },
            {
                "key": "_raw_@file_name",
                "value": "commons-codec-1.6.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "b7f0fc8f61ecadeb3695f0b9464755eee44374d4"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "5.0"
            },
            {
                "key": "_raw_@description",
                "value": "The codec package contains simple encoder and decoders for\n     various formats such as Base64 and Hexadecimal.  In addition to these\n     widely used encoders and decoders, the codec package also maintains a\n     collection of phonetic encoding utilities."
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/commons-codec-1.6.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "SRCCLR-SID-22742",
                        "@cve_summary": "commons-codec does not properly perform input validation on encoded values. The `decode()` function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate.",
                        "@cvss_score": "5.0",
                        "@cwe_id": "",
                        "@first_found_date": "2020-03-20 14:38:21 UTC",
                        "@mitigation": "false",
                        "@severity": "3",
                        "@severity_desc": "Medium",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            },
            {
                "key": "_raw_@cve_id",
                "value": "SRCCLR-SID-22742"
            },
            {
                "key": "_raw_@severity",
                "value": "3"
            },
            {
                "key": "_raw_@cwe_id",
                "value": ""
            },
            {
                "key": "_raw_@severity_desc",
                "value": "Medium"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "1.6",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "commons-codec does not properly perform input validation on encoded values. The `decode()` function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate.",
        "issueName": "SRCCLR-SID-22742 - (commons-codec, commons-codec, 1.6)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "commons-codec//1.6",
        "libraryName": "commons-codec",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "file_name": {
                            "@value": "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/derby-10.8.2.2.jar"
                        },
                        "issue_description": "XML external entity (XXE) vulnerability in the SqlXmlUtil code in Apache Derby before 10.12.1.1, when a Java Security Manager is not in place, allows context-dependent attackers to read arbitrary files or cause a denial of service (resource consumption) via vectors involving XmlVTI and the XML datatype.",
                        "scan_type": "SCA"
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/derby-10.8.2.2.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "vendor",
                "value": "org.apache.derby"
            },
            {
                "key": "added_date",
                "value": "2020-03-20 14:38:21 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "23e72062-d9a0-4f63-9c14-c087e2851bf9"
            },
            {
                "key": "_raw_@file_name",
                "value": "derby-10.8.2.2.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "5a9efbb610bd0dbf0ea404523319211f0603e4dc"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "6.4"
            },
            {
                "key": "_raw_@description",
                "value": "Contains the core Apache Derby database engine, which also includes the embedded JDBC driver."
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/derby-10.8.2.2.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "CVE-2015-1832",
                        "@cve_summary": "XML external entity (XXE) vulnerability in the SqlXmlUtil code in Apache Derby before 10.12.1.1, when a Java Security Manager is not in place, allows context-dependent attackers to read arbitrary files or cause a denial of service (resource consumption) via vectors involving XmlVTI and the XML datatype.",
                        "@cvss_score": "6.4",
                        "@cwe_id": "CWE-611",
                        "@first_found_date": "2020-03-20 14:38:21 UTC",
                        "@mitigation": "false",
                        "@severity": "4",
                        "@severity_desc": "High",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            },
            {
                "key": "_raw_@cve_id",
                "value": "CVE-2015-1832"
            },
            {
                "key": "_raw_@severity",
                "value": "4"
            },
            {
                "key": "_raw_@cwe_id",
                "value": "CWE-611"
            },
            {
                "key": "_raw_@severity_desc",
                "value": "High"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "10.8.2.2",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "XML external entity (XXE) vulnerability in the SqlXmlUtil code in Apache Derby before 10.12.1.1, when a Java Security Manager is not in place, allows context-dependent attackers to read arbitrary files or cause a denial of service (resource consumption) via vectors involving XmlVTI and the XML datatype.",
        "issueName": "CVE-2015-1832 - (org.apache.derby, derby, 10.8.2.2)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "derby//10.8.2.2",
        "libraryName": "derby",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2015-1832",
                "type": "cve"
            },
            {
                "id": "611",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 8,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "file_name": {
                            "@value": "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/log4j-1.2.16.jar"
                        },
                        "issue_description": "log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in `TcpSocketServer` and `UdpSocketServer` when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget.",
                        "scan_type": "SCA"
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/log4j-1.2.16.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "6936241"
            },
            {
                "key": "vendor",
                "value": "log4j"
            },
            {
                "key": "added_date",
                "value": "2020-03-20 14:38:21 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "89c91b56-881d-420c-b837-22069ee19503"
            },
            {
                "key": "_raw_@file_name",
                "value": "log4j-1.2.16.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "7999a63bfccbc7c247a9aea10d83d4272bd492c6"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "7.5"
            },
            {
                "key": "_raw_@description",
                "value": "Apache Log4j 1.2"
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1586899983472_zip/build/libs/altoromutual.war#zip:WEB-INF/lib/log4j-1.2.16.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "CVE-2019-17571",
                        "@cve_summary": "log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in `TcpSocketServer` and `UdpSocketServer` when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget.",
                        "@cvss_score": "7.5",
                        "@cwe_id": "",
                        "@first_found_date": "2020-03-20 14:38:21 UTC",
                        "@mitigation": "false",
                        "@severity": "4",
                        "@severity_desc": "High",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            },
            {
                "key": "_raw_@cve_id",
                "value": "CVE-2019-17571"
            },
            {
                "key": "_raw_@severity",
                "value": "4"
            },
            {
                "key": "_raw_@cwe_id",
                "value": ""
            },
            {
                "key": "_raw_@severity_desc",
                "value": "High"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "1.2.16",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in `TcpSocketServer` and `UdpSocketServer` when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget.",
        "issueName": "CVE-2019-17571 - (log4j, log4j, 1.2.16)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "log4j//1.2.16",
        "libraryName": "log4j",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2019-17571",
                "type": "cve"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": null,
        "scenarioId": "8207742350716442876",
        "severity": 8,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    }
]