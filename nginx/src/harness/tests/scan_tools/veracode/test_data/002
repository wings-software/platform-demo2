<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http&#x3a;&#x2f;&#x2f;www.w3.org&#x2f;2001&#x2f;XMLSchema-instance"
   xmlns="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0" xsi:schemaLocation="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0 https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;resource&#x2f;detailedreport.xsd" report_format_version="1.5" account_id="58169" app_name="cybric-fJBIKrb-Rpa8KgnBQDvefg-AltoroJ-ZN-pipeline" app_id="750050" analysis_id="6913738" static_analysis_unit_id="6929901" sandbox_id="1936399" first_build_submitted_date="2020-03-20 14&#x3a;46&#x3a;19 UTC" version="14 Apr 2020 Static &#x28;2&#x29;" build_id="6936241" submitter="Patrick Hayes" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2020-05-19 15&#x3a;22&#x3a;39 UTC" veracode_level="VL1" total_flaws="97" flaws_not_mitigated="97" teams="" life_cycle_stage="Not Specified" planned_deployment_date="" last_update_time="2020-04-14 21&#x3a;40&#x3a;33 UTC" is_latest_build="true" policy_name="Veracode Recommended Very High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
   <static-analysis rating="D" score="76" submitted_date="2020-04-14 21&#x3a;38&#x3a;46 UTC" published_date="2020-04-14 21&#x3a;40&#x3a;32 UTC" version="14 Apr 2020 Static &#x28;2&#x29;" next_scan_due="2020-07-14 21&#x3a;40&#x3a;32 UTC" analysis_size_bytes="8397606" engine_version="20200312190322">
      <modules>
         <module name="altoromutual.war" compiler="JAVAC_8" os="Java J2SE 8" architecture="JVM" loc="7397" score="76" numflawssev0="25" numflawssev1="0" numflawssev2="9" numflawssev3="42" numflawssev4="8" numflawssev5="1"/>
      </modules>
   </static-analysis>
   <dynamic-analysis rating="B" score="96" submitted_date="2020-04-14 20&#x3a;05&#x3a;53 UTC" published_date="2020-04-14 20&#x3a;09&#x3a;14 UTC" version="AltoroJ" dynamic_scan_type="ds" scan_exit_status_id="13" scan_exit_status_desc="min_priority">
      <modules>
         <module name="dynamic_analysis" compiler="Unknown" os="" architecture="" loc="0" score="96" numflawssev0="1" numflawssev1="0" numflawssev2="1" numflawssev3="10" numflawssev4="0" numflawssev5="0" target_url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;" domain="InternetDomainName&#x7b;name&#x3d;testfire.net&#x7d;"/>
      </modules>
   </dynamic-analysis>
   <severity level="5">
      <category categoryid="18" categoryname="OS Command Injection" pcirelated="true">
         <desc>
            <para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have."/>
         </desc>
         <recommendations>
            <para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
               <bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command."/>
            </para>
         </recommendations>
         <cwe cweid="78" cwename="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864" certc="1165" certcpp="875" certjava="1134">
            <description>
               <text text="This call contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="42" module="altoromutual.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data from the variables &#x28;new String&#x5c;&#x5b;...&#x5c;&#x5d;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="2" categoryid="18" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ccp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.jsp" line="65" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.index_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="4">
      <category categoryid="19" categoryname="SQL Injection" pcirelated="true">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded &#x28;&#x25;xx&#x29;, HTML-encoded &#x28;&#x26;&#x23;xx&#x3b;&#x29;, or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="5" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, javax.servlet.http.HttpServletRequest.getHeader, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="219" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="boolean isValidUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="74"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="40" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and javax.servlet.http.HttpServletRequest.getHeader.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="242" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.User getUserInfo&#x28;java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="1" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to javax.servlet.ServletRequest.getParameter, and javax.servlet.http.HttpServletRequest.getHeader.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="276" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Account &#x5b;&#x5d; getAccounts&#x28;java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="27" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="403" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Transaction &#x5b;&#x5d; getTransactions&#x28;java.lang.String, java.lang.String, model.Account  &#x5b;&#x5d;, int&#x29;" functionrelativelocation="69"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="50" module="altoromutual.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="471" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String addAccount&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="76"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="30" module="altoromutual.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="494" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String addUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="80"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="24" module="altoromutual.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="506" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String changePassword&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="76"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="56" module="altoromutual.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="2" categoryid="19" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="519" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="long storeFeedback&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="53"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3">
      <category categoryid="11" categoryname="Authentication Issues" pcirelated="false">
         <desc>
            <para text="Authentication is the process of attempting to verify the digital identity of the sender of a communication such as a request to login to an application. Authentication is a way to ensure users are who they claim to be and that the user who attempts to perform functions in a system is in fact the user who is authorized to do so.  When an application does not properly ensure that the user has proven their identity or provides a way to bypass or circumvent the authentication process, the security of the application is compromised."/>
         </desc>
         <recommendations>
            <para text="When using password systems, implement strong password complexity requirements to evade brute force attacks, and ensure that accounts with default or predictable credentials are removed from production systems.  Re-authenticate users for high-value transactions and access to protected areas.  Use the most appropriate form of authentication for the assets being protected, e.g. multi-factor authentication for high assurance applications."/>
         </recommendations>
         <cwe cweid="352" cwename="Cross-Site Request Forgery &#x28;CSRF&#x29;" pcirelated="false" sans="864">
            <description>
               <text text="It is possible to trick a user into executing potentially dangerous actions against the target site due to a lack of Cross-Site-Request-Forgery &#x28;CSRF&#x29; protections. CSRF attacks are a class of confused deputy attacks that exploit the behavior of browsers always sending authorization cookies in requests. The target site has no secure way of verifying the request was initiated from a link on a trusted domain."/>
            </description>
            <dynamicflaws>
               <flaw severity="3" categoryname="Cross-Site Request Forgery &#x28;CSRF&#x29;" count="1" issueid="92" module="dynamic_analysis" type="Cross-Site Request Forgery &#x28;CSRF&#x29;" description="The JSESSIONID cookie does not have the SameSite attribute set. Using this attribute helps protect against Cross-Site-Request-Forgery &#x28;CSRF&#x29; attacks, by restricting when cookies will be sent to the site. CSRF attacks are a class of confused deputy attacks that exploit the behavior of browsers always sending authorization cookies in requests.&#xd;&#xa;&#xd;&#xa;By setting the SameSite attribute to &#x27;Strict&#x27; or &#x27;Lax&#x27; on security-related cookies, it is possible to prevent the web browser from sending cookies to the target site when form submissions or requests are initiated from third party sites. In Strict mode, under no circumstances can a third party site initiate requests with the cookie value being transmitted to the protected site. The cookie will only be sent in requests that originate from the same origin where the cookie was created. This effectively mitigates CSRF attacks provided cookies are set with the SameSite&#x3d;Strict directive. The &#x27;Lax&#x27; directive allows the cookie to be sent from third party sites for GET requests, but not POST, DELETE, or PUT requests. As such, it is recommended if the Lax directive is selected, it be used in combination with other Anti-CSRF measures. More information on CSRF protections and frameworks can be found on OWASP&#x27;s website&#x3a; https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Cross-Site_Request_Forgery_&#x28;CSRF&#x29;. More information on the SameSite cookie attribute can be found at https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SameSite.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;352&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Cross-Site_Request_Forgery_&#x28;CSRF&#x29;&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="352" remediationeffort="4" categoryid="11" pcirelated="false" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;crossdomain.xml" vuln_parameter="JSESSIONID"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="21" categoryname="CRLF Injection" pcirelated="true">
         <desc>
            <para text="The acronym CRLF stands for &#x22;Carriage Return, Line Feed&#x22; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
         </desc>
         <recommendations>
            <para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
         </recommendations>
         <cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" pcirelated="true" owasp="1027">
            <description>
               <text text="A function call contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="53" module="altoromutual.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="customize.jsp" line="35" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.customize_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="48"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="25" module="altoromutual.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable accountCookie. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoginServlet.java" line="95" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;servlet&#x2f;" scope="com.ibm.security.appscan.altoromutual.servlet.LoginServlet" functionprototype="void doPost&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73"/>
            </staticflaws>
         </cwe>
         <cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="1027" certjava="1134">
            <description>
               <text text="A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="31" module="altoromutual.war&#x2f;Log4AltoroJ.jar" type="org.apache.log4j.Category.error" description="This call to org.apache.log4j.Category.error&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to error&#x28;&#x29; contains tainted data from the variable error. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Log4AltoroJ.java" line="40" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;" scope="com.ibm.security.appscan.Log4AltoroJ" functionprototype="void logError&#x28;java.lang.String&#x29;" functionrelativelocation="55"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="7" module="altoromutual.war&#x2f;Log4AltoroJ.jar" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Log4AltoroJ.java" line="55" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;" scope="com.ibm.security.appscan.Log4AltoroJ" functionprototype="void logTransaction&#x28;java.lang.String, java.lang.String, double&#x29;" functionrelativelocation="94"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="10" categoryname="Credentials Management" pcirelated="true">
         <desc>
            <para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project&#x27;s developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
            <para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &#x22;secret,&#x22; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
         </desc>
         <recommendations>
            <para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
         </recommendations>
         <cwe cweid="522" cwename="Insufficiently Protected Credentials" pcirelated="true" owasp="1028">
            <description>
               <text text="This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and&#x2f;or retrieval.  In addition to a username&#x2f;password, credentials may also be an artifact of the authentication process such as a session identifier, which, once issued, becomes an authentication token for as long as it is valid."/>
            </description>
            <dynamicflaws>
               <flaw severity="3" categoryname="Insufficiently Protected Credentials" count="1" issueid="87" module="dynamic_analysis" type="Insufficiently Protected Credentials" description="It has been observed that credentials are being sent over clear text channels when logging in to http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;doLogin.&#xd;&#xa;&#xd;&#xa;Ensure that credentials are transmitted over encrypted channels such as HTTPS.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;522&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="522" remediationeffort="2" categoryid="10" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;doLogin" vuln_parameter="BODY"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
         <desc>
            <para text="Cross-site scripting &#x28;XSS&#x29; attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient &#x28;often referred to as stored and reflected, respectively&#x29;.  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient&#x3b; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code &#x28;a common technique in Web 2.0 applications&#x29;, additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" pcirelated="true" owasp="1033" sans="79">
            <description>
               <text text="This call contains a cross-site scripting &#x28;XSS&#x29; flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="19" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="90" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="41"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="15" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="90" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="46"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="12" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="126" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="33" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable user. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="126" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="35" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable accountName. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, javax.servlet.http.HttpServletRequest.getCookies, and javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="balance.jsp" line="57" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.balance_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="32"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="44" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="balance.jsp" line="72" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.balance_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="49" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable transaction.getTransactionType&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="balance.jsp" line="111" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.balance_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="76"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="60" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="customize.jsp" line="44" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.customize_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="46" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedback.jsp" line="59" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedback_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="48" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.get&#x28;&#x29;.getName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbackReview.jsp" line="51" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="10" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.get&#x28;&#x29;.getEmail&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbackReview.jsp" line="55" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="49"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="18" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.get&#x28;&#x29;.getSubject&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbackReview.jsp" line="59" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="3" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.get&#x28;&#x29;.getMessage&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbackReview.jsp" line="63" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.feedbackReview_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="57" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="42" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="26"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="29" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable sanitzieHtmlWithRegex&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="46" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="40"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="34" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable sanitzieHtmlWithRegex&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="48" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="48"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="41" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.getName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="74" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="43" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.getEmail&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="78" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="69"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="11" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.getSubject&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="82" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="47" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable feedbackDetails.getMessage&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feedbacksuccess.jsp" line="86" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.feedbacksuccess_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="76"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="32" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable text. The tainted data originated from earlier calls to java.lang.Process.getInputStream, and java.lang.Process.getErrorStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.jsp" line="91" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.index_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="6" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main.jsp" line="36" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="20" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="main.jsp" line="51" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.main_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="65"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="51" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable request.getRequestURL&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getRequestURL. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="queryxpath.jsp" line="32" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.queryxpath_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="26" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="queryxpath.jsp" line="36" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.queryxpath_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="2" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.jsp" line="44" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.search_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="21" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable request.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="serverStatusCheckService.jsp" line="4" sourcefilepath="&#x2f;util&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.util.serverStatusCheckService_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="16" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="subscribe.jsp" line="40" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.subscribe_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="8" module="altoromutual.war" type="java.io.PrintWriter.write" description="This call to java.io.PrintWriter.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable content. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="SurveyServlet.java" line="101" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;servlet&#x2f;" scope="com.ibm.security.appscan.altoromutual.servlet.SurveyServlet" functionprototype="void doGet&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="96"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="38" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="transaction.jsp" line="126" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.transaction_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="22" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="transaction.jsp" line="128" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.transaction_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="44"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="59" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable transactions.getTransactionType&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="transaction.jsp" line="148" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.transaction_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="72"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="9" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="transfer.jsp" line="70" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.transfer_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="4" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.println" description="This call to javax.servlet.jsp.JspWriter.println&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to println&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getCookies. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="transfer.jsp" line="82" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.transfer_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
            </staticflaws>
            <dynamicflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="91" module="dynamic_analysis" type="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" description="It is possible to execute Javascript code by entering a payload such as vcode&#x22;vc0d3&#x28;3960413529&#x29;&#x22; into the following input field  located at http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;. This attack was carried out via text entry in a web browser. This type of vulnerability can be exploited by a malicious third party convincing a user to cut and paste untrusted data into their browser or via compromised client-side tools, such as browser extensions. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;80&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;search.jsp&#x3f;query&#x3d;vcode&#x25;22&#x25;3Cscript&#x25;3Evc0d3&#x25;283960413529&#x25;29&#x25;3C&#x25;2Fscript&#x25;3E&#x25;22" vuln_parameter="&#x3c;INPUT accesskey&#x3d;&#x27;S&#x27; id&#x3d;&#x27;query&#x27; name&#x3d;&#x27;query&#x27; type&#x3d;&#x27;text&#x27;&#x3e;&#x3c;&#x2f;INPUT&#x3e;"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="98" module="dynamic_analysis" type="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" description="It is possible to execute Javascript code by injecting a payload such as vcode&#x22;vc0d3&#x28;7603558784&#x29;&#x22; into the query parameter at http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;search.jsp&#x3f;query&#x3d;vcode. This attack was carried out via a direct navigation to a URL, a method commonly used in phishing emails and other scenarios where an embedded hyperlink can be clicked by a user, thereby initiating a navigation to the URL by the user&#x27;s default web browser. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;80&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;search.jsp&#x3f;query&#x3d;vcode&#x25;22&#x25;3Cscript&#x25;3Evc0d3&#x28;7603558784&#x29;&#x25;3C&#x2f;script&#x25;3E&#x25;22" vuln_parameter="query"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="89" module="dynamic_analysis" type="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" description="It is possible to execute Javascript code by entering a payload such as Dynamic Scanner&#x22;vc0d3&#x28;2348266336&#x29;&#x22; into the following input field  located at http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;feedback.jsp. This attack was carried out via text entry in a web browser. This type of vulnerability can be exploited by a malicious third party convincing a user to cut and paste untrusted data into their browser or via compromised client-side tools, such as browser extensions. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;80&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;sendFeedback" vuln_parameter="&#x3c;INPUT name&#x3d;&#x27;name&#x27; size&#x3d;&#x27;25&#x27; type&#x3d;&#x27;text&#x27; value&#x3d;&#x27;&#x27;&#x3e;&#x3c;&#x2f;INPUT&#x3e;"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="90" module="dynamic_analysis" type="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" description="It is possible to inject arbitrary HTML tags such as 1vc0d3&#x28;9437249531&#x29; into the name parameter on http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;sendFeedback which can result in script code being executed on http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;sendFeedback. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;80&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;sendFeedback" vuln_parameter="name"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="96" module="dynamic_analysis" type="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" description="It is possible to inject arbitrary HTML tags such as AltoroMutual into the HostName parameter on http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;util&#x2f;serverStatusCheckService.jsp&#x3f;HostName&#x3d;AltoroMutual which can result in script code being executed on http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;util&#x2f;serverStatusCheckService.jsp&#x3f;HostName&#x3d;AltoroMutual. The application populates the HTTP response with user-supplied input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;80&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;util&#x2f;serverStatusCheckService.jsp&#x3f;HostName&#x3d;AltoroMutual&#x25;3Cimg&#x2b;src&#x25;3Dx&#x2b;onerror&#x25;3Dvc0d3&#x25;283593169600&#x25;29&#x25;3E" vuln_parameter="HostName"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="298" cwename="Improper Validation of Certificate Expiration" pcirelated="true" owasp="1029">
            <description>
               <text text="The failure to validate certificate operation may result in trust being assigned to certificates which have been abandoned due to age."/>
            </description>
            <dynamicflaws>
               <flaw severity="3" categoryname="Improper Validation of Certificate Expiration" count="1" issueid="97" module="dynamic_analysis" type="Improper Validation of Certificate Expiration" description="The SSL certificate for altoromutual.com &#x28;CN&#x3d;altoromutual.com, O&#x3d;IBM, L&#x3d;Ottawa, ST&#x3d;Ontario, C&#x3d;CA&#x29; on demo.testfire.net&#x3a;443 has expired.&#xd;&#xa;&#xd;&#xa;Obtain a new certificate and deploy it on your device or server.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;298&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="298" remediationeffort="2" categoryid="12" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;" vuln_parameter="NONE"/>
            </dynamicflaws>
         </cwe>
         <cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327" certc="1170">
            <description>
               <text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="17" module="altoromutual.war" type="java.util.Random.nextBytes" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="OperationsUtil.java" line="148" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.OperationsUtil" functionprototype="java.lang.String makeRandomString&#x28;void&#x29;" functionrelativelocation="40"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="22" categoryname="Encapsulation" pcirelated="false">
         <desc>
            <para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user&#x27;s data and another&#x27;s.  "/>
            <para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
         </desc>
         <recommendations>
            <para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="693" cwename="Protection Mechanism Failure" pcirelated="false">
            <description>
               <text text="One or more recommended response headers are absent or set to insecure values. These response headers are necessary to enable specific defense mechanisms in compliant web browsers."/>
            </description>
            <dynamicflaws>
               <flaw severity="3" categoryname="Protection Mechanism Failure" count="1" issueid="88" module="dynamic_analysis" type="Protection Mechanism Failure" description="The product does not use a protection mechanism that provides sufficient defense against directed attacks against the product. Specifically, the site does not take appropriate measures to protect against UI redressing attacks &#x28;Clickjacking&#x29;. It is possible to overlay the target page inside an IFRAME from an attacker&#x27;s controlled web site. By doing so, they can attempt to trick a user into executing an unwarranted action without the user&#x27;s knowledge or consent. More information on Clickjacking can be found on OWASP&#x27;s website&#x3a; https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Clickjacking.&#xd;&#xa;&#xd;&#xa;To protect against Clickjacking, it is recommended that any page that contains forms which require a user to enter sensitive information use the X-Frame-Options header set to either DENY or SAMEORIGIN. More information on security headers can be found on Veracode&#x27;s website&#x3a; https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;blog&#x2f;2014&#x2f;03&#x2f;guidelines-for-setting-security-headers&#x2f;&#x23;xfo.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;693&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Clickjacking&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="693" remediationeffort="1" categoryid="22" pcirelated="false" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;crossdomain.xml" vuln_parameter="&#x2f;crossdomain.xml"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="611" cwename="Improper Restriction of XML External Entity Reference" pcirelated="true" owasp="1030">
            <description>
               <text text="The product processes an XML document that can contain XML entities with URLs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. By default, the XML entity resolver will attempt to resolve and retrieve external references. If attacker-controlled XML can be submitted to one of these functions, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Restriction of XML External Entity Reference" count="1" issueid="58" module="altoromutual.war" type="javax.xml.parsers.DocumentBuilder.parse" description="The resolution of external entity references is enabled. If attacker-controlled XML can be submitted to the XML parser here, then the attacker could gain access to information about an internal network, local filesystem, or other sensitive data. This is known as an XML eXternal Entity &#x28;XXE&#x29; attack.&#xd;&#xa;&#xd;&#xa;Configure the XML parser to disable external entity resolution.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;611.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;XML_External_Entity_Prevention_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;XML-External-Entities&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="611" remediationeffort="2" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ServletUtil.java" line="95" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.ServletUtil" functionprototype="java.lang.String &#x5b;&#x5d; searchArticles&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="8"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
         <desc>
            <para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
         </desc>
         <recommendations>
            <para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
            <para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
         </recommendations>
         <cwe cweid="601" cwename="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" pcirelated="false" sans="864">
            <description>
               <text text="A web application accepts a untrusted input that specifies a link to an external site, and uses that link to generate a redirect.  This enables phishing attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="URL Redirection to Untrusted Site &#x28;&#x27;Open Redirect&#x27;&#x29;" count="1" issueid="52" module="altoromutual.war" type="javax.servlet.http.HttpServletResponse.sendRedirect" description="This call to javax.servlet.http.HttpServletResponse.sendRedirect&#x28;&#x29; contains a URL redirection to untrusted site flaw. Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.&#xd;&#xa;&#xd;&#xa;Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;601.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;URL-Redirector-Abuse&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="601" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="customize.jsp" line="35" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.customize_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="48"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="27" categoryname="Server Configuration" pcirelated="false">
         <desc>
            <para text="The application&#x27;s supporting infrastructure, including web servers and application servers, can impact the security of the deployed application.  Failing to lock down a server, for example, can result in information leaks via error pages, stack traces, or unnecessary files left in a web-accessible directory.  Even though these servers are not part of the application codebase, they create insecurities in the environment which contribute to overall risk."/>
         </desc>
         <recommendations>
            <para text="Remove all extraneous files, including demonstration applications and sample code, from production systems. Configure production servers with the minimum set of services required for the application to function, and ensure that information leaks do not occur via server-generated error pages."/>
            <para text="Audit any third party dependencies or services that are deployed by default to ensure that they do not compromise the security of the application being supported."/>
         </recommendations>
         <cwe cweid="757" cwename="Selection of Less-Secure Algorithm During Negotiation &#x28;&#x27;Algorithm Downgrade&#x27;&#x29;" pcirelated="false" sans="327">
            <description>
               <text text="A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties."/>
            </description>
            <dynamicflaws>
               <flaw severity="3" categoryname="Selection of Less-Secure Algorithm During Negotiation &#x28;&#x27;Algorithm Downgrade&#x27;&#x29;" count="1" issueid="94" module="dynamic_analysis" type="Selection of Less-Secure Algorithm During Negotiation &#x28;&#x27;Algorithm Downgrade&#x27;&#x29;" description="TLSv1 is running on demo.testfire.net&#x3a;443. This version of the TLSv1 protocol is outdated and suffers from multiple cryptographic flaws. Attackers situated between the victim and the target application could intercept sensitive traffic by exploiting Man In The Middle &#x28;MITM&#x29; attacks.&#xd;&#xa;&#xd;&#xa;TLSv1 should be completely disabled from the application server as it is no longer secure. For Apache 2.2.23 and newer, disable the TLSv1 protocols by changing the SSLProtocol line to &#x22;SSLProtocol &#x2b;TLSv1.1 &#x2b;TLSv1.2&#x22; for 2.2.22 and older, change the SSLProtocol line to &#x22;SSLProtocol TLSv1.1&#x22; in the Apache configuration file for your system. More information can be found at http&#x3a;&#x2f;&#x2f;httpd.apache.org&#x2f;docs&#x2f;2.2&#x2f;mod&#x2f;mod_ssl.html&#x23;sslprotocol. For Microsoft IIS 5.x&#x2f;6.x&#x2f;7.0, details for disabling TLSv1 can be found on the Microsoft web site http&#x3a;&#x2f;&#x2f;support.microsoft.com&#x2f;kb&#x2f;187498. For F5 devices, follow the steps outlined in http&#x3a;&#x2f;&#x2f;support.f5.com&#x2f;kb&#x2f;en-us&#x2f;solutions&#x2f;public&#x2f;6000&#x2f;700&#x2f;sol6768.html according to your version. For nginx, set the ssl_protocols line to&#x3a; &#x22;ssl_protocols TLSv1.1 TLSv1.2&#x22; in the nginx.conf file. More information on SSL in nginx can be found at http&#x3a;&#x2f;&#x2f;nginx.org&#x2f;en&#x2f;docs&#x2f;http&#x2f;ngx_http_ssl_module.html&#x23;ssl_protocols. For other services or devices, consult documentation to determine how to disable TLSv1.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;757&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="757" remediationeffort="1" categoryid="27" pcirelated="false" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2020-04-14 20&#x3a;09&#x3a;14 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x2f;" vuln_parameter="NONE"/>
            </dynamicflaws>
         </cwe>
      </category>
      <category categoryid="15" categoryname="Session Fixation" pcirelated="true">
         <desc>
            <para text="Authenticating a user without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.  Session fixation vulnerabilities occur when&#x3a; ">
               <bulletitem text="A web application authenticates a user without first invalidating the existing session ID, thereby continuing to use the session ID already associated with the user."/>
               <bulletitem text="An attacker is able to force a known session ID on a user so that, once the user authenticates, the attacker has access to the authenticated session."/>
            </para>
            <para text="In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to authenticate against the server using the same session identifier, giving the attacker access to the user&#x27;s account through the active session.  A similar, passive version of this attack could be carried out by sniffing the session identifier at some point between the victim and the server prior to authentication."/>
            <para text="Failing to destroy a session once a user has logged out, or failing to provide a mechanism for logging out of the application, is another form of session fixation. "/>
         </desc>
         <recommendations>
            <para text="Invalidate any existing session after the user has authenticated and issue a new session identifier.  Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server."/>
         </recommendations>
         <cwe cweid="384" cwename="Session Fixation" pcirelated="true" owasp="1028">
            <description>
               <text text="The application never invalidates user sessions, which can lead to session fixation attacks.  As a result, the session identifier stays the same before, during, and after a user has logged in or out.  An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Session Fixation" count="1" issueid="23" module="altoromutual.war" type="getSession" description="The application calls getSession&#x28;&#x29;, and never invalidates user sessions, which can lead to session fixation attacks. As a result, the session identifier stays the same before, during, and after a user has logged in or out. An attacker may attempt to force a user into using a specific session identifier, then hijack the session once the user has logged in.&#xd;&#xa;&#xd;&#xa;Invalidate any existing session after the user has authenticated but before calling methods that establish the UserPrincipal. Also, invalidate the session object when a user logs out, otherwise the session will remain valid on the server.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;384.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Session_Fixation&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Session-Fixation&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="384" remediationeffort="2" exploitLevel="0" categoryid="15" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-03-20 14&#x3a;49&#x3a;20 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="search.jsp" line="35" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.search_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir&#x28;&#x29; after calling chroot&#x28;&#x29;, it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf&#x28;&#x29; also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee&#x27;s behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices&#x3a; Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container&#x27;s resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="55" module="altoromutual.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="119" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.sql.Connection getConnection&#x28;void&#x29;" functionrelativelocation="61"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="36" module="altoromutual.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="127" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.sql.Connection getConnection&#x28;void&#x29;" functionrelativelocation="86"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" pcirelated="true" owasp="1029" sans="311">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as a TLS connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information &#x28;e.g. &#x22;remember me&#x22; style functionality&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="45" module="altoromutual.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="LoginServlet.java" line="95" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;servlet&#x2f;" scope="com.ibm.security.appscan.altoromutual.servlet.LoginServlet" functionprototype="void doPost&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="73"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="526" cwename="Exposure of Sensitive Information Through Environmental Variables" pcirelated="false">
            <description>
               <text text="This web server appears to be in a default configuration. Default configurations of web servers often provide too much information about their platform and version in HTTP headers and on error pages. This data is not itself dangerous, but it can help an attacker focus on vulnerabilities associated with your specific web server platform&#x2f;version."/>
            </description>
            <dynamicflaws>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Environmental Variables" count="1" issueid="95" module="dynamic_analysis" type="Exposure of Sensitive Information Through Environmental Variables" description="HTTP response headers often contain information identifying technologies and version numbers that can be used by tools or attackers to target subsequent attacks. For , &#x22;Server&#x3a; Apache-Coyote&#x2f;1.1&#x22; was observed in the server response.&#xd;&#xa;&#xd;&#xa;To suppress version information from Apache, set ServerTokens to prod. More information can be found at http&#x3a;&#x2f;&#x2f;httpd.apache.org&#x2f;docs&#x2f;current&#x2f;mod&#x2f;core.html&#x23;servertokens. For Microsoft IIS versions earlier than 5.1 use Microsoft&#x27;s URLScan found at http&#x3a;&#x2f;&#x2f;support.microsoft.com&#x2f;default.aspx&#x3f;scid&#x3d;kb&#x3b;en-us&#x3b;307608. For IIS version 5.1 and higher please use UrlScan 3.1 http&#x3a;&#x2f;&#x2f;www.iis.net&#x2f;downloads&#x2f;microsoft&#x2f;urlscan. For nginx remove the version information by setting &#x22;server_tokens&#x22; to &#x22;off&#x22; in the nginx configuration file. More information can be found at http&#x3a;&#x2f;&#x2f;nginx.org&#x2f;en&#x2f;docs&#x2f;http&#x2f;ngx_http_core_module.html&#x23;server_tokens. For other services or devices, consult documentation to determine how to disable extraneous headers.&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;526&#x29; &#xd;&#xa;Microsoft &#x28;http&#x3a;&#x2f;&#x2f;www.microsoft.com&#x2f;technet&#x2f;security&#x2f;prodtech&#x2f;IIS.mspx&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Testing_for_Web_Application_Fingerprint&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Server-Misconfiguration&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="526" remediationeffort="1" categoryid="8" pcirelated="false" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;" vuln_parameter="Server&#x3a; Apache-Coyote&#x2f;1.1"/>
            </dynamicflaws>
         </cwe>
         <cwe cweid="209" cwename="Generation of Error Message Containing Sensitive Information" pcirelated="true" owasp="1032" certcpp="880">
            <description>
               <text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own &#x28;such as a password&#x29;, or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="39" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable error. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.toString. The data from an error message &#x28;possibly containing untrusted data&#x29; is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="admin.jsp" line="61" sourcefilepath="&#x2f;admin&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.admin.admin_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="28"/>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="54" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable error. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message &#x28;possibly containing untrusted data&#x29; is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="apply.jsp" line="38" sourcefilepath="&#x2f;bank&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.bank.apply_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="28" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable sanitzieHtmlWithRegex&#x28;&#x29;. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message &#x28;possibly containing untrusted data&#x29; is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.jsp" line="93" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.index_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="64"/>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="14" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable sanitzieHtmlWithRegex&#x28;&#x29;. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message &#x28;possibly containing untrusted data&#x29; is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.jsp" line="103" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.index_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="81"/>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="37" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.print" description="The application calls the javax.servlet.jsp.JspWriter.print&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable error. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.getLocalizedMessage. The data from an error message &#x28;possibly containing untrusted data&#x29; is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="40" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="56"/>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="13" module="altoromutual.war" type="javax.servlet.jsp.JspWriter.println" description="The application calls the javax.servlet.jsp.JspWriter.println&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to println&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable message. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from an earlier call to java.lang.Throwable.getMessage. The data from an error message &#x28;possibly containing untrusted data&#x29; is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-03-20 14&#x3a;37&#x3a;04 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="notfound.jsp" line="37" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.notfound_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0">
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="1162" certcpp="876" certjava="1147">
            <description>
               <text text="The application fails to release &#x28;or incorrectly releases&#x29; a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="61" module="altoromutual.war" type="java.sql.DriverManager.getConnection" description="The program fails to release or incorrectly releases the variable connection, which was previously allocated by a call to java.sql.DriverManager.getConnection&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="119" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.sql.Connection getConnection&#x28;void&#x29;" functionrelativelocation="61"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="83" module="altoromutual.war" type="java.sql.DriverManager.getConnection" description="The program fails to release or incorrectly releases the variable connection, which was previously allocated by a call to java.sql.DriverManager.getConnection&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="127" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.sql.Connection getConnection&#x28;void&#x29;" functionrelativelocation="86"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="74" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="145" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="void initDB&#x28;&#x29;" functionrelativelocation="6"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="84" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="178" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.util.ArrayList getFeedback&#x28;long&#x29;" functionrelativelocation="8"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="62" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="186" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.util.ArrayList getFeedback&#x28;long&#x29;" functionrelativelocation="35"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="76" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="217" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="boolean isValidUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="75" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="219" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="boolean isValidUser&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="74"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="73" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="241" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.User getUserInfo&#x28;java.lang.String&#x29;" functionrelativelocation="16"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="78" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="242" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.User getUserInfo&#x28;java.lang.String&#x29;" functionrelativelocation="37"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="69" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="275" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Account &#x5b;&#x5d; getAccounts&#x28;java.lang.String&#x29;" functionrelativelocation="17"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="79" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="276" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Account &#x5b;&#x5d; getAccounts&#x28;java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="68" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="305" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String transferFunds&#x28;java.lang.String, long, long, double&#x29;" functionrelativelocation="3"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="65" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="378" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Transaction &#x5b;&#x5d; getTransactions&#x28;java.lang.String, java.lang.String, model.Account  &#x5b;&#x5d;, int&#x29;" functionrelativelocation="4"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="77" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="403" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Transaction &#x5b;&#x5d; getTransactions&#x28;java.lang.String, java.lang.String, model.Account  &#x5b;&#x5d;, int&#x29;" functionrelativelocation="69"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="63" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="428" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String &#x5b;&#x5d; getBankUsernames&#x28;void&#x29;" functionrelativelocation="12"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="70" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="431" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String &#x5b;&#x5d; getBankUsernames&#x28;void&#x29;" functionrelativelocation="23"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="85" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="450" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Account getAccount&#x28;long&#x29;" functionrelativelocation="7"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="72" module="altoromutual.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable resultSet, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="451" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="model.Account getAccount&#x28;long&#x29;" functionrelativelocation="31"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="64" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="470" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String addAccount&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="16"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="80" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="481" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String addSpecialUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="14"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="81" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="493" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String addUser&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="14"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="82" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="505" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="java.lang.String changePassword&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="16"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="71" module="altoromutual.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="DBUtil.java" line="518" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.DBUtil" functionprototype="long storeFeedback&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String&#x29;" functionrelativelocation="9"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="67" module="altoromutual.war" type="java.io.BufferedReader.&#x21;operator_javanewinit" description="The program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.&#x21;operator_javanewinit&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="index.jsp" line="84" sourcefilepath="&#x2f;" scope="com.veracode.compiledjsp.xaltoromutualwar.index_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="66" module="altoromutual.war" type="java.io.BufferedWriter.&#x21;operator_javanewinit" description="The program fails to release or incorrectly releases the variable swaggerWriter, which was previously allocated by a call to java.io.BufferedWriter.&#x21;operator_javanewinit&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-13 14&#x3a;26&#x3a;47 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ServletUtil.java" line="396" sourcefilepath="com&#x2f;ibm&#x2f;security&#x2f;appscan&#x2f;altoromutual&#x2f;util&#x2f;" scope="com.ibm.security.appscan.altoromutual.util.ServletUtil" functionprototype="void initializeRestAPI&#x28;javax.servlet.ServletContext&#x29;" functionrelativelocation="68"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="27" categoryname="Server Configuration" pcirelated="true">
         <desc>
            <para text="The application&#x27;s supporting infrastructure, including web servers and application servers, can impact the security of the deployed application.  Failing to lock down a server, for example, can result in information leaks via error pages, stack traces, or unnecessary files left in a web-accessible directory.  Even though these servers are not part of the application codebase, they create insecurities in the environment which contribute to overall risk."/>
         </desc>
         <recommendations>
            <para text="Remove all extraneous files, including demonstration applications and sample code, from production systems. Configure production servers with the minimum set of services required for the application to function, and ensure that information leaks do not occur via server-generated error pages."/>
            <para text="Audit any third party dependencies or services that are deployed by default to ensure that they do not compromise the security of the application being supported."/>
         </recommendations>
         <cwe cweid="16" cwename="Configuration" pcirelated="true" owasp="1032">
            <description>
               <text text="Weaknesses in this category are typically introduced during the configuration of the web server."/>
            </description>
            <dynamicflaws>
               <flaw severity="0" categoryname="Configuration" count="1" issueid="86" module="dynamic_analysis" type="Configuration" description="The site demo.testfire.net&#x3a;80 does not properly utilize the X-Content-Type-Options header. This header can be set to protect against MIME type confusion attacks in Internet Explorer versions 9 and higher, Chrome and Safari. Content sniffing is a method browsers use to attempt to determine the real content type of a response by looking at the content itself, instead of the response header&#x27;s content-type value. By returning X-Content-Type-Options&#x3a; nosniff, certain elements will only load external resources if their content-type matches what is expected. It should be noted this check was only executed against the first few pages of this site.&#xd;&#xa;&#xd;&#xa;Set the X-Content-Type-Options header to a value of &#x22;nosniff&#x22; &#x28;without quotes&#x29;. It is recommended this header be set side wide by configuring your web or application server to return this value for all resources. More information on configuring this header can be found at https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;blog&#x2f;2014&#x2f;03&#x2f;guidelines-for-setting-security-headers&#x23;xcto&#xd;&#xa;&#xd;&#xa;&#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;cgi-bin&#x2f;jumpmenu.cgi&#x3f;id&#x3d;16&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="16" remediationeffort="2" categoryid="27" pcirelated="true" date_first_occurrence="2020-04-14 20&#x3a;05&#x3a;52 UTC" remediation_status="New" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" url="http&#x3a;&#x2f;&#x2f;demo.testfire.net&#x3a;80&#x2f;" vuln_parameter="x-content-type-options header"/>
            </dynamicflaws>
         </cwe>
      </category>
   </severity>
   <flaw-status new="12" reopen="0" open="85" cannot-reproduce="0" fixed="0" total="97" not_mitigated="97" sev-1-change="0" sev-2-change="1" sev-3-change="10" sev-4-change="0" sev-5-change="0"/>
   <customfields>
      <customfield name="Custom 1" value=""/>
      <customfield name="Custom 2" value=""/>
      <customfield name="Custom 3" value=""/>
      <customfield name="Custom 4" value=""/>
      <customfield name="Custom 5" value=""/>
      <customfield name="Custom 6" value=""/>
      <customfield name="Custom 7" value=""/>
      <customfield name="Custom 8" value=""/>
      <customfield name="Custom 9" value=""/>
      <customfield name="Custom 10" value=""/>
   </customfields>
   <software_composition_analysis third_party_components="23" violate_policy="false" components_violated_policy="0">
      <vulnerable_components>
         <component component_id="1893880e-7a38-436d-9215-0d140bb77024" file_name="commons-lang-2.5.jar" sha1="b0236b252e86419eef20c31a44579d2aee2f0a69" vulnerabilities="0" max_cvss_score="" version="2.5" library="commons-lang" vendor="commons-lang" description="Commons Lang, a package of Java utility classes for the&#xa;        classes that are in java.lang&#x27;s hierarchy, or are considered to be so&#xa;        standard as to justify existence in java.lang." added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-lang-2.5.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="217406da-9642-44f6-85a9-a46e798edac5" file_name="hk2-api-2.5.0-b42.jar" sha1="7fd4e3d0f2cb37c80ad0dedee3f5ee69503eaf52" vulnerabilities="0" max_cvss_score="" version="2.5.0-b42" library="hk2-api" vendor="org.glassfish.hk2" description="&#x24;&#x7b;project.name&#x7d;" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;hk2-api-2.5.0-b42.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="23e72062-d9a0-4f63-9c14-c087e2851bf9" file_name="derby-10.8.2.2.jar" sha1="5a9efbb610bd0dbf0ea404523319211f0603e4dc" vulnerabilities="1" max_cvss_score="6.4" version="10.8.2.2" library="derby" vendor="org.apache.derby" description="Contains the core Apache Derby database engine, which also includes the embedded JDBC driver." added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;derby-10.8.2.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2015-1832" cvss_score="6.4" severity="4" cwe_id="CWE-611" first_found_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" cve_summary="XML external entity &#x28;XXE&#x29; vulnerability in the SqlXmlUtil code in Apache Derby before 10.12.1.1, when a Java Security Manager is not in place, allows context-dependent attackers to read arbitrary files or cause a denial of service &#x28;resource consumption&#x29; via vectors involving XmlVTI and the XML datatype." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="26d7a3ec-e794-42a2-8fac-01b234dc360a" file_name="jersey-container-servlet-2.27.jar" sha1="aa97ee9f6528706d1d7214f39a404297903a7598" vulnerabilities="0" max_cvss_score="" version="2.27" library="jersey-container-servlet" vendor="org.glassfish.jersey.containers" description="Jersey core Servlet 3.x implementation" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jersey-container-servlet-2.27.jar"/>
            </file_paths>
            <licenses>
               <license name="Public Domain Per Creative Commons" spdx_id="CC-PDDC" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-PDDC.html" risk_rating="2"/>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="318a9354-ec45-4a1b-8a1c-c44dda985739" file_name="jersey-container-servlet-core-2.27.jar" sha1="81e24b17ff7cee96a1c830fe63aa1215176c009c" vulnerabilities="0" max_cvss_score="" version="2.27" library="jersey-container-servlet-core" vendor="org.glassfish.jersey.containers" description="Jersey core Servlet 2.x implementation" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jersey-container-servlet-core-2.27.jar"/>
            </file_paths>
            <licenses>
               <license name="Public Domain Per Creative Commons" spdx_id="CC-PDDC" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-PDDC.html" risk_rating="2"/>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="36c47ee8-0b31-4fc1-9be8-9d9b24a31b97" file_name="javassist-3.22.0-CR2.jar" sha1="44eaf0990dea92f4bca4b9931b2239c0e8756ee7" vulnerabilities="0" max_cvss_score="" version="3.22.0-CR2" library="javassist" vendor="org.javassist" description="Javassist &#x28;JAVA programming ASSISTant&#x29; makes Java bytecode manipulation&#xa;    simple.  It is a class library for editing bytecodes in Java." added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javassist-3.22.0-CR2.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU Lesser General Public License v2.1 only" spdx_id="LGPL-2.1-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;LGPL-2.1-only.html" risk_rating="4"/>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
               <license name="Mozilla Public License 1.1" spdx_id="MPL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MPL-1.1.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="4a8644e7-b43d-42c2-ae1d-a3adeb51532e" file_name="commons-lang3-3.3.2.jar" sha1="3e5b9983c2c64d80684f9968755904ad9253790d" vulnerabilities="0" max_cvss_score="" version="3.3.2" library="commons-lang3" vendor="com.hynnet" description="Apache Commons Lang, a package of Java utility classes for the&#xa;  classes that are in java.lang&#x27;s hierarchy, or are considered to be so&#xa;  standard as to justify existence in java.lang.&#xa;  for jdk 1.5" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-lang3-3.3.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="4e6d650f-f90b-43ec-9473-96fca5aa41cf" file_name="hk2-locator-2.5.0-b42.jar" sha1="9d6edc0cb226401a8316e67d81bfc37cb626ef91" vulnerabilities="0" max_cvss_score="" version="2.5.0-b42" library="hk2-locator" vendor="org.glassfish.hk2" description="&#x24;&#x7b;project.name&#x7d;" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;hk2-locator-2.5.0-b42.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="64ca70af-19ed-4322-a63c-9c38377f1210" file_name="wink-json4j-1.4.jar" sha1="4c2f2854a6c6ef462549945b4d146bb42fbbc2a3" vulnerabilities="0" max_cvss_score="" version="1.4" library="wink-json4j" vendor="org.apache.wink" description="" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;wink-json4j-1.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="74650f98-0bff-40ed-be1d-320164f750a8" file_name="validation-api-1.1.0.Final.jar" sha1="8613ae82954779d518631e05daa73a6a954817d5" vulnerabilities="0" max_cvss_score="" version="1.1.0.Final" library="validation-api" vendor="javax.validation" description="Bean Validation API" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;validation-api-1.1.0.Final.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="79cccc57-6370-4c57-8145-9a80b1cf80f6" file_name="javax.annotation-api-1.2.jar" sha1="479c1e06db31c432330183f5cae684163f186146" vulnerabilities="0" max_cvss_score="" version="1.2" library="javax.annotation-api" vendor="javax.annotation" description="Common Annotations for the JavaTM Platform API" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javax.annotation-api-1.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="7e13f5af-be08-4fab-963c-c31209663e95" file_name="jersey-hk2-2.27.jar" sha1="9ea08f93ee7045a36926954536ad385ac03b753f" vulnerabilities="0" max_cvss_score="" version="2.27" library="jersey-hk2" vendor="org.glassfish.jersey.inject" description="HK2 InjectionManager implementation" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jersey-hk2-2.27.jar"/>
            </file_paths>
            <licenses>
               <license name="Public Domain Per Creative Commons" spdx_id="CC-PDDC" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-PDDC.html" risk_rating="2"/>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="7ec96c9e-965f-440a-80e0-cb4d88bf510e" file_name="aopalliance-repackaged-2.5.0-b42.jar" sha1="e74beab6ca12e9e745eb47ca61729d9452b96f0c" vulnerabilities="0" max_cvss_score="" version="2.5.0-b42" library="aopalliance-repackaged" vendor="org.glassfish.hk2.external" description="" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;aopalliance-repackaged-2.5.0-b42.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="7f196bc8-8969-4f21-ac28-2b68d898f3eb" file_name="javax.ws.rs-api-2.1.jar" sha1="426a0862406536e690c7caa8bb6ed32191986fac" vulnerabilities="0" max_cvss_score="" version="2.1" library="javax.ws.rs-api" vendor="javax.ws.rs" description="" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javax.ws.rs-api-2.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="86e7d7bd-1c1e-436e-82af-2681ae5fd764" file_name="tiger-types-1.4.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.4" library="tiger-types" vendor="org.jvnet" description="" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;hk2-utils-2.5.0-b42.jar&#x3a;tiger-types-1.4.jar"/>
            </file_paths>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="89c91b56-881d-420c-b837-22069ee19503" file_name="log4j-1.2.16.jar" sha1="7999a63bfccbc7c247a9aea10d83d4272bd492c6" vulnerabilities="1" max_cvss_score="7.5" version="1.2.16" library="log4j" vendor="log4j" description="Apache Log4j 1.2" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;log4j-1.2.16.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2019-17571" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" cve_summary="log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in &#x60;TcpSocketServer&#x60; and &#x60;UdpSocketServer&#x60; when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="8bd77dbc-a367-4453-91c4-4d0dff7528df" file_name="hk2-utils-2.5.0-b42.jar" sha1="102a344e1728825e865a8986d7605602aba3c3b6" vulnerabilities="0" max_cvss_score="" version="2.5.0-b42" library="hk2-utils" vendor="org.glassfish.hk2" description="&#x24;&#x7b;project.name&#x7d;" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;hk2-utils-2.5.0-b42.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="8c1532bd-44f3-4cb5-9dd3-a574ea47adb9" file_name="javax.inject-2.5.0-b42.jar" sha1="98e0b7dcef77dc04809f0603868140a1c60bea71" vulnerabilities="0" max_cvss_score="" version="2.5.0-b42" library="javax.inject" vendor="org.glassfish.hk2.external" description="Injection API &#x28;JSR 330&#x29; version &#x24;&#x7b;javax.inject.version&#x7d; repackaged as OSGi bundle" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javax.inject-2.5.0-b42.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a3a0cab2-1963-4a1b-b24d-7aaa7a7fd9e4" file_name="commons-codec-1.6.jar" sha1="b7f0fc8f61ecadeb3695f0b9464755eee44374d4" vulnerabilities="1" max_cvss_score="5.0" version="1.6" library="commons-codec" vendor="commons-codec" description="The codec package contains simple encoder and decoders for&#xa;     various formats such as Base64 and Hexadecimal.  In addition to these&#xa;     widely used encoders and decoders, the codec package also maintains a&#xa;     collection of phonetic encoding utilities." added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-codec-1.6.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-22742" cvss_score="5.0" severity="3" cwe_id="" first_found_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" cve_summary="commons-codec does not properly perform input validation on encoded values. The &#x60;decode&#x28;&#x29;&#x60; function in the Base32, Base64 and BCodec classes fails to reject malformed Base32 and Base64 encoded strings and decodes into arbitrary values. A remote attacker can leverage this vulnerability to tunnel additional information via Base32 or Base64 encoded strings that appears to be legitimate." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="d2577c0c-9733-4b0a-a0f1-c539a9d3838d" file_name="jersey-common-2.27.jar" sha1="f20d4304a476a92001930d75747adcc232dbe779" vulnerabilities="0" max_cvss_score="" version="2.27" library="jersey-common" vendor="org.glassfish.jersey.core" description="Jersey core common packages" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jersey-common-2.27.jar"/>
            </file_paths>
            <licenses>
               <license name="Public Domain Per Creative Commons" spdx_id="CC-PDDC" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-PDDC.html" risk_rating="2"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e4c8c248-01d1-4109-9b9f-1339c689ef92" file_name="osgi-resource-locator-1.0.1.jar" sha1="4ed2b2d4738aed5786cfa64cba5a332779c4c708" vulnerabilities="0" max_cvss_score="" version="1.0.1" library="osgi-resource-locator" vendor="org.glassfish.hk2" description="See http&#x3a;&#x2f;&#x2f;wiki.glassfish.java.net&#x2f;Wiki.jsp&#x3f;page&#x3d;JdkSpiOsgi for more information" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;osgi-resource-locator-1.0.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f6aa318b-b519-4736-a0ee-1451710112e8" file_name="javax.inject-1.jar" sha1="6975da39a7040257bd51d21a231b76c915872d38" vulnerabilities="0" max_cvss_score="" version="1" library="javax.inject" vendor="javax.inject" description="The javax.inject API" added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;javax.inject-1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="fd94276d-aba4-4eba-b29e-595a58724cdd" file_name="jersey-media-jaxb-2.27.jar" sha1="106f2237ee03493185d9d915c9a1c011df716a2a" vulnerabilities="0" max_cvss_score="" version="2.27" library="jersey-media-jaxb" vendor="org.glassfish.jersey.media" description="JAX-RS features based upon JAX-B." added_date="2020-03-20 14&#x3a;38&#x3a;21 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1586899983472_zip&#x2f;build&#x2f;libs&#x2f;altoromutual.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jersey-media-jaxb-2.27.jar"/>
            </file_paths>
            <licenses>
               <license name="Public Domain Per Creative Commons" spdx_id="CC-PDDC" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CC-PDDC.html" risk_rating="2"/>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
      </vulnerable_components>
   </software_composition_analysis>
</detailedreport>
