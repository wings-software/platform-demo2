<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http&#x3a;&#x2f;&#x2f;www.w3.org&#x2f;2001&#x2f;XMLSchema-instance"
   xmlns="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0" xsi:schemaLocation="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0 https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;resource&#x2f;detailedreport.xsd" report_format_version="1.5" account_id="58169" app_name="cybric-fJBIKrb-Rpa8KgnBQDvefg-BlabAGab_veracode_SAST_and_SCA" app_id="779701" analysis_id="7323018" static_analysis_unit_id="7338081" sandbox_id="2048708" first_build_submitted_date="2020-04-23 14&#x3a;53&#x3a;26 UTC" version="19 May 2020 Static" build_id="7344883" submitter="Patrick Hayes" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2020-05-19 15&#x3a;39&#x3a;33 UTC" veracode_level="VL1" total_flaws="129" flaws_not_mitigated="129" teams="" life_cycle_stage="Not Specified" planned_deployment_date="" last_update_time="2020-05-19 15&#x3a;30&#x3a;22 UTC" is_latest_build="true" policy_name="Veracode Recommended Very High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
   <static-analysis rating="D" score="63" submitted_date="2020-05-19 15&#x3a;27&#x3a;34 UTC" published_date="2020-05-19 15&#x3a;30&#x3a;20 UTC" version="19 May 2020 Static" next_scan_due="2020-08-19 15&#x3a;30&#x3a;20 UTC" analysis_size_bytes="10895436" engine_version="20200420191026">
      <modules>
         <module name="verademo.war" compiler="JAVAC_8" os="Java J2SE 8" architecture="JVM" loc="5122" score="63" numflawssev0="18" numflawssev1="0" numflawssev2="23" numflawssev3="70" numflawssev4="14" numflawssev5="4"/>
      </modules>
   </static-analysis>
   <severity level="5">
      <category categoryid="18" categoryname="OS Command Injection" pcirelated="true">
         <desc>
            <para text="OS command injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct and execute a system command.  This allows an attacker to either alter the command executed by the application or append additional commands.  The command is typically executed with the privileges of the executing process and gives an attacker a privilege or capability that he would not otherwise have."/>
         </desc>
         <recommendations>
            <para text="Careful handling of all untrusted data is critical in preventing OS command injection attacks.   Using one or more of the following techniques provides defense-in-depth and minimizes the likelihood of an vulnerability.">
               <bulletitem text="If possible, use library calls rather than external processes to recreate the desired functionality."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Select safe API routines.  Some APIs that execute system commands take an array of strings as input rather than a single string, which protects against some forms of command injection by ensuring that a user-supplied argument cannot be interpreted as part of the command."/>
            </para>
         </recommendations>
         <cwe cweid="78" cwename="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864" certc="1165" certcpp="875" certjava="1134">
            <description>
               <text text="This call contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="91" module="verademo.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="0" categoryid="18" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ccp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ToolsController.java" line="56" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ToolsController" functionprototype="java.lang.String ping&#x28;java.lang.String&#x29;" functionrelativelocation="27"/>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="68" module="verademo.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="0" categoryid="18" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ccp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ToolsController.java" line="59" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ToolsController" functionprototype="java.lang.String ping&#x28;java.lang.String&#x29;" functionrelativelocation="46"/>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="40" module="verademo.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data from the variables &#x28;new String&#x5c;&#x5b;...&#x5c;&#x5d;&#x29;. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="0" categoryid="18" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ccp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ToolsController.java" line="88" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ToolsController" functionprototype="java.lang.String fortune&#x28;java.lang.String&#x29;" functionrelativelocation="52"/>
               <flaw severity="5" categoryname="Improper Neutralization of Special Elements used in an OS Command &#x28;&#x27;OS Command Injection&#x27;&#x29;" count="1" issueid="94" module="verademo.war" type="java.lang.Runtime.exec" description="This call to java.lang.Runtime.exec&#x28;&#x29; contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec&#x28;&#x29; contains tainted data from the variable cmd. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a &#x22;safe&#x22; version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;78.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Command_Injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;OS-Commanding&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="78" remediationeffort="3" exploitLevel="0" categoryid="18" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ccp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ToolsController.java" line="91" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ToolsController" functionprototype="java.lang.String fortune&#x28;java.lang.String&#x29;" functionrelativelocation="58"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="4">
      <category categoryid="19" categoryname="SQL Injection" pcirelated="true">
         <desc>
            <para text="SQL injection vulnerabilities occur when data enters an application from an untrusted source and is used to dynamically construct a SQL query.  This allows an attacker to manipulate database queries in order to access, modify, or delete arbitrary data.  Depending on the platform, database type, and configuration, it may also be possible to execute administrative operations on the database, access the filesystem, or execute arbitrary system commands.  SQL injection attacks can also be used to subvert authentication and authorization schemes, which would enable an attacker to gain privileged access to restricted portions of the application."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent SQL injection attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a SQL injection vulnerability.">
               <bulletitem text="Use parameterized prepared statements rather than dynamically constructing SQL queries.  This will prevent the database from interpreting the contents of bind variables as part of the query and is the most effective defense against SQL injection."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Normalize all user-supplied data before applying filters or regular expressions, or submitting the data to a database. This means that all URL-encoded &#x28;&#x25;xx&#x29;, HTML-encoded &#x28;&#x26;&#x23;xx&#x3b;&#x29;, or other encoding schemes should be reduced to the internal character representation expected by the application. This prevents attackers from using alternate encoding schemes to bypass filters."/>
               <bulletitem text="When using database abstraction libraries such as Hibernate, do not assume that all methods exposed by the API will automatically prevent SQL injection attacks.  Most libraries contain methods that pass arbitrary queries to the database in an unsafe manner."/>
            </para>
         </recommendations>
         <cwe cweid="89" cwename="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" pcirelated="true" owasp="1027" sans="864">
            <description>
               <text text="This database query contains a SQL injection flaw.  The function call constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database."/>
            </description>
            <staticflaws>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="90" module="verademo.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery&#x28;&#x29; was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="490" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String showBlabbers&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="36"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="4" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IgnoreCommand.java" line="40" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.IgnoreCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="112" module="verademo.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IgnoreCommand.java" line="47" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.IgnoreCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="5" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListenCommand.java" line="40" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.ListenCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="24" module="verademo.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListenCommand.java" line="47" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.ListenCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="104" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="40" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="8" module="verademo.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="47" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="75"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="38" module="verademo.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="51" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="92"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="22" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="166" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processLogin&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="127" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="251" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="105" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="316" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegister&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model&#x29;" functionrelativelocation="58"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="89" module="verademo.war" type="java.sql.Statement.execute" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.execute&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute&#x28;&#x29; contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="384" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegisterFinish&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model&#x29;" functionrelativelocation="59"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="100" module="verademo.war" type="java.sql.Statement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery&#x28;&#x29; contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="494" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="41"/>
               <flaw severity="4" categoryname="Improper Neutralization of Special Elements used in an SQL Command &#x28;&#x27;SQL Injection&#x27;&#x29;" count="1" issueid="50" module="verademo.war" type="java.sql.PreparedStatement.executeQuery" description="This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery&#x28;&#x29; constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery&#x28;&#x29; was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;89.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;SQL_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;SQL-Injection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="89" remediationeffort="3" exploitLevel="0" categoryid="19" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="505" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="54"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="3">
      <category categoryid="21" categoryname="CRLF Injection" pcirelated="true">
         <desc>
            <para text="The acronym CRLF stands for &#x22;Carriage Return, Line Feed&#x22; and refers to the sequence of characters used to denote the end of a line of text.  CRLF injection vulnerabilities occur when data enters an application from an untrusted source and is not properly validated before being used.  For example, if an attacker is able to inject a CRLF into a log file, he could append falsified log entries, thereby misleading administrators or cover traces of the attack.  If an attacker is able to inject CRLFs into an HTTP response header, he can use this ability to carry out other attacks such as cache poisoning.  CRLF vulnerabilities primarily affect data integrity.  "/>
         </desc>
         <recommendations>
            <para text="Apply robust input filtering for all user-supplied data, using centralized data validation routines when possible.  Use output filters to sanitize all output derived from user-supplied input, replacing non-alphanumeric characters with their HTML entity equivalents."/>
         </recommendations>
         <cwe cweid="93" cwename="Improper Neutralization of CRLF Sequences &#x28;&#x27;CRLF Injection&#x27;&#x29;" pcirelated="true" owasp="1027">
            <description>
               <text text="A function call contains a CRLF Injection flaw.  Writing untrusted input to an interface or external application that treats the CRLF &#x28;carriage return line feed&#x29; sequence as a delimiter to separate lines or records can result in that data being misinterpreted.  FTP and SMTP are examples of protocols that treat CRLF as a delimiter when parsing commands."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences &#x28;&#x27;CRLF Injection&#x27;&#x29;" count="1" issueid="97" module="verademo.war" type="javax.mail.Message.setSubject" description="This call to javax.mail.Message.setSubject&#x28;&#x29; contains a CRLF injection flaw. Writing untrusted input to an interface or external application that treats the CRLF &#x28;carriage return line feed&#x29; sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Sanitize CRLF sequences from untrusted input.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;93.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;CRLF_Injection&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="93" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="432" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="void emailUser&#x28;java.lang.String&#x29;" functionrelativelocation="67"/>
            </staticflaws>
         </cwe>
         <cwe cweid="113" cwename="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" pcirelated="true" owasp="1027">
            <description>
               <text text="A function call contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, leading to cache poisoning and cross-site scripting attacks."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="25" module="verademo.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variables &#x28;new Cookie&#x28;...&#x29;&#x29;. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="173" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processLogin&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="6" module="verademo.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variable cookie. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getCookies, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="630" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processProfile&#x28;java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="129" module="verademo.war" type="javax.servlet.ServletResponse.setContentType" description="This call to javax.servlet.ServletResponse.setContentType&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="710" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String downloadImage&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="17" module="verademo.war" type="javax.servlet.http.HttpServletResponse.setHeader" description="This call to javax.servlet.http.HttpServletResponse.setHeader&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="712" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String downloadImage&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
               <flaw severity="3" categoryname="Improper Neutralization of CRLF Sequences in HTTP Headers &#x28;&#x27;HTTP Response Splitting&#x27;&#x29;" count="1" issueid="69" module="verademo.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie&#x28;&#x29; contains tainted data from the variables &#x28;new Cookie&#x28;...&#x29;&#x29;. The tainted data originated from an earlier call to java.util.Base64&#x24;Encoder.encode.&#xd;&#xa;&#xd;&#xa;Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader&#x28;&#x29;, etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;113.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;HTTP_Response_Splitting&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;HTTP-Response-Splitting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="113" remediationeffort="2" exploitLevel="0" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserFactory.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;utils&#x2f;" scope="com.veracode.verademo.utils.UserFactory" functionprototype="javax.servlet.http.HttpServletResponse updateInResponse&#x28;User, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="90"/>
            </staticflaws>
         </cwe>
         <cwe cweid="117" cwename="Improper Output Neutralization for Logs" pcirelated="true" owasp="1027" certjava="1134">
            <description>
               <text text="A function call could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="119" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable blabbersSql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="486" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String showBlabbers&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="27"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="122" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="558" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String processBlabbers&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="24"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="110" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="559" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String processBlabbers&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="30"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="108" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IgnoreCommand.java" line="39" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.IgnoreCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="46" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IgnoreCommand.java" line="46" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.IgnoreCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="89"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="107" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListenCommand.java" line="39" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.ListenCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="39"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="113" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListenCommand.java" line="46" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.ListenCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="89"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="55" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="39" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="10" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="46" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="72"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="15" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="50" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="90"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="101" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="108" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="10"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="2" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="131" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="31"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="60" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="158" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="44"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="77" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="192" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="115" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="114" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showLogin&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="88"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="95" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="229" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processLogin&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="99"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="128" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="237" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="8"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="134" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="249" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="31"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="58" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable formatString. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="255" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="121" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="492" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="18" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="503" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="51"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="44" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="657" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processProfile&#x28;java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="88"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="51" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="693" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String downloadImage&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="84" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="707" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String downloadImage&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="34" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="802" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="boolean usernameExists&#x28;java.lang.String&#x29;" functionrelativelocation="98"/>
               <flaw severity="3" categoryname="Improper Output Neutralization for Logs" count="1" issueid="74" module="verademo.war" type="org.apache.log4j.Category.info" description="This call to org.apache.log4j.Category.info&#x28;&#x29; could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker&#x27;s tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Avoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;117.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Log_injection&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Improper-Output-Handling&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="117" remediationeffort="2" exploitLevel="1" categoryid="21" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="npp" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="858" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="boolean updateUsername&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="41"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="10" categoryname="Credentials Management" pcirelated="true">
         <desc>
            <para text="Improper management of credentials, such as usernames and passwords, may compromise system security.  In particular, storing passwords in plaintext or hard-coding passwords directly into application code are design issues that cannot be easily remedied.  Not only does embedding a password allow all of the project&#x27;s developers to view the password, it also makes fixing the problem extremely difficult.  Once the code is in production, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack, putting customers at risk."/>
            <para text="One variation on hard-coding plaintext passwords is to hard-code a constant string which is the result of a cryptographic one-way hash.  For example, instead of storing the word &#x22;secret,&#x22; the application stores an MD5 hash of the word.  This is a common mechanism for obscuring hard-coded passwords from casual viewing but does not significantly reduce risk.  However, using cryptographic hashes for data stored outside the application code can be an effective practice."/>
         </desc>
         <recommendations>
            <para text="Avoid storing passwords in easily accessible locations, and never store any type of sensitive data in plaintext.  Avoid using hard-coded usernames, passwords, or hash constants whenever possible, particularly in relation to security-critical components.   Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in alternate locations such as configuration or properties files."/>
         </recommendations>
         <cwe cweid="259" cwename="Use of Hard-coded Password" pcirelated="true" owasp="1028" sans="798" certjava="1152">
            <description>
               <text text="A method uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="65" module="verademo.war" type="JDBC_PASSWORD initializer" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. JDBC_PASSWORD initializer&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Constants.java" line="1" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;utils&#x2f;" scope="UNKNOWN" functionprototype="UNKNOWN" functionrelativelocation="-1"/>
               <flaw severity="3" categoryname="Use of Hard-coded Password" count="1" issueid="48" module="verademo.war" type="hardcodepasswdset" description="This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password &#x28;e.g. the name of a key in a properties file&#x29; rather than an actual password. hardcodepasswdset&#xd;&#xa;&#xd;&#xa;Store passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;259.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="259" remediationeffort="4" exploitLevel="1" categoryid="10" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="Constants.java" line="13" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;utils&#x2f;" scope="com.veracode.verademo.utils.Constants" functionprototype="void &#x21;ctor&#x28;&#x29;" functionrelativelocation="25"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="true">
         <desc>
            <para text="Cross-site scripting &#x28;XSS&#x29; attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient &#x28;often referred to as stored and reflected, respectively&#x29;.  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient&#x3b; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code &#x28;a common technique in Web 2.0 applications&#x29;, additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" pcirelated="true" owasp="1033" sans="79">
            <description>
               <text text="This call contains a cross-site scripting &#x28;XSS&#x29; flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="13" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable comment.getAuthor&#x28;&#x29;.getUsername&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blab.jsp" line="105" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="31" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable comment.getContent&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blab.jsp" line="109" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="61"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="3" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable comment.getAuthor&#x28;&#x29;.getBlabName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blab.jsp" line="111" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="9" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable blabber.getUsername&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blabbers.jsp" line="102" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="66" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable blabber.getBlabName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blabbers.jsp" line="105" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="16" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable blabber.getUsername&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="blabbers.jsp" line="120" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="59"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="116" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable currentUser. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feed.jsp" line="59" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="15"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="20" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable post.getAuthor&#x28;&#x29;.getUsername&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feed.jsp" line="94" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="34"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="120" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable post.getContent&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feed.jsp" line="97" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="38"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="35" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable post.getAuthor&#x28;&#x29;.getBlabName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feed.jsp" line="99" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="42"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="132" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable post.getContent&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="feed.jsp" line="142" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="67"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="14" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable target. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="79" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="53"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="96" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="login.jsp" line="86" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="62"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="41" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.jsp" line="91" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="25"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="39" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.jsp" line="120" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="36"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="102" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable heckler.getUsername&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.jsp" line="161" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="42" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable heckler.getBlabName&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.jsp" line="164" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="58"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="63" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable events.get&#x28;&#x29;. The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="profile.jsp" line="201" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="76"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="133" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register-finish.jsp" line="83" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="55"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="78" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="register.jsp" line="87" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="106" module="verademo.war" type="javax.servlet.jsp.JspWriter.print" description="This call to javax.servlet.jsp.JspWriter.print&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print&#x28;&#x29; contains tainted data from the variable request.getParameter&#x28;&#x29;. The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="2" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tools.jsp" line="65" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="37"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="36" module="verademo.war" type="java.io.Writer.write" description="This call to java.io.Writer.write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write&#x28;&#x29; contains tainted data from the variable ping. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;github.com&#x2f;OWASP&#x2f;CheatSheetSeries&#x2f;blob&#x2f;master&#x2f;cheatsheets&#x2f;Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;IiF_rOE79ANbwnZwreSPGA&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="1" categoryid="20" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="tools.jsp" line="68" sourcefilepath="&#x2f;WEB-INF&#x2f;views&#x2f;" scope="com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp" functionprototype="void _jspService&#x28;javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="52"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="331" cwename="Insufficient Entropy" pcirelated="false" sans="327" certc="1170">
            <description>
               <text text="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="52" module="verademo.war" type="java.util.Random.nextBoolean" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="127" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="25"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="125" module="verademo.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="152" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="40"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="83" module="verademo.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="155" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="41"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="29" module="verademo.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="178" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="54"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="45" module="verademo.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="182" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="56"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="23" module="verademo.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="186" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="57"/>
               <flaw severity="3" categoryname="Insufficient Entropy" count="1" issueid="123" module="verademo.war" type="java.util.Random.nextInt" description="Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;331.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="331" remediationeffort="2" exploitLevel="-1" categoryid="12" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="190" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="58"/>
            </staticflaws>
         </cwe>
         <cwe cweid="327" cwename="Use of a Broken or Risky Cryptographic Algorithm" pcirelated="true" owasp="1029" sans="866" certc="1170" certcpp="883" certjava="1152">
            <description>
               <text text="The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the disclosure of sensitive information."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="1" module="verademo.war" type="java.security.MessageDigest.getInstance" description="This function uses the MD5&#x28;&#x29; function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="User.java" line="103" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;utils&#x2f;" scope="com.veracode.verademo.utils.User" functionprototype="java.lang.String md5&#x28;java.lang.String&#x29;" functionrelativelocation="19"/>
               <flaw severity="3" categoryname="Use of a Broken or Risky Cryptographic Algorithm" count="1" issueid="114" module="verademo.war" type="java.security.MessageDigest.getInstance" description="This function uses the MD5&#x28;&#x29; function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.&#xd;&#xa;&#xd;&#xa;Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;327.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="327" remediationeffort="1" exploitLevel="1" categoryid="12" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="960" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String md5&#x28;java.lang.String&#x29;" functionrelativelocation="21"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="1" categoryname="Directory Traversal" pcirelated="false">
         <desc>
            <para text="Allowing user input to control paths used in filesystem operations may enable an attacker to access or modify otherwise protected system resources that would normally be inaccessible to end users.  In some cases, the user-provided input may be passed directly to the filesystem operation, or it may be concatenated to one or more fixed strings to construct a fully-qualified path."/>
            <para text="When an application improperly cleanses special character sequences in user-supplied filenames, a path traversal &#x28;or directory traversal&#x29; vulnerability may occur.  For example, an attacker could specify a filename such as &#x22;..&#x2f;..&#x2f;etc&#x2f;passwd&#x22;, which resolves to a file outside of the intended directory that the attacker would not normally be authorized to view."/>
         </desc>
         <recommendations>
            <para text="Assume all user-supplied input is malicious.  Validate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters and ensure that the end result is not dangerous."/>
         </recommendations>
         <cwe cweid="73" cwename="External Control of File Name or Path" pcirelated="false" sans="22" certcpp="877">
            <description>
               <text text="This call contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="73" module="verademo.war" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="659" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processProfile&#x28;java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="89"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="26" module="verademo.war" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="698" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String downloadImage&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="29"/>
               <flaw severity="3" categoryname="External Control of File Name or Path" count="1" issueid="81" module="verademo.war" type="java.io.File.&#x21;operator_javanewinit" description="This call to java.io.File.&#x21;operator_javanewinit&#x28;&#x29; contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to &#x21;operator_javanewinit&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;73.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Path-Traversal&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="73" remediationeffort="2" exploitLevel="0" categoryid="1" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="862" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="boolean updateUsername&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="54"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="22" categoryname="Encapsulation" pcirelated="true">
         <desc>
            <para text="Encapsulation is about defining strong security boundaries governing data and processes. Within an application, it might mean differentiation between validated and unvalidated data, between public and private members, or between one user&#x27;s data and another&#x27;s.  "/>
            <para text="In object-oriented programming, the term encapsulation is used to describe the grouping together of data and functionality within an object and the ability to provide users with a well-defined interface in a way which hides their internal workings.  Though there is some overlap with the above definition, the two definitions should not be confused as being interchangeable."/>
         </desc>
         <recommendations>
            <para text="The wide variance of encapsulation issues makes it impractical to generalize how these issues should be addressed, beyond stating that encapsulation boundaries should be well-defined and adhered to.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="502" cwename="Deserialization of Untrusted Data" pcirelated="true" owasp="1034" certjava="1148">
            <description>
               <text text="The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Deserialization of Untrusted Data" count="1" issueid="103" module="verademo.war" type="java.io.ObjectInput.readObject" description="The serialized-object data stream used in the call to java.io.ObjectInput.readObject&#x28;&#x29; appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types. Paired with a weakness in another class&#x27;s constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject&#x28;&#x29; was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.&#xd;&#xa;&#xd;&#xa;Avoid passing untrusted data to ObjectInputStream&#x3b; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;502.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="502" remediationeffort="2" exploitLevel="0" categoryid="22" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserFactory.java" line="44" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;utils&#x2f;" scope="com.veracode.verademo.utils.UserFactory" functionprototype="User createFromRequest&#x28;javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="74"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="25" categoryname="Insufficient Input Validation" pcirelated="false">
         <desc>
            <para text="Weaknesses in this category are related to an absent or incorrect protection mechanism that fails to properly validate input that can affect the control flow or data flow of a program."/>
         </desc>
         <recommendations>
            <para text="Validate input from untrusted sources before it is used. The untrusted data sources may include HTTP requests, file systems, databases, and any external systems that provide data to the application. In the case of HTTP requests, validate all parts of the request, including headers, form fields, cookies, and URL components that are used to transfer information from the browser to the server side application."/>
            <para text="Duplicate any client-side checks on the server side. This should be simple to implement in terms of time and difficulty, and will greatly reduce the likelihood of insecure parameter values being used in the application."/>
         </recommendations>
         <cwe cweid="470" cwename="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" pcirelated="false">
            <description>
               <text text="A call uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Use of Externally-Controlled Input to Select Classes or Code &#x28;&#x27;Unsafe Reflection&#x27;&#x29;" count="1" issueid="32" module="verademo.war" type="java.lang.Class.forName" description="This call to java.lang.Class.forName&#x28;&#x29; uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName&#x28;&#x29; contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.&#xd;&#xa;&#xd;&#xa;Validate the class name against a combination of white and black lists to ensure that only expected behavior is produced.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;470.html&#x29; &#xd;&#xa;OWASP &#x28;https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;Unsafe_Reflection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="470" remediationeffort="2" exploitLevel="1" categoryid="25" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2020-04-23 14&#x3a;55&#x3a;04 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="571" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String processBlabbers&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="45"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2">
      <category categoryid="7" categoryname="API Abuse" pcirelated="false">
         <desc>
            <para text="An API is a contract between a caller and a callee. Incorrect usage of certain API functions can result in exploitable security vulnerabilities."/>
            <para text="The most common forms of API abuse are caused by the caller failing to honor its end of this contract.  For example, if a program fails to call chdir&#x28;&#x29; after calling chroot&#x28;&#x29;, it violates the contract that specifies how to change the active root directory in a secure fashion.  Providing too few arguments to a varargs function such as printf&#x28;&#x29; also violates the API contract and will cause the missing parameters to be populated with unexpected data from the stack."/>
            <para text="Another common mishap is when the caller makes false assumptions about the callee&#x27;s behavior.  One example of this is when a caller expects a DNS-related function to return trustworthy information that can be used for authentication purposes.  This is a bad assumption because DNS responses can be easily spoofed."/>
         </desc>
         <recommendations>
            <para text="When calling API functions, be sure to fully understand and adhere to the specifications to avoid introducing security vulnerabilities.  Do not make assumptions about trustworthiness of the data returned from API calls or use the data in a context that was unintended by that API."/>
         </recommendations>
         <cwe cweid="245" cwename="J2EE Bad Practices&#x3a; Direct Management of Connections" pcirelated="false">
            <description>
               <text text="The J2EE application directly manages connections rather than using the container&#x27;s resource management facilities to obtain connections as specified in the J2EE standard.  Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="33" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="69" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String showFeed&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="11"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="124" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="182" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String getMoreFeed&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="25"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="87" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="232" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String processFeed&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="23"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="37" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="307" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String showBlab&#x28;java.lang.Integer, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="17"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="109" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="400" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String processBlab&#x28;java.lang.String, java.lang.Integer, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="22"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="67" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="483" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String showBlabbers&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="26"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="135" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="568" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String processBlabbers&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="37"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="11" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="100" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="java.lang.String processReset&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model&#x29;" functionrelativelocation="5"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="54" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ResetController.java" line="267" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ResetController" functionprototype="void recreateDatabaseSchema&#x28;&#x29;" functionrelativelocation="17"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="30" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="157" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processLogin&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="10"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="19" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="246" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="20"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="76" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="312" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegister&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model&#x29;" functionrelativelocation="29"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="57" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="368" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegisterFinish&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model&#x29;" functionrelativelocation="17"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="126" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="469" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="12"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="28" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="572" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processProfile&#x28;java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="11"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="82" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="768" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="boolean usernameExists&#x28;java.lang.String&#x29;" functionrelativelocation="10"/>
               <flaw severity="2" categoryname="J2EE Bad Practices&#x3a; Direct Management of Connections" count="1" issueid="117" module="verademo.war" type="java.sql.DriverManager.getConnection" description="This call to getConnection&#x28;&#x29; fails to use the J2EE container&#x27;s resource management facilities as required by the J2EE standard.&#xd;&#xa;&#xd;&#xa;Request the connection from the container rather than attempting to access it directly.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;245.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="245" remediationeffort="2" exploitLevel="0" categoryid="7" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="nnp" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="828" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="boolean updateUsername&#x28;java.lang.String, java.lang.String&#x29;" functionrelativelocation="6"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="12" categoryname="Cryptographic Issues" pcirelated="true">
         <desc>
            <para text="Applications commonly use cryptography to implement authentication mechanisms and to ensure the confidentiality and integrity of sensitive data, both in transit and at rest.  The proper and accurate implementation of cryptography is extremely critical to its efficacy.  Configuration or coding mistakes as well as incorrect assumptions may negate a large degree of the protection it affords, leaving the crypto implementation vulnerable to attack."/>
            <para text="Common cryptographic mistakes include, but are not limited to, selecting weak keys or weak cipher modes, unintentionally exposing sensitive cryptographic data, using predictable entropy sources, and mismanaging or hard-coding keys.  "/>
            <para text="Developers often make the dangerous assumption that they can improve security by designing their own cryptographic algorithm&#x3b; however, one of the basic tenets of cryptography is that any cipher whose effectiveness is reliant on the secrecy of the algorithm is fundamentally flawed.  "/>
         </desc>
         <recommendations>
            <para text="Select the appropriate type of cryptography for the intended purpose.  Avoid proprietary encryption algorithms as they typically rely on &#x22;security through obscurity&#x22; rather than sound mathematics.  Select key sizes appropriate for the data being protected&#x3b; for high assurance applications, 256-bit symmetric keys and 2048-bit asymmetric keys are sufficient.  Follow best practices for key storage, and ensure that plaintext data and key material are not inadvertently exposed."/>
         </recommendations>
         <cwe cweid="614" cwename="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" pcirelated="true" owasp="1029" sans="311">
            <description>
               <text text="Setting the Secure attribute on an HTTP cookie instructs the web browser to send it only over a secure channel, such as a TLS connection.  Issuing a cookie without the Secure attribute allows the browser to transmit it over unencrypted connections, which are susceptible to eavesdropping.  It is particularly important to set the Secure attribute on any cookies containing sensitive data, such as authentication information &#x28;e.g. &#x22;remember me&#x22; style functionality&#x29;."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="64" module="verademo.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="173" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processLogin&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="21"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="88" module="verademo.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="630" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processProfile&#x28;java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="63"/>
               <flaw severity="2" categoryname="Sensitive Cookie in HTTPS Session Without &#x27;Secure&#x27; Attribute" count="1" issueid="79" module="verademo.war" type="javax.servlet.http.HttpServletResponse.addCookie" description="This call to javax.servlet.http.HttpServletResponse.addCookie&#x28;&#x29; adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.&#xd;&#xa;&#xd;&#xa;Set the Secure attribute for all cookies used by HTTPS sessions.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;614.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Insufficient-Transport-Layer-Protection&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="614" remediationeffort="1" exploitLevel="0" categoryid="12" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserFactory.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;utils&#x2f;" scope="com.veracode.verademo.utils.UserFactory" functionprototype="javax.servlet.http.HttpServletResponse updateInResponse&#x28;User, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="90"/>
            </staticflaws>
         </cwe>
      </category>
      <category categoryid="8" categoryname="Information Leakage" pcirelated="true">
         <desc>
            <para text="An information leak is the intentional or unintentional disclosure of information that is either regarded as sensitive within the product&#x27;s own functionality or provides information about the product or its environment that could be useful in an attack.  Information leakage issues are commonly overlooked because they cannot be used to directly exploit the application.  However, information leaks should be viewed as building blocks that an attacker uses to carry out other, more complicated attacks."/>
            <para text="There are many different types of problems that involve information leaks, with severities that can range widely depending on the type of information leaked and the context of the information with respect to the application.  Common sources of information leakage include, but are not limited to&#x3a;">
               <bulletitem text="Source code disclosure"/>
               <bulletitem text="Browsable directories"/>
               <bulletitem text="Log files or backup files in web-accessible directories"/>
               <bulletitem text="Unfiltered backend error messages"/>
               <bulletitem text="Exception stack traces"/>
               <bulletitem text="Server version information"/>
               <bulletitem text="Transmission of uninitialized memory containing sensitive data"/>
            </para>
         </desc>
         <recommendations>
            <para text="Configure applications and servers to return generic error messages and to suppress stack traces from being displayed to end users.  Ensure that errors generated by the application do not provide insight into specific backend issues.  "/>
            <para text="Remove all backup files, binary archives, alternate versions of files, and test files from web-accessible directories of production servers.  The only files that should be present in the application&#x27;s web document root are files required by the application.  Ensure that deployment procedures include the removal of these file types by an administrator.  Keep web and application servers fully patched to minimize exposure to publicly-disclosed information leakage vulnerabilities."/>
         </recommendations>
         <cwe cweid="201" cwename="Exposure of Sensitive Information Through Sent Data" pcirelated="false">
            <description>
               <text text="Sensitive information may be exposed as a result of outbound network connections made by the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="130" module="verademo.war" type="javax.servlet.ServletResponse.setContentType" description="The application calls the javax.servlet.ServletResponse.setContentType&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="710" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String downloadImage&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="43"/>
               <flaw severity="2" categoryname="Exposure of Sensitive Information Through Sent Data" count="1" issueid="61" module="verademo.war" type="javax.mail.Transport.send" description="The application calls the javax.mail.Transport.send&#x28;&#x29; function, which will result in data being transferred out of the application &#x28;via the network or another medium&#x29;. This data contains sensitive information. The first argument to send&#x28;&#x29; contains potentially sensitive data from the variable message. The potentially sensitive data originated from an earlier call to java.lang.System.getProperties.&#xd;&#xa;&#xd;&#xa;Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;201.html&#x29; &#xd;&#xa;WASC &#x28;https&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Information-Leakage&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="201" remediationeffort="2" exploitLevel="-1" categoryid="8" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="948" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="void emailExceptionsToAdmin&#x28;java.lang.Throwable&#x29;" functionrelativelocation="92"/>
            </staticflaws>
         </cwe>
         <cwe cweid="209" cwename="Generation of Error Message Containing Sensitive Information" pcirelated="true" owasp="1032" certcpp="880">
            <description>
               <text text="The software generates an error message that includes sensitive information about its environment, users, or associated data.  The sensitive information may be valuable information on its own &#x28;such as a password&#x29;, or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack.  For example, file locations disclosed by an exception stack trace may be leveraged by an attacker to exploit a path traversal issue elsewhere in the application."/>
            </description>
            <staticflaws>
               <flaw severity="2" categoryname="Generation of Error Message Containing Sensitive Information" count="1" issueid="80" module="verademo.war" type="javax.mail.Transport.send" description="The application calls the javax.mail.Transport.send&#x28;&#x29; function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to send&#x28;&#x29; contains data from an error message &#x28;possibly containing untrusted data&#x29; from the variable message. The data from an error message &#x28;possibly containing untrusted data&#x29; originated from earlier calls to java.lang.NullPointerException.getMessage, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace.&#xd;&#xa;&#xd;&#xa;Ensure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;209.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="209" remediationeffort="1" exploitLevel="0" categoryid="8" pcirelated="true" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="pnn" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="948" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="void emailExceptionsToAdmin&#x28;java.lang.Throwable&#x29;" functionrelativelocation="92"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="1"/>
   <severity level="0">
      <category categoryid="17" categoryname="Code Quality" pcirelated="false">
         <desc>
            <para text="Code quality issues stem from failure to follow good coding practices and can lead to unpredictable behavior. These may include but are not limited to&#x3a;">
               <bulletitem text="Neglecting to remove debug code or dead code"/>
               <bulletitem text="Improper resource management, such as using a pointer after it has been freed"/>
               <bulletitem text="Using the incorrect operator to compare objects"/>
               <bulletitem text="Failing to follow an API or framework specification"/>
               <bulletitem text="Using a language feature or API in an unintended manner"/>
            </para>
            <para text="While code quality flaws are generally less severe than other categories and usually are not directly exploitable, they may serve as indicators that developers are not following practices that increase the reliability and security of an application.  For an attacker, code quality issues may provide an opportunity to stress the application in unexpected ways."/>
         </desc>
         <recommendations>
            <para text="The wide variance of code quality issues makes it impractical to generalize how these issues should be addressed.  Refer to individual categories for specific recommendations. "/>
         </recommendations>
         <cwe cweid="404" cwename="Improper Resource Shutdown or Release" pcirelated="false" certc="1162" certcpp="876" certjava="1147">
            <description>
               <text text="The application fails to release &#x28;or incorrectly releases&#x29; a system resource before it is made available for re-use.  This condition often occurs with resources such as database connections or file handles.  Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be possible to launch a denial of service attack by depleting the resource pool."/>
            </description>
            <staticflaws>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="21" module="verademo.war" type="java.sql.DriverManager.getConnection" description="The program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="BlabController.java" line="182" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.BlabController" functionprototype="java.lang.String getMoreFeed&#x28;java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="25"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="59" module="verademo.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IgnoreCommand.java" line="38" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.IgnoreCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="56" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="IgnoreCommand.java" line="40" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.IgnoreCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="86" module="verademo.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListenCommand.java" line="38" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.ListenCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="36"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="93" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ListenCommand.java" line="40" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.ListenCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="44"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="43" module="verademo.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="38" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="33"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="85" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="RemoveAccountCommand.java" line="40" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;commands&#x2f;" scope="com.veracode.verademo.commands.RemoveAccountCommand" functionprototype="void execute&#x28;java.lang.String&#x29;" functionrelativelocation="40"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="62" module="verademo.war" type="java.io.BufferedReader.&#x21;operator_javanewinit" description="The program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.&#x21;operator_javanewinit&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ToolsController.java" line="64" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ToolsController" functionprototype="java.lang.String ping&#x28;java.lang.String&#x29;" functionrelativelocation="62"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="111" module="verademo.war" type="java.io.BufferedReader.&#x21;operator_javanewinit" description="The program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.&#x21;operator_javanewinit&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="ToolsController.java" line="96" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.ToolsController" functionprototype="java.lang.String fortune&#x28;java.lang.String&#x29;" functionrelativelocation="71"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="27" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="166" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processLogin&#x28;java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse&#x29;" functionrelativelocation="18"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="71" module="verademo.war" type="java.sql.DriverManager.getConnection" description="The program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="246" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="20"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="75" module="verademo.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="250" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="35"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="53" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="251" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showPasswordHint&#x28;java.lang.String&#x29;" functionrelativelocation="38"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="98" module="verademo.war" type="java.sql.DriverManager.getConnection" description="The program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="312" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegister&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model&#x29;" functionrelativelocation="29"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="99" module="verademo.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="315" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegister&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model&#x29;" functionrelativelocation="51"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="7" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="316" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String processRegister&#x28;java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model&#x29;" functionrelativelocation="58"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="72" module="verademo.war" type="java.sql.Connection.createStatement" description="The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="493" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="39"/>
               <flaw severity="0" categoryname="Improper Resource Shutdown or Release" count="1" issueid="12" module="verademo.war" type="java.sql.Statement.executeQuery" description="The program fails to release or incorrectly releases the variable userHistoryResult, which was previously allocated by a call to java.sql.Statement.executeQuery&#x28;&#x29;.&#xd;&#xa;&#xd;&#xa;Ensure that all code paths properly release this resource.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;https&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;404.html&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="404" remediationeffort="2" exploitLevel="0" categoryid="17" pcirelated="false" date_first_occurrence="2020-04-23 14&#x3a;50&#x3a;59 UTC" remediation_status="Open" cia_impact="zzz" grace_period_expires="" affects_policy_compliance="false" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="UserController.java" line="494" sourcefilepath="com&#x2f;veracode&#x2f;verademo&#x2f;controller&#x2f;" scope="com.veracode.verademo.controller.UserController" functionprototype="java.lang.String showProfile&#x28;java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest&#x29;" functionrelativelocation="41"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <flaw-status new="0" reopen="0" open="129" cannot-reproduce="0" fixed="0" total="129" not_mitigated="129" sev-1-change="0" sev-2-change="0" sev-3-change="0" sev-4-change="0" sev-5-change="0"/>
   <customfields>
      <customfield name="Custom 1" value=""/>
      <customfield name="Custom 2" value=""/>
      <customfield name="Custom 3" value=""/>
      <customfield name="Custom 4" value=""/>
      <customfield name="Custom 5" value=""/>
      <customfield name="Custom 6" value=""/>
      <customfield name="Custom 7" value=""/>
      <customfield name="Custom 8" value=""/>
      <customfield name="Custom 9" value=""/>
      <customfield name="Custom 10" value=""/>
   </customfields>
   <software_composition_analysis third_party_components="32" violate_policy="false" components_violated_policy="0">
      <vulnerable_components>
         <component component_id="0ebf669d-3c5b-4031-8488-8c1519f2ceb8" file_name="commons-logging-1.2.jar" sha1="4bfc12adfe4842bf07b657f0369c4cb522955686" vulnerabilities="0" max_cvss_score="" version="1.2" library="commons-logging" vendor="commons-logging" description="Apache Commons Logging is a thin adapter allowing configurable bridging to other,&#xa;    well known logging systems." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-logging-1.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="10838146-6cb6-421a-9cad-8c6a1643157e" file_name="slf4j-log4j12-1.7.7.jar" sha1="58f588119ffd1702c77ccab6acb54bfb41bed8bd" vulnerabilities="0" max_cvss_score="" version="1.7.7" library="slf4j-log4j12" vendor="org.slf4j" description="SLF4J LOG4J-12 Binding" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;slf4j-log4j12-1.7.7.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="1da296b5-4943-4a15-8a70-361ce1ae46b0" file_name="txw2-2.3.0.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.3.0" library="txw2" vendor="org.glassfish.jaxb" description="TXW is a library that allows you to write XML documents." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-core-2.3.0.jar&#x3a;txw2-2.3.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="4cb79def-c7ad-430e-b5cf-44488ef29097" file_name="spring-tx-4.3.10.RELEASE.jar" sha1="569d30fd8d2050910e0271b838cf927ebb7efcdc" vulnerabilities="0" max_cvss_score="" version="4.3.8.RELEASE_1" library="org.apache.servicemix.bundles.spring-tx" vendor="org.apache.servicemix.bundles" description="" added_date="2020-05-19 15&#x3a;26&#x3a;52 UTC" new="true" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-tx-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="5733da72-0759-44ea-bdcc-4a3eb316b75d" file_name="spring-core-4.3.10.RELEASE.jar" sha1="db1462df62dbedad7244da30ec471390660271c0" vulnerabilities="1" max_cvss_score="6.0" version="4.3.10.RELEASE" library="spring-core" vendor="org.springframework" description="Spring Core" added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-core-4.3.10.RELEASE.jar"/>
               <file_path value="non-binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-core-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-1272" cvss_score="6.0" severity="3" cwe_id="CWE-88" first_found_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" cve_summary="Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application &#x28;server A&#x29; receives input from a remote client, and then uses that input to make a multipart request to another server &#x28;server B&#x29;, it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="5f18a046-a9ae-4f43-912a-5b165da9a385" file_name="encoder-1.2.1.jar" sha1="a0583521083f7c1532ffd01716c46568d97109f0" vulnerabilities="0" max_cvss_score="" version="1.2.1" library="encoder" vendor="org.owasp.encoder" description="The OWASP Encoders package is a collection of high-performance low-overhead&#xa;        contextual encoders, that when utilized correctly, is an effective tool in&#xa;        preventing Web Application security vulnerabilities such as Cross-Site&#xa;        Scripting." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;encoder-1.2.1.jar"/>
            </file_paths>
            <licenses>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="6599f523-eda1-4491-8724-418b20fe6380" file_name="javax.mail-api-1.4.7.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.4.7" library="javax.mail-api" vendor="javax.mail" description="" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;mail-1.4.7.jar&#x3a;javax.mail-api-1.4.7.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="660d7f35-ce53-4186-bbd2-8dc81910d630" file_name="mysql-connector-java-5.1.35.jar" sha1="b6ac941b7288376a7e8bc6490264bbd4427fb94e" vulnerabilities="4" max_cvss_score="6.0" version="5.1.35" library="mysql-connector-java" vendor="mysql" description="MySQL java connector" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;mysql-connector-java-5.1.35.jar"/>
            </file_paths>
            <licenses>
               <license name="GNU General Public License v2.0 only" spdx_id="GPL-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2017-3523" cvss_score="6.0" severity="0" cwe_id="CWE-284" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Vulnerability in the MySQL Connectors component of Oracle MySQL &#x28;subcomponent&#x3a; Connector&#x2f;J&#x29;. Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 &#x28;Confidentiality, Integrity and Availability impacts&#x29;. CVSS Vector&#x3a; &#x28;CVSS&#x3a;3.0&#x2f;AV&#x3a;N&#x2f;AC&#x3a;H&#x2f;PR&#x3a;L&#x2f;UI&#x3a;N&#x2f;S&#x3a;C&#x2f;C&#x3a;H&#x2f;I&#x3a;H&#x2f;A&#x3a;H&#x29;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2017-3586" cvss_score="5.5" severity="1" cwe_id="CWE-284" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Vulnerability in the MySQL Connectors component of Oracle MySQL &#x28;subcomponent&#x3a; Connector&#x2f;J&#x29;. Supported versions that are affected are 5.1.41 and earlier. Easily &#x22;exploitable&#x22; vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data. CVSS 3.0 Base Score 6.4 &#x28;Confidentiality and Integrity impacts&#x29;. CVSS Vector&#x3a; &#x28;CVSS&#x3a;3.0&#x2f;AV&#x3a;N&#x2f;AC&#x3a;L&#x2f;PR&#x3a;L&#x2f;UI&#x3a;N&#x2f;S&#x3a;C&#x2f;C&#x3a;L&#x2f;I&#x3a;L&#x2f;A&#x3a;N&#x29;." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2017-3589" cvss_score="2.1" severity="5" cwe_id="CWE-284" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Vulnerability in the MySQL Connectors component of Oracle MySQL &#x28;subcomponent&#x3a; Connector&#x2f;J&#x29;. Supported versions that are affected are 5.1.41 and earlier. Easily &#x22;exploitable&#x22; vulnerability allows low privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data. CVSS 3.0 Base Score 3.3 &#x28;Integrity impacts&#x29;. CVSS Vector&#x3a; &#x28;CVSS&#x3a;3.0&#x2f;AV&#x3a;L&#x2f;AC&#x3a;L&#x2f;PR&#x3a;L&#x2f;UI&#x3a;N&#x2f;S&#x3a;U&#x2f;C&#x3a;N&#x2f;I&#x3a;L&#x2f;A&#x3a;N&#x29;." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2019-2692" cvss_score="3.5" severity="3" cwe_id="CWE-20" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Vulnerability in the MySQL Connectors component of Oracle MySQL &#x28;subcomponent&#x3a; Connector&#x2f;J&#x29;. Supported versions that are affected are 8.0.15 and prior. Difficult to exploit vulnerability allows high privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 6.3 &#x28;Confidentiality, Integrity and Availability impacts&#x29;. CVSS Vector&#x3a; &#x28;CVSS&#x3a;3.0&#x2f;AV&#x3a;L&#x2f;AC&#x3a;H&#x2f;PR&#x3a;H&#x2f;UI&#x3a;R&#x2f;S&#x3a;U&#x2f;C&#x3a;H&#x2f;I&#x3a;H&#x2f;A&#x3a;H&#x29;." severity_desc="Low" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="723432a9-fca7-4cd1-a32c-0625a828c664" file_name="VeracodeAnnotations-1.2.1.jar" sha1="c7b6bcfca2967d20caa5fd1f03fd0ce7aa42b809" vulnerabilities="0" max_cvss_score="" version="1.2.1" library="VeracodeAnnotations" vendor="com.veracode.annotation" description="Annotations used by Veracode&#x27;s software analysis framework" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;VeracodeAnnotations-1.2.1.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="7339ff8f-298c-4821-98a9-7fd2c7a74fee" file_name="pop3-1.4.6.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.4.6" library="pop3" vendor="com.sun.mail" description="" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;mail-1.4.7.jar&#x3a;pop3-1.4.6.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="73935d0a-e9c7-4a15-b0c0-def8cabd6de9" file_name="org.apache.servicemix.bundles.spring-aop-4.3.10.RELEASE_1.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="4.3.10.RELEASE_1" library="org.apache.servicemix.bundles.spring-aop" vendor="org.apache.servicemix.bundles" description="" added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-aop-4.3.10.RELEASE.jar&#x3a;org.apache.servicemix.bundles.spring-aop-4.3.10.RELEASE_1.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="8b4f55d4-ea0b-4115-a79f-41e564717d1e" file_name="jstl-1.2.jar" sha1="74aca283cd4f4b4f3e425f5820cda58f44409547" vulnerabilities="1" max_cvss_score="7.5" version="1.2" library="jstl" vendor="javax.servlet" description="" added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jstl-1.2.jar"/>
            </file_paths>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2015-0254" cvss_score="7.5" severity="4" cwe_id="" first_found_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" cve_summary="Apache Standard Taglibs before 1.2.3 allows remote attackers to execute arbitrary code or conduct external XML entity &#x28;XXE&#x29; attacks via a crafted XSLT extension in a &#x28;1&#x29; &#x3c;x&#x3a;parse&#x3e; or &#x28;2&#x29; &#x3c;x&#x3a;transform&#x3e; JSTL XML tag." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="8d9a63d8-808b-4233-9e54-279d0f51826f" file_name="log4j-1.2.17.jar" sha1="5af35056b4d257e4b64b9e8069c0746e8b08629f" vulnerabilities="1" max_cvss_score="7.5" version="1.2.17" library="log4j" vendor="log4j" description="Apache Log4j 1.2" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;log4j-1.2.17.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2019-17571" cvss_score="7.5" severity="20" cwe_id="" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in &#x60;TcpSocketServer&#x60; and &#x60;UdpSocketServer&#x60; when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget." severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="9fdb0cb9-3f05-4fb3-b221-cd97bdacc307" file_name="commons-collections4-4.0.jar" sha1="da217367fd25e88df52ba79e47658d4cf928b0d1" vulnerabilities="1" max_cvss_score="5.1" version="4.0" library="commons-collections4" vendor="org.apache.commons" description="The Apache Commons Collections package contains types that extend and augment the Java Collections Framework." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-collections4-4.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-1847" cvss_score="5.1" severity="3" cwe_id="" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Apache Commons includes a class called InvokerTransformer. An application is vulnerable to a deserialization attack if this class is available on the classpath and the application deserializes untrusted or user-supplied data. It&#x27;s not necessary to actually use InvokerTransfomer to be vulnerable. With these two criteria satisfied, an attacker may construct a gadget chain using classes in the component to execute arbitrary code. The chain relies on the class InvokerTransformer in the org.apache.commons.collections.functors package to invoke methods during the deserialization process.&#xa;&#xa;The fix prevents deserialization of InvokerTransformer by default unless it&#x27;s specifically enabled.&#xa;&#xa;CVE-2015-4852, CVE-2015-6420, CVE-2015-7501, and CVE-2015-7450 are all related to this artifact." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="a214b7a5-33be-44af-8b1a-6d8d807673a5" file_name="istack-commons-runtime-3.0.5.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="3.0.5" library="istack-commons-runtime" vendor="com.sun.istack" description="" added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-core-2.3.0.jar&#x3a;istack-commons-runtime-3.0.5.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="a93299f2-42c0-48ba-9476-d4ca0246d6ce" file_name="spring-web-4.3.10.RELEASE.jar" sha1="6344501cb03cb4787c67cf3f820a471e07b9203b" vulnerabilities="2" max_cvss_score="5.0" version="4.3.10.RELEASE" library="spring-web" vendor="org.springframework" description="Spring Web" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-web-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-11039" cvss_score="4.3" severity="2" cwe_id="CWE-20" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="spring-web is vulnerable to cross-site tracing &#x28;XST&#x29; attacks. The vulnerability exists as &#x60;HiddenHttpMethodFilter&#x60; allows web applications to change existing HTTP request method to any HTTP method, causing applications with existing cross-site scripting &#x28;XSS&#x29; vulnerability to be vulnerable to XST." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2018-15756" cvss_score="5.0" severity="3" cwe_id="CWE-399" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="spring-web is vulnerable to denial of service &#x28;DoS&#x29;. A malicious user can pass a HTTP request containing a header with overlapping ranges, leading to an error which would crash the service." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="b710849d-bda8-4518-a5fb-d73c8554bc7e" file_name="activation-1.1.jar" sha1="e6cb541461c2834bdea3eb920f1884d1eb508b50" vulnerabilities="0" max_cvss_score="" version="1.1" library="activation" vendor="javax.activation" description="JavaBeans Activation Framework &#x28;JAF&#x29; is a standard extension to the Java platform that lets you take advantage of standard services to&#x3a; determine the type of an arbitrary piece of data&#x3b; encapsulate access to it&#x3b; discover the operations available on it&#x3b; and instantiate the appropriate bean to perform the operation&#x28;s&#x29;." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;activation-1.1.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="bbcb789c-4bbd-489c-8211-046f6c5a68b9" file_name="jaxb-core-2.3.0.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="2.3.0" library="jaxb-core" vendor="org.glassfish.jaxb" description="JAXB Core module. Contains sources required by XJC, JXC and Runtime modules." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-core-2.3.0.jar&#x3a;jaxb-core-2.3.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c0e0a335-3277-45dc-a71d-a353d86a9de5" file_name="spring-jdbc-4.3.10.RELEASE.jar" sha1="91e2f69e633f8eac5d5ef516595556ab7db87f3d" vulnerabilities="0" max_cvss_score="" version="4.3.10.RELEASE" library="spring-jdbc" vendor="org.springframework" description="Spring JDBC" added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-jdbc-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c11552be-13c0-466c-8f57-ac18fda3386b" file_name="slf4j-api-1.7.7.jar" sha1="2b8019b6249bb05d81d3a3094e468753e2b21311" vulnerabilities="0" max_cvss_score="" version="1.7.7" library="slf4j-api" vendor="org.slf4j" description="The slf4j API" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;slf4j-api-1.7.7.jar"/>
            </file_paths>
            <licenses>
               <license name="MIT License" spdx_id="MIT" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;MIT.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c3a46faf-0919-416b-95bb-970deeed5157" file_name="jaxb-impl-2.3.0.jar" sha1="3a3c6a62719d967175b76b63925f1fb495f11437" vulnerabilities="0" max_cvss_score="" version="2.3.0" library="jaxb-impl" vendor="com.sun.xml.bind" description="Old JAXB Runtime module. Contains sources required for runtime processing." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-impl-2.3.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License v3.0 only" spdx_id="GPL-3.0-only" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-3.0-only.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="c7ce22bf-c9d5-4465-9fb7-5aedd8261079" file_name="commons-io-2.4.jar" sha1="b1b6ea3b7e4aa4f492509a4952029cd8e48019ad" vulnerabilities="1" max_cvss_score="5.1" version="2.4" library="commons-io" vendor="commons-io" description="The Commons IO library contains utility classes, stream implementations, file filters, &#xa;file comparators, endian transformation classes, and much more." added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-io-2.4.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="SRCCLR-SID-5295" cvss_score="5.1" severity="3" cwe_id="" first_found_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" cve_summary="commons-io is vulnerable to remote code execution &#x28;RCE&#x29; attacks. These attacks are possible because the library doesn&#x27;t restrict the classes which can be accepted when deserializing a binary." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="c9daab8d-4347-44b0-ae8f-3d9a6060193f" file_name="commons-fileupload-1.3.2.jar" sha1="5d7491ed6ebd02b6a8d2305f8e6b7fe5dbd95f72" vulnerabilities="1" max_cvss_score="7.5" version="1.3.2" library="commons-fileupload" vendor="commons-fileupload" description="The Apache Commons FileUpload component provides a simple yet flexible means of adding support for multipart&#xa;    file upload functionality to servlets and web applications." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;commons-fileupload-1.3.2.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2016-1000031" cvss_score="7.5" severity="4" cwe_id="CWE-284" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution" severity_desc="High" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="d71d3730-b197-4fac-8aff-f89ed626b5a6" file_name="spring-webmvc-4.3.10.RELEASE.jar" sha1="6809017a5a76bdaf1957f1cc0a892d448fc6f3df" vulnerabilities="4" max_cvss_score="5.0" version="4.3.10.RELEASE" library="spring-webmvc" vendor="org.springframework" description="Spring Web MVC" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-webmvc-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities>
               <vulnerability cve_id="CVE-2018-11040" cvss_score="4.3" severity="3" cwe_id="CWE-254" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP &#x28;JSON with Padding&#x29; through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the &#x22;jsonp&#x22; and &#x22;callback&#x22; JSONP parameters, enabling cross-domain requests." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2018-1199" cvss_score="5.0" severity="3" cwe_id="CWE-20" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Spring Security &#x28;Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1&#x3b; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3&#x29; does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo&#x28;&#x29; and some do not. Spring Security uses the value returned by getPathInfo&#x28;&#x29; as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2018-1271" cvss_score="4.3" severity="3" cwe_id="CWE-23" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources &#x28;e.g. CSS, JS, images&#x29;. When static resources are served from a file system on Windows &#x28;as opposed to the classpath, or the ServletContext&#x29;, a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
               <vulnerability cve_id="CVE-2018-15756" cvss_score="5.0" severity="3" cwe_id="CWE-399" first_found_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" cve_summary="spring-web is vulnerable to denial of service &#x28;DoS&#x29;. A malicious user can pass a HTTP request containing a header with overlapping ranges, leading to an error which would crash the service." severity_desc="Medium" mitigation="false" vulnerability_affects_policy_compliance="false"/>
            </vulnerabilities>
            <violated_policy_rules/>
         </component>
         <component component_id="da8ad165-d5a1-4651-9897-d074b84ae47f" file_name="mail-1.4.7.jar" sha1="9add058589d5d85adeb625859bf2c5eeaaedf12d" vulnerabilities="0" max_cvss_score="" version="1.4.7" library="mail" vendor="javax.mail" description="" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;mail-1.4.7.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e18e67b3-5517-41be-b3e8-8654919167e6" file_name="jaxb-api-2.3.0.jar" sha1="99f802e0cb3e953ba3d6e698795c4aeb98d37c48" vulnerabilities="0" max_cvss_score="" version="2.3.0" library="jaxb-api" vendor="javax.xml.bind" description="" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;jaxb-api-2.3.0.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.1&#x28;CDDL-1.1&#x29;" spdx_id="CDDL-1.1" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.1.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e5ecc7cd-f1f1-469d-92d5-4a081b2bd69d" file_name="smtp-1.4.7.jar" sha1="" vulnerabilities="0" max_cvss_score="" version="1.4.7" library="smtp" vendor="com.sun.mail" description="" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;mail-1.4.7.jar&#x3a;smtp-1.4.7.jar"/>
            </file_paths>
            <licenses>
               <license name="Common Development and Distribution License 1.0" spdx_id="CDDL-1.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;CDDL-1.0.html" risk_rating="3"/>
               <license name="GNU General Public License with Classpath Exceptions version 2.0" spdx_id="GPL-2.0-with-classpath-exception" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;GPL-2.0-with-classpath-exception.html" risk_rating="4"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="e6f9d7a1-2431-446a-861e-7e74b9132915" file_name="spring-aop-4.3.10.RELEASE.jar" sha1="3a8c23246045e5e1dbd7d91354741b165e997a88" vulnerabilities="0" max_cvss_score="" version="4.3.10.RELEASE" library="spring-aop" vendor="org.springframework" description="Spring AOP" added_date="2020-04-23 14&#x3a;53&#x3a;23 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-aop-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="ebeefc0e-dfcc-4373-a42b-1d511fdc1d2f" file_name="spring-expression-4.3.10.RELEASE.jar" sha1="4975ab542028945ab98fefba772472a40495d7ca" vulnerabilities="0" max_cvss_score="" version="4.3.10.RELEASE" library="spring-expression" vendor="org.springframework" description="Spring Expression Language &#x28;SpEL&#x29;" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-expression-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f1ca2cc8-00ec-48df-b66b-dadc77d53f40" file_name="spring-context-4.3.10.RELEASE.jar" sha1="645ce6fdba38448d183a1374506fc24036009869" vulnerabilities="0" max_cvss_score="" version="4.3.10.RELEASE" library="spring-context" vendor="org.springframework" description="Spring Context" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-context-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f2aa641c-1508-42f6-8160-79ab8ce34a58" file_name="spring-beans-4.3.10.RELEASE.jar" sha1="9d89b786f755f9b1da344f10f6f045f927679a72" vulnerabilities="0" max_cvss_score="" version="4.3.10.RELEASE" library="spring-beans" vendor="org.springframework" description="Spring Beans" added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;spring-beans-4.3.10.RELEASE.jar"/>
            </file_paths>
            <licenses>
               <license name="Apache License 2.0" spdx_id="Apache-2.0" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;Apache-2.0.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
         <component component_id="f3cf4204-31ad-459f-9d83-94351193fee9" file_name="encoder-jsp-1.2.1.jar" sha1="bd36efaa6b37fcc902cda9bd5b7f1d59a6b29d0e" vulnerabilities="0" max_cvss_score="" version="1.2.1" library="encoder-jsp" vendor="org.owasp.encoder" description="The OWASP Encoder JSP package contains JSP tag definitions and TLDs to allow&#xa;        easy use of the OWASP Encoder Project&#x27;s core API. The TLDs contain both tag&#xa;        definitions and JSP EL functions." added_date="2020-04-23 14&#x3a;53&#x3a;22 UTC" new="false" component_affects_policy_compliance="false">
            <file_paths>
               <file_path value="binaries&#x2f;files_1589901947340_zip&#x2f;target&#x2f;verademo.war&#x23;zip&#x3a;WEB-INF&#x2f;lib&#x2f;encoder-jsp-1.2.1.jar"/>
            </file_paths>
            <licenses>
               <license name="BSD 3-Clause &#x22;New&#x22; or &#x22;Revised&#x22; License" spdx_id="BSD-3-Clause" license_url="https&#x3a;&#x2f;&#x2f;spdx.org&#x2f;licenses&#x2f;BSD-3-Clause.html" risk_rating="2"/>
            </licenses>
            <vulnerabilities/>
            <violated_policy_rules/>
         </component>
      </vulnerable_components>
   </software_composition_analysis>
</detailedreport>
