[
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@issueid": "25",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
                        "line_number": "173",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "63",
                        "_raw_@issueid": "6",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variable cookie. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getCookies, and AnnotationVirtualController.vc_annotation_entry.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
                        "line_number": "630",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@issueid": "129",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.ServletResponse.setContentType",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.servlet.ServletResponse.setContentType() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
                        "line_number": "710",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "52",
                        "_raw_@issueid": "17",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.setHeader",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
                        "line_number": "712",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "javax.servlet.http.HttpServletResponse updateInResponse(User, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "90",
                        "_raw_@issueid": "69",
                        "_raw_@scope": "com.veracode.verademo.utils.UserFactory",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserFactory.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/utils/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/veracode/verademo/utils/UserFactory.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to java.util.Base64$Encoder.encode.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
                        "line_number": "96",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-113"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "113"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "21"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw. Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nEscape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers. Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/113.html) \r\nOWASP (https://www.owasp.org/index.php/HTTP_Response_Splitting) \r\nWASC (https://webappsec.pbworks.com/HTTP-Response-Splitting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-113",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "113",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@functionprototype": "java.lang.String showBlabbers(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "27",
                        "_raw_@issueid": "119",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable blabbersSql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "486",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "24",
                        "_raw_@issueid": "122",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "558",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "30",
                        "_raw_@issueid": "110",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "559",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@issueid": "108",
                        "_raw_@scope": "com.veracode.verademo.commands.IgnoreCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "IgnoreCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/IgnoreCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "39",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "89",
                        "_raw_@scope": "com.veracode.verademo.commands.IgnoreCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "IgnoreCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/IgnoreCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "46",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@issueid": "107",
                        "_raw_@scope": "com.veracode.verademo.commands.ListenCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ListenCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/ListenCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "39",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "89",
                        "_raw_@issueid": "113",
                        "_raw_@scope": "com.veracode.verademo.commands.ListenCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ListenCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/ListenCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "46",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "35",
                        "_raw_@issueid": "55",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "39",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "72",
                        "_raw_@issueid": "10",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "46",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "90",
                        "_raw_@issueid": "15",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "50",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "10",
                        "_raw_@issueid": "101",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "108",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "31",
                        "_raw_@issueid": "2",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "131",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "44",
                        "_raw_@issueid": "60",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "158",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "61",
                        "_raw_@issueid": "77",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "192",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showLogin(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "88",
                        "_raw_@issueid": "115",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "114",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "99",
                        "_raw_@issueid": "95",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "229",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "8",
                        "_raw_@issueid": "128",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "237",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "31",
                        "_raw_@issueid": "134",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "249",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "59",
                        "_raw_@issueid": "58",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable formatString. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "255",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@issueid": "121",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "492",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "51",
                        "_raw_@issueid": "18",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "503",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "88",
                        "_raw_@issueid": "44",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "657",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "25",
                        "_raw_@issueid": "51",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "693",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "42",
                        "_raw_@issueid": "84",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "707",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "boolean usernameExists(java.lang.String)",
                        "_raw_@functionrelativelocation": "98",
                        "_raw_@issueid": "34",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "802",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "boolean updateUsername(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "41",
                        "_raw_@issueid": "74",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "org.apache.log4j.Category.info",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Output Neutralization for Logs",
                        "line_number": "858",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-117"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "117"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "21"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "npp"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to org.apache.log4j.Category.info() could result in a log forging attack. Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files. Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility. For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid directly embedding user input in log files when possible. Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data. Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences. Only write custom blacklisting code when absolutely necessary. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/117.html) \r\nOWASP (https://www.owasp.org/index.php/Log_injection) \r\nWASC (https://webappsec.pbworks.com/Improper-Output-Handling) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Output Neutralization for Logs",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-117",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "117",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "43",
                        "_raw_@issueid": "130",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.ServletResponse.setContentType",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The application calls the javax.servlet.ServletResponse.setContentType() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information.\r\n\r\nEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/201.html) \r\nWASC (https://webappsec.pbworks.com/Information-Leakage)\r\n\r\n",
                        "issue_name": "Exposure of Sensitive Information Through Sent Data",
                        "line_number": "710",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "void emailExceptionsToAdmin(java.lang.Throwable)",
                        "_raw_@functionrelativelocation": "92",
                        "_raw_@issueid": "61",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.mail.Transport.send",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The application calls the javax.mail.Transport.send() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information. The first argument to send() contains potentially sensitive data from the variable message. The potentially sensitive data originated from an earlier call to java.lang.System.getProperties.\r\n\r\nEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/201.html) \r\nWASC (https://webappsec.pbworks.com/Information-Leakage)\r\n\r\n",
                        "issue_name": "Exposure of Sensitive Information Through Sent Data",
                        "line_number": "948",
                        "severity": 3
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-201"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "201"
            },
            {
                "key": "_raw_@categoryid",
                "value": "8"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "pnn"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The application calls the javax.servlet.ServletResponse.setContentType() function, which will result in data being transferred out of the application (via the network or another medium). This data contains sensitive information.\r\n\r\nEnsure that the transfer of the sensitive data is intended and that it does not violate application security policy. This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability. However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/201.html) \r\nWASC (https://webappsec.pbworks.com/Information-Leakage)\r\n\r\n",
        "issueName": "Exposure of Sensitive Information Through Sent Data",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-201",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "201",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void emailExceptionsToAdmin(java.lang.Throwable)",
                        "_raw_@functionrelativelocation": "92",
                        "_raw_@issueid": "80",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.mail.Transport.send",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The application calls the javax.mail.Transport.send() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to send() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from earlier calls to java.lang.NullPointerException.getMessage, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
                        "issue_name": "Generation of Error Message Containing Sensitive Information",
                        "line_number": "948",
                        "severity": 3
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-209"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "209"
            },
            {
                "key": "_raw_@categoryid",
                "value": "8"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "pnn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "false"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The application calls the javax.mail.Transport.send() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components. This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to send() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from earlier calls to java.lang.NullPointerException.getMessage, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace.\r\n\r\nEnsure that error codes or other messages returned to end users are not overly verbose. Sanitize all messages of any sensitive information that is not absolutely necessary.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/209.html)\r\n\r\n",
        "issueName": "Generation of Error Message Containing Sensitive Information",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-209",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "209",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showFeed(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "11",
                        "_raw_@issueid": "33",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "69",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String getMoreFeed(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "25",
                        "_raw_@issueid": "124",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "182",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processFeed(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "23",
                        "_raw_@issueid": "87",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "232",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showBlab(java.lang.Integer, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "17",
                        "_raw_@issueid": "37",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "307",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processBlab(java.lang.String, java.lang.Integer, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "22",
                        "_raw_@issueid": "109",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "400",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showBlabbers(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "26",
                        "_raw_@issueid": "67",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "483",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "37",
                        "_raw_@issueid": "135",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "568",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "5",
                        "_raw_@issueid": "11",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "100",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void recreateDatabaseSchema()",
                        "_raw_@functionrelativelocation": "17",
                        "_raw_@issueid": "54",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "267",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "10",
                        "_raw_@issueid": "30",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "157",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "20",
                        "_raw_@issueid": "19",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "246",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "29",
                        "_raw_@issueid": "76",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "312",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processRegisterFinish(java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "17",
                        "_raw_@issueid": "57",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "368",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "12",
                        "_raw_@issueid": "126",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "469",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "11",
                        "_raw_@issueid": "28",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "572",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "boolean usernameExists(java.lang.String)",
                        "_raw_@functionrelativelocation": "10",
                        "_raw_@issueid": "82",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "768",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "boolean updateUsername(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "6",
                        "_raw_@issueid": "117",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
                        "issue_name": "J2EE Bad Practices: Direct Management of Connections",
                        "line_number": "828",
                        "severity": 3
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-245"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "245"
            },
            {
                "key": "_raw_@categoryid",
                "value": "7"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "nnp"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to getConnection() fails to use the J2EE container's resource management facilities as required by the J2EE standard.\r\n\r\nRequest the connection from the container rather than attempting to access it directly.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/245.html)\r\n\r\n",
        "issueName": "J2EE Bad Practices: Direct Management of Connections",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-245",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "245",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@functionrelativelocation": "-1",
                        "_raw_@issueid": "65",
                        "_raw_@scope": "UNKNOWN",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "Constants.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/utils/",
                        "_raw_@type": "JDBC_PASSWORD initializer",
                        "file_name": "com/veracode/verademo/utils/Constants.java",
                        "issue_description": "This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD initializer\r\n\r\nStore passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/259.html)\r\n\r\n",
                        "issue_name": "Use of Hard-coded Password",
                        "line_number": "1",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void !ctor()",
                        "_raw_@functionrelativelocation": "25",
                        "_raw_@issueid": "48",
                        "_raw_@scope": "com.veracode.verademo.utils.Constants",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "Constants.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/utils/",
                        "_raw_@type": "hardcodepasswdset",
                        "file_name": "com/veracode/verademo/utils/Constants.java",
                        "issue_description": "This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodepasswdset\r\n\r\nStore passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/259.html)\r\n\r\n",
                        "issue_name": "Use of Hard-coded Password",
                        "line_number": "13",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-259"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "259"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "4"
            },
            {
                "key": "_raw_@categoryid",
                "value": "10"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied. The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised. Moreover, the password cannot be changed without patching the software. If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack. In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD initializer\r\n\r\nStore passwords out-of-band from the application code. Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/259.html)\r\n\r\n",
        "issueName": "Use of Hard-coded Password",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-259",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "259",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@functionprototype": "java.lang.String md5(java.lang.String)",
                        "_raw_@functionrelativelocation": "19",
                        "_raw_@scope": "com.veracode.verademo.utils.User",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "User.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/utils/",
                        "_raw_@type": "java.security.MessageDigest.getInstance",
                        "file_name": "com/veracode/verademo/utils/User.java",
                        "issue_description": "This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.\r\n\r\nConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/327.html)\r\n\r\n",
                        "issue_name": "Use of a Broken or Risky Cryptographic Algorithm",
                        "line_number": "103",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String md5(java.lang.String)",
                        "_raw_@functionrelativelocation": "21",
                        "_raw_@issueid": "114",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.security.MessageDigest.getInstance",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.\r\n\r\nConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/327.html)\r\n\r\n",
                        "issue_name": "Use of a Broken or Risky Cryptographic Algorithm",
                        "line_number": "960",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-327"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "327"
            },
            {
                "key": "_raw_@categoryid",
                "value": "12"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5.\r\n\r\nConsider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/327.html)\r\n\r\n",
        "issueName": "Use of a Broken or Risky Cryptographic Algorithm",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-327",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "327",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "25",
                        "_raw_@issueid": "52",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextBoolean",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "127",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "40",
                        "_raw_@issueid": "125",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextInt",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "152",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "41",
                        "_raw_@issueid": "83",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextInt",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "155",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "54",
                        "_raw_@issueid": "29",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextInt",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "178",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "56",
                        "_raw_@issueid": "45",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextInt",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "182",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "57",
                        "_raw_@issueid": "23",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextInt",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "186",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "-1",
                        "_raw_@functionprototype": "java.lang.String processReset(java.lang.String, java.lang.String, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "58",
                        "_raw_@issueid": "123",
                        "_raw_@scope": "com.veracode.verademo.controller.ResetController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "ResetController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.util.Random.nextInt",
                        "file_name": "com/veracode/verademo/controller/ResetController.java",
                        "issue_description": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
                        "issue_name": "Insufficient Entropy",
                        "line_number": "190",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-331"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "331"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "12"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().\r\n\r\nIf this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL. In Java, use the SecureRandom object to ensure sufficient entropy.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/331.html)\r\n\r\n",
        "issueName": "Insufficient Entropy",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-331",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "331",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@functionprototype": "java.lang.String getMoreFeed(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "25",
                        "_raw_@issueid": "21",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "182",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "36",
                        "_raw_@issueid": "59",
                        "_raw_@scope": "com.veracode.verademo.commands.IgnoreCommand",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "IgnoreCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/veracode/verademo/commands/IgnoreCommand.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "38",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "44",
                        "_raw_@issueid": "56",
                        "_raw_@scope": "com.veracode.verademo.commands.IgnoreCommand",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "IgnoreCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/commands/IgnoreCommand.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "40",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "36",
                        "_raw_@issueid": "86",
                        "_raw_@scope": "com.veracode.verademo.commands.ListenCommand",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "ListenCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/veracode/verademo/commands/ListenCommand.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "38",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "44",
                        "_raw_@issueid": "93",
                        "_raw_@scope": "com.veracode.verademo.commands.ListenCommand",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "ListenCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/commands/ListenCommand.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "40",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "33",
                        "_raw_@issueid": "43",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "38",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@issueid": "85",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "40",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String ping(java.lang.String)",
                        "_raw_@issueid": "62",
                        "_raw_@scope": "com.veracode.verademo.controller.ToolsController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "ToolsController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.io.BufferedReader.!operator_javanewinit",
                        "file_name": "com/veracode/verademo/controller/ToolsController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.!operator_javanewinit().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "64",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String fortune(java.lang.String)",
                        "_raw_@functionrelativelocation": "71",
                        "_raw_@issueid": "111",
                        "_raw_@scope": "com.veracode.verademo.controller.ToolsController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "ToolsController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.io.BufferedReader.!operator_javanewinit",
                        "file_name": "com/veracode/verademo/controller/ToolsController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable br, which was previously allocated by a call to java.io.BufferedReader.!operator_javanewinit().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "96",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "18",
                        "_raw_@issueid": "27",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "166",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "20",
                        "_raw_@issueid": "71",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "246",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "35",
                        "_raw_@issueid": "75",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "250",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@issueid": "53",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "251",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "29",
                        "_raw_@issueid": "98",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.DriverManager.getConnection",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable connect, which was previously allocated by a call to java.sql.DriverManager.getConnection().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "312",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "51",
                        "_raw_@issueid": "99",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable statement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "315",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "58",
                        "_raw_@issueid": "7",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "316",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "39",
                        "_raw_@issueid": "72",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Connection.createStatement",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable sqlStatement, which was previously allocated by a call to java.sql.Connection.createStatement().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "493",
                        "severity": 0
                    },
                    {
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "41",
                        "_raw_@issueid": "12",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "0",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "The program fails to release or incorrectly releases the variable userHistoryResult, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
                        "issue_name": "Improper Resource Shutdown or Release",
                        "line_number": "494",
                        "severity": 0
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-404"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "404"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "17"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "zzz"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The program fails to release or incorrectly releases the variable result, which was previously allocated by a call to java.sql.Statement.executeQuery().\r\n\r\nEnsure that all code paths properly release this resource.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/404.html)\r\n\r\n",
        "issueName": "Improper Resource Shutdown or Release",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-404",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "404",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": null,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@functionprototype": "java.lang.String processBlabbers(java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "45",
                        "_raw_@issueid": "32",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.lang.Class.forName",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This call to java.lang.Class.forName() uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate the class name against a combination of white and black lists to ensure that only expected behavior is produced.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/470.html) \r\nOWASP (https://www.owasp.org/index.php/Unsafe_Reflection)\r\n\r\n",
                        "issue_name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
                        "line_number": "571",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-470"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "470"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "25"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to java.lang.Class.forName() uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application. Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to forName() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate the class name against a combination of white and black lists to ensure that only expected behavior is produced.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/470.html) \r\nOWASP (https://www.owasp.org/index.php/Unsafe_Reflection)\r\n\r\n",
        "issueName": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-470",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "470",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "User createFromRequest(javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "74",
                        "_raw_@issueid": "103",
                        "_raw_@scope": "com.veracode.verademo.utils.UserFactory",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserFactory.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/utils/",
                        "_raw_@type": "java.io.ObjectInput.readObject",
                        "file_name": "com/veracode/verademo/utils/UserFactory.java",
                        "issue_description": "The serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types. Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nAvoid passing untrusted data to ObjectInputStream; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/502.html)\r\n\r\n",
                        "issue_name": "Deserialization of Untrusted Data",
                        "line_number": "44",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-502"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "502"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "22"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "The serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types. Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.\r\n\r\nAvoid passing untrusted data to ObjectInputStream; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/502.html)\r\n\r\n",
        "issueName": "Deserialization of Untrusted Data",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-502",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "502",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "21",
                        "_raw_@issueid": "64",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/614.html) \r\nWASC (https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n",
                        "issue_name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                        "line_number": "173",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "63",
                        "_raw_@issueid": "88",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/614.html) \r\nWASC (https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n",
                        "issue_name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                        "line_number": "630",
                        "severity": 3
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "javax.servlet.http.HttpServletResponse updateInResponse(User, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "90",
                        "_raw_@issueid": "79",
                        "_raw_@scope": "com.veracode.verademo.utils.UserFactory",
                        "_raw_@severity": "2",
                        "_raw_@sourcefile": "UserFactory.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/utils/",
                        "_raw_@type": "javax.servlet.http.HttpServletResponse.addCookie",
                        "file_name": "com/veracode/verademo/utils/UserFactory.java",
                        "issue_description": "This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/614.html) \r\nWASC (https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n",
                        "issue_name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                        "line_number": "96",
                        "severity": 3
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-614"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "614"
            },
            {
                "key": "_raw_@categoryid",
                "value": "12"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "pnn"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "false"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set. Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session.\r\n\r\nSet the Secure attribute for all cookies used by HTTPS sessions.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/614.html) \r\nWASC (https://webappsec.pbworks.com/Insufficient-Transport-Layer-Protection)\r\n\r\n",
        "issueName": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-614",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "614",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 3,
        "severityCode": "Low",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processProfile(java.lang.String, java.lang.String, java.lang.String, org.springframework.web.multipart.MultipartFile, org.springframework.web.multipart.MultipartHttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "89",
                        "_raw_@issueid": "73",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.io.File.!operator_javanewinit",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/73.html) \r\nWASC (https://webappsec.pbworks.com/Path-Traversal)\r\n\r\n",
                        "issue_name": "External Control of File Name or Path",
                        "line_number": "659",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String downloadImage(java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "29",
                        "_raw_@issueid": "26",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.io.File.!operator_javanewinit",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/73.html) \r\nWASC (https://webappsec.pbworks.com/Path-Traversal)\r\n\r\n",
                        "issue_name": "External Control of File Name or Path",
                        "line_number": "698",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "boolean updateUsername(java.lang.String, java.lang.String)",
                        "_raw_@functionrelativelocation": "54",
                        "_raw_@issueid": "81",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.io.File.!operator_javanewinit",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/73.html) \r\nWASC (https://webappsec.pbworks.com/Path-Traversal)\r\n\r\n",
                        "issue_name": "External Control of File Name or Path",
                        "line_number": "862",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-73"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "false"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@affects_policy_compliance",
                "value": "true"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            },
            {
                "key": "_raw_@cweid",
                "value": "73"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to java.io.File.!operator_javanewinit() contains a path manipulation flaw. The argument to the function is a filename constructed using untrusted input. If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to !operator_javanewinit() contains tainted data from the variable path. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/73.html) \r\nWASC (https://webappsec.pbworks.com/Path-Traversal)\r\n\r\n",
        "issueName": "External Control of File Name or Path",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-73",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "73",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String ping(java.lang.String)",
                        "_raw_@functionrelativelocation": "27",
                        "_raw_@issueid": "91",
                        "_raw_@scope": "com.veracode.verademo.controller.ToolsController",
                        "_raw_@severity": "5",
                        "_raw_@sourcefile": "ToolsController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.lang.Runtime.exec",
                        "file_name": "com/veracode/verademo/controller/ToolsController.java",
                        "issue_description": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                        "line_number": "56",
                        "severity": 10
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String ping(java.lang.String)",
                        "_raw_@functionrelativelocation": "46",
                        "_raw_@issueid": "68",
                        "_raw_@scope": "com.veracode.verademo.controller.ToolsController",
                        "_raw_@severity": "5",
                        "_raw_@sourcefile": "ToolsController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.lang.Runtime.exec",
                        "file_name": "com/veracode/verademo/controller/ToolsController.java",
                        "issue_description": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                        "line_number": "59",
                        "severity": 10
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String fortune(java.lang.String)",
                        "_raw_@functionrelativelocation": "52",
                        "_raw_@issueid": "40",
                        "_raw_@scope": "com.veracode.verademo.controller.ToolsController",
                        "_raw_@severity": "5",
                        "_raw_@sourcefile": "ToolsController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.lang.Runtime.exec",
                        "file_name": "com/veracode/verademo/controller/ToolsController.java",
                        "issue_description": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                        "line_number": "88",
                        "severity": 10
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String fortune(java.lang.String)",
                        "_raw_@functionrelativelocation": "58",
                        "_raw_@issueid": "94",
                        "_raw_@scope": "com.veracode.verademo.controller.ToolsController",
                        "_raw_@severity": "5",
                        "_raw_@sourcefile": "ToolsController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.lang.Runtime.exec",
                        "file_name": "com/veracode/verademo/controller/ToolsController.java",
                        "issue_description": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variable cmd. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                        "line_number": "91",
                        "severity": 10
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-78"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "78"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "3"
            },
            {
                "key": "_raw_@categoryid",
                "value": "18"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ccp"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to java.lang.Runtime.exec() contains a command injection flaw. The argument to the function is constructed using untrusted input. If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process. The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nValidate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. When using black lists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters. Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/78.html) \r\nOWASP (https://www.owasp.org/index.php/Command_Injection) \r\nWASC (https://webappsec.pbworks.com/OS-Commanding)\r\n\r\n",
        "issueName": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-78",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "78",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 10,
        "severityCode": "Critical",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "57",
                        "_raw_@issueid": "13",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "blab.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/blab.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "105",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "61",
                        "_raw_@issueid": "31",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "blab.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/blab.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "109",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "67",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "blab.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/blab.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "111",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@issueid": "9",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "blabbers.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/blabbers.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "102",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "42",
                        "_raw_@issueid": "66",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "blabbers.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/blabbers.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "105",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "59",
                        "_raw_@issueid": "16",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "blabbers.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/blabbers.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "120",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "15",
                        "_raw_@issueid": "116",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "feed.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/feed.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable currentUser. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "59",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "34",
                        "_raw_@issueid": "20",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "feed.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/feed.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "94",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@issueid": "120",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "feed.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/feed.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "97",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "42",
                        "_raw_@issueid": "35",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "feed.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/feed.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "99",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "67",
                        "_raw_@issueid": "132",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "feed.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/feed.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "142",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "53",
                        "_raw_@issueid": "14",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "login.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/login.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable target. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "79",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "62",
                        "_raw_@issueid": "96",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "login.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/login.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "86",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "25",
                        "_raw_@issueid": "41",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "profile.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/profile.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "91",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "36",
                        "_raw_@issueid": "39",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "profile.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/profile.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "120",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "55",
                        "_raw_@issueid": "102",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "profile.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/profile.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "161",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "58",
                        "_raw_@issueid": "42",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "profile.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/profile.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "164",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "76",
                        "_raw_@issueid": "63",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "profile.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/profile.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable events.get(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "201",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "55",
                        "_raw_@issueid": "133",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "register-finish.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/register-finish.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "83",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "60",
                        "_raw_@issueid": "78",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "register.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/register.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "87",
                        "severity": 4
                    },
                    {
                        "_raw_@exploitlevel": "2",
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "37",
                        "_raw_@issueid": "106",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "tools.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "javax.servlet.jsp.JspWriter.print",
                        "file_name": "/WEB-INF/views/tools.jsp",
                        "issue_description": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable request.getParameter(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "65",
                        "severity": 4
                    },
                    {
                        "_raw_@functionprototype": "void _jspService(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "52",
                        "_raw_@issueid": "36",
                        "_raw_@scope": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "tools.jsp",
                        "_raw_@sourcefilepath": "/WEB-INF/views/",
                        "_raw_@type": "java.io.Writer.write",
                        "file_name": "/WEB-INF/views/tools.jsp",
                        "issue_description": "This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable ping. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
                        "line_number": "68",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-80"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "80"
            },
            {
                "key": "_raw_@categoryid",
                "value": "20"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppn"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.\r\n\r\nUse contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/79.html) \r\nOWASP (https://www.owasp.org/index.php/XSS) \r\nWASC (https://webappsec.pbworks.com/Cross-Site-Scripting) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-80",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "80",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showBlabbers(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "36",
                        "_raw_@issueid": "90",
                        "_raw_@scope": "com.veracode.verademo.controller.BlabController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "BlabController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.PreparedStatement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/BlabController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "490",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "44",
                        "_raw_@scope": "com.veracode.verademo.commands.IgnoreCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "IgnoreCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/commands/IgnoreCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "40",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "92",
                        "_raw_@issueid": "112",
                        "_raw_@scope": "com.veracode.verademo.commands.IgnoreCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "IgnoreCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/veracode/verademo/commands/IgnoreCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "47",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "44",
                        "_raw_@issueid": "5",
                        "_raw_@scope": "com.veracode.verademo.commands.ListenCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "ListenCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/commands/ListenCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "40",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "92",
                        "_raw_@issueid": "24",
                        "_raw_@scope": "com.veracode.verademo.commands.ListenCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "ListenCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/veracode/verademo/commands/ListenCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "47",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@issueid": "104",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "40",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "75",
                        "_raw_@issueid": "8",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "47",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "void execute(java.lang.String)",
                        "_raw_@functionrelativelocation": "92",
                        "_raw_@issueid": "38",
                        "_raw_@scope": "com.veracode.verademo.commands.RemoveAccountCommand",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "RemoveAccountCommand.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/commands/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/veracode/verademo/commands/RemoveAccountCommand.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "51",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processLogin(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)",
                        "_raw_@functionrelativelocation": "18",
                        "_raw_@issueid": "22",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "166",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showPasswordHint(java.lang.String)",
                        "_raw_@functionrelativelocation": "38",
                        "_raw_@issueid": "127",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "251",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processRegister(java.lang.String, javax.servlet.http.HttpServletRequest, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "58",
                        "_raw_@issueid": "105",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "316",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String processRegisterFinish(java.lang.String, java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.ui.Model)",
                        "_raw_@functionrelativelocation": "59",
                        "_raw_@issueid": "89",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.execute",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "384",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "41",
                        "_raw_@issueid": "100",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.Statement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "494",
                        "severity": 8
                    },
                    {
                        "_raw_@exploitlevel": "0",
                        "_raw_@functionprototype": "java.lang.String showProfile(java.lang.String, org.springframework.ui.Model, javax.servlet.http.HttpServletRequest)",
                        "_raw_@functionrelativelocation": "54",
                        "_raw_@issueid": "50",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "4",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "java.sql.PreparedStatement.executeQuery",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This database query contains a SQL injection flaw. The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
                        "issue_name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                        "line_number": "505",
                        "severity": 8
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-89"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "89"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "3"
            },
            {
                "key": "_raw_@categoryid",
                "value": "19"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "ppp"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This database query contains a SQL injection flaw. The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input. An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.\r\n\r\nAvoid dynamically constructing SQL queries. Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query. Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/89.html) \r\nOWASP (https://www.owasp.org/index.php/SQL_injection) \r\nWASC (https://webappsec.pbworks.com/SQL-Injection)\r\n\r\n",
        "issueName": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-89",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "89",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 8,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@functionprototype": "void emailUser(java.lang.String)",
                        "_raw_@functionrelativelocation": "67",
                        "_raw_@issueid": "97",
                        "_raw_@scope": "com.veracode.verademo.controller.UserController",
                        "_raw_@severity": "3",
                        "_raw_@sourcefile": "UserController.java",
                        "_raw_@sourcefilepath": "com/veracode/verademo/controller/",
                        "_raw_@type": "javax.mail.Message.setSubject",
                        "file_name": "com/veracode/verademo/controller/UserController.java",
                        "issue_description": "This call to javax.mail.Message.setSubject() contains a CRLF injection flaw. Writing untrusted input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nSanitize CRLF sequences from untrusted input.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/93.html) \r\nOWASP (https://www.owasp.org/index.php/CRLF_Injection) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
                        "issue_name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
                        "line_number": "432",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "module",
                "value": "verademo.war"
            },
            {
                "key": "key_values",
                "value": [
                    "cwe"
                ]
            },
            {
                "key": "cwe",
                "value": "CWE-93"
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "_raw_@count",
                "value": "1"
            },
            {
                "key": "_raw_@note",
                "value": ""
            },
            {
                "key": "_raw_@cweid",
                "value": "93"
            },
            {
                "key": "_raw_@remediationeffort",
                "value": "2"
            },
            {
                "key": "_raw_@categoryid",
                "value": "21"
            },
            {
                "key": "_raw_@pcirelated",
                "value": "true"
            },
            {
                "key": "_raw_@date_first_occurrence",
                "value": "2020-04-23 14:50:59 UTC"
            },
            {
                "key": "_raw_@remediation_status",
                "value": "Open"
            },
            {
                "key": "_raw_@cia_impact",
                "value": "npp"
            },
            {
                "key": "_raw_@grace_period_expires",
                "value": "2020-04-23 14:55:04 UTC"
            },
            {
                "key": "_raw_@mitigation_status",
                "value": "none"
            },
            {
                "key": "_raw_@mitigation_status_desc",
                "value": "Not Mitigated"
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": null,
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "This call to javax.mail.Message.setSubject() contains a CRLF injection flaw. Writing untrusted input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.\r\n\r\nSanitize CRLF sequences from untrusted input.\r\n\r\nReferences: \r\nCWE (https://cwe.mitre.org/data/definitions/93.html) \r\nOWASP (https://www.owasp.org/index.php/CRLF_Injection) \r\nSupported Cleansers (https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA)\r\n\r\n",
        "issueName": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "CWE-93",
        "libraryName": null,
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "93",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SAST",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "SRCCLR-SID-1847",
                        "_raw_@cwe_id": "",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-collections4-4.0.jar"
                        },
                        "issue_description": "Apache Commons includes a class called InvokerTransformer. An application is vulnerable to a deserialization attack if this class is available on the classpath and the application deserializes untrusted or user-supplied data. It's not necessary to actually use InvokerTransfomer to be vulnerable. With these two criteria satisfied, an attacker may construct a gadget chain using classes in the component to execute arbitrary code. The chain relies on the class InvokerTransformer in the org.apache.commons.collections.functors package to invoke methods during the deserialization process.\n\nThe fix prevents deserialization of InvokerTransformer by default unless it's specifically enabled.\n\nCVE-2015-4852, CVE-2015-6420, CVE-2015-7501, and CVE-2015-7450 are all related to this artifact.",
                        "issue_name": "SRCCLR-SID-1847 - (org.apache.commons, commons-collections4, 4.0)",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-collections4-4.0.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "org.apache.commons"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:22 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "9fdb0cb9-3f05-4fb3-b221-cd97bdacc307"
            },
            {
                "key": "_raw_@file_name",
                "value": "commons-collections4-4.0.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "da217367fd25e88df52ba79e47658d4cf928b0d1"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "5.1"
            },
            {
                "key": "_raw_@description",
                "value": "The Apache Commons Collections package contains types that extend and augment the Java Collections Framework."
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-collections4-4.0.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "4.0",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Apache Commons includes a class called InvokerTransformer. An application is vulnerable to a deserialization attack if this class is available on the classpath and the application deserializes untrusted or user-supplied data. It's not necessary to actually use InvokerTransfomer to be vulnerable. With these two criteria satisfied, an attacker may construct a gadget chain using classes in the component to execute arbitrary code. The chain relies on the class InvokerTransformer in the org.apache.commons.collections.functors package to invoke methods during the deserialization process.\n\nThe fix prevents deserialization of InvokerTransformer by default unless it's specifically enabled.\n\nCVE-2015-4852, CVE-2015-6420, CVE-2015-7501, and CVE-2015-7450 are all related to this artifact.",
        "issueName": "SRCCLR-SID-1847 - (org.apache.commons, commons-collections4, 4.0)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "commons-collections4//4.0",
        "libraryName": "commons-collections4",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2015-4852",
                "type": "cve"
            },
            {
                "id": "2015-6420",
                "type": "cve"
            },
            {
                "id": "2015-7450",
                "type": "cve"
            },
            {
                "id": "2015-7501",
                "type": "cve"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2016-1000031",
                        "_raw_@cwe_id": "CWE-284",
                        "_raw_@severity": "4",
                        "_raw_@severity_desc": "High",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-fileupload-1.3.2.jar"
                        },
                        "issue_description": "Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution",
                        "issue_name": "CVE-2016-1000031 - (commons-fileupload, commons-fileupload, 1.3.2)",
                        "severity": 8
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-fileupload-1.3.2.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "commons-fileupload"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:22 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "c9daab8d-4347-44b0-ae8f-3d9a6060193f"
            },
            {
                "key": "_raw_@file_name",
                "value": "commons-fileupload-1.3.2.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "5d7491ed6ebd02b6a8d2305f8e6b7fe5dbd95f72"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "7.5"
            },
            {
                "key": "_raw_@description",
                "value": "The Apache Commons FileUpload component provides a simple yet flexible means of adding support for multipart\n    file upload functionality to servlets and web applications."
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-fileupload-1.3.2.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "CVE-2016-1000031",
                        "@cve_summary": "Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution",
                        "@cvss_score": "7.5",
                        "@cwe_id": "CWE-284",
                        "@first_found_date": "2020-04-23 14:53:22 UTC",
                        "@mitigation": "false",
                        "@severity": "4",
                        "@severity_desc": "High",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "1.3.2",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Apache Commons FileUpload before 1.3.3 DiskFileItem File Manipulation Remote Code Execution",
        "issueName": "CVE-2016-1000031 - (commons-fileupload, commons-fileupload, 1.3.2)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "commons-fileupload//1.3.2",
        "libraryName": "commons-fileupload",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2016-1000031",
                "type": "cve"
            },
            {
                "id": "284",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 8,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "SRCCLR-SID-5295",
                        "_raw_@cwe_id": "",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-io-2.4.jar"
                        },
                        "issue_description": "commons-io is vulnerable to remote code execution (RCE) attacks. These attacks are possible because the library doesn't restrict the classes which can be accepted when deserializing a binary.",
                        "issue_name": "SRCCLR-SID-5295 - (commons-io, commons-io, 2.4)",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-io-2.4.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "commons-io"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:23 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "c7ce22bf-c9d5-4465-9fb7-5aedd8261079"
            },
            {
                "key": "_raw_@file_name",
                "value": "commons-io-2.4.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "b1b6ea3b7e4aa4f492509a4952029cd8e48019ad"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "5.1"
            },
            {
                "key": "_raw_@description",
                "value": "The Commons IO library contains utility classes, stream implementations, file filters, \nfile comparators, endian transformation classes, and much more."
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/commons-io-2.4.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "SRCCLR-SID-5295",
                        "@cve_summary": "commons-io is vulnerable to remote code execution (RCE) attacks. These attacks are possible because the library doesn't restrict the classes which can be accepted when deserializing a binary.",
                        "@cvss_score": "5.1",
                        "@cwe_id": "",
                        "@first_found_date": "2020-04-23 14:53:23 UTC",
                        "@mitigation": "false",
                        "@severity": "3",
                        "@severity_desc": "Medium",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "2.4",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "commons-io is vulnerable to remote code execution (RCE) attacks. These attacks are possible because the library doesn't restrict the classes which can be accepted when deserializing a binary.",
        "issueName": "SRCCLR-SID-5295 - (commons-io, commons-io, 2.4)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "commons-io//2.4",
        "libraryName": "commons-io",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2015-0254",
                        "_raw_@severity": "4",
                        "_raw_@severity_desc": "High",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/jstl-1.2.jar"
                        },
                        "issue_description": "Apache Standard Taglibs before 1.2.3 allows remote attackers to execute arbitrary code or conduct external XML entity (XXE) attacks via a crafted XSLT extension in a (1) <x:parse> or (2) <x:transform> JSTL XML tag.",
                        "issue_name": "CVE-2015-0254 - (javax.servlet, jstl, 1.2)",
                        "severity": 8
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/jstl-1.2.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "javax.servlet"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:23 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "8b4f55d4-ea0b-4115-a79f-41e564717d1e"
            },
            {
                "key": "_raw_@file_name",
                "value": "jstl-1.2.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "74aca283cd4f4b4f3e425f5820cda58f44409547"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "7.5"
            },
            {
                "key": "_raw_@description",
                "value": ""
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/jstl-1.2.jar"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "CVE-2015-0254",
                        "@cve_summary": "Apache Standard Taglibs before 1.2.3 allows remote attackers to execute arbitrary code or conduct external XML entity (XXE) attacks via a crafted XSLT extension in a (1) <x:parse> or (2) <x:transform> JSTL XML tag.",
                        "@cvss_score": "7.5",
                        "@cwe_id": "",
                        "@first_found_date": "2020-04-23 14:53:23 UTC",
                        "@mitigation": "false",
                        "@severity": "4",
                        "@severity_desc": "High",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "1.2",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Apache Standard Taglibs before 1.2.3 allows remote attackers to execute arbitrary code or conduct external XML entity (XXE) attacks via a crafted XSLT extension in a (1) <x:parse> or (2) <x:transform> JSTL XML tag.",
        "issueName": "CVE-2015-0254 - (javax.servlet, jstl, 1.2)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "jstl//1.2",
        "libraryName": "jstl",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2015-0254",
                "type": "cve"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 8,
        "severityCode": "High",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2019-17571",
                        "_raw_@cwe_id": "",
                        "_raw_@severity": "20",
                        "_raw_@severity_desc": "High",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/log4j-1.2.17.jar"
                        },
                        "issue_description": "log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in `TcpSocketServer` and `UdpSocketServer` when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget.",
                        "issue_name": "CVE-2019-17571 - (log4j, log4j, 1.2.17)",
                        "severity": -1
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/log4j-1.2.17.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "log4j"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:22 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "8d9a63d8-808b-4233-9e54-279d0f51826f"
            },
            {
                "key": "_raw_@file_name",
                "value": "log4j-1.2.17.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "5af35056b4d257e4b64b9e8069c0746e8b08629f"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "7.5"
            },
            {
                "key": "_raw_@description",
                "value": "Apache Log4j 1.2"
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/log4j-1.2.17.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "CVE-2019-17571",
                        "@cve_summary": "log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in `TcpSocketServer` and `UdpSocketServer` when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget.",
                        "@cvss_score": "7.5",
                        "@cwe_id": "",
                        "@first_found_date": "2020-04-23 14:53:22 UTC",
                        "@mitigation": "false",
                        "@severity": "20",
                        "@severity_desc": "High",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "1.2.17",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "log4j-core is vulnerable to arbitrary code execution. Deserialization of untrusted data in `TcpSocketServer` and `UdpSocketServer` when listening for log data allows an attacker to execute arbitrary code via a malicious deserialization gadget.",
        "issueName": "CVE-2019-17571 - (log4j, log4j, 1.2.17)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "log4j//1.2.17",
        "libraryName": "log4j",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2019-17571",
                "type": "cve"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": -1,
        "severityCode": "Info",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2017-3523",
                        "_raw_@cwe_id": "CWE-284",
                        "_raw_@severity": "0",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/mysql-connector-java-5.1.35.jar"
                        },
                        "issue_description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).",
                        "issue_name": "CVE-2017-3523 - (mysql, mysql-connector-java, 5.1.35)",
                        "severity": 0
                    },
                    {
                        "_raw_@cve_id": "CVE-2017-3586",
                        "_raw_@cvss_score": "5.5",
                        "_raw_@cwe_id": "CWE-284",
                        "_raw_@severity": "1",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/mysql-connector-java-5.1.35.jar"
                        },
                        "issue_description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.41 and earlier. Easily \"exploitable\" vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data as well as unauthorized read access to a subset of MySQL Connectors accessible data. CVSS 3.0 Base Score 6.4 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N).",
                        "issue_name": "CVE-2017-3586 - (mysql, mysql-connector-java, 5.1.35)",
                        "severity": 1
                    },
                    {
                        "_raw_@cve_id": "CVE-2017-3589",
                        "_raw_@cvss_score": "2.1",
                        "_raw_@cwe_id": "CWE-284",
                        "_raw_@severity": "5",
                        "_raw_@severity_desc": "Low",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/mysql-connector-java-5.1.35.jar"
                        },
                        "issue_description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.41 and earlier. Easily \"exploitable\" vulnerability allows low privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to some of MySQL Connectors accessible data. CVSS 3.0 Base Score 3.3 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N).",
                        "issue_name": "CVE-2017-3589 - (mysql, mysql-connector-java, 5.1.35)",
                        "severity": 10
                    },
                    {
                        "_raw_@cve_id": "CVE-2019-2692",
                        "_raw_@cvss_score": "3.5",
                        "_raw_@cwe_id": "CWE-20",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Low",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/mysql-connector-java-5.1.35.jar"
                        },
                        "issue_description": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 8.0.15 and prior. Difficult to exploit vulnerability allows high privileged attacker with logon to the infrastructure where MySQL Connectors executes to compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 6.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H).",
                        "issue_name": "CVE-2019-2692 - (mysql, mysql-connector-java, 5.1.35)",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/mysql-connector-java-5.1.35.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "mysql"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:22 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "660d7f35-ce53-4186-bbd2-8dc81910d630"
            },
            {
                "key": "_raw_@file_name",
                "value": "mysql-connector-java-5.1.35.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "b6ac941b7288376a7e8bc6490264bbd4427fb94e"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "4"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "6.0"
            },
            {
                "key": "_raw_@description",
                "value": "MySQL java connector"
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/mysql-connector-java-5.1.35.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/GPL-2.0.html",
                        "@name": "GNU General Public License v2.0 only",
                        "@risk_rating": "4",
                        "@spdx_id": "GPL-2.0"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "5.1.35",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Vulnerability in the MySQL Connectors component of Oracle MySQL (subcomponent: Connector/J). Supported versions that are affected are 5.1.40 and earlier. Difficult to exploit vulnerability allows low privileged attacker with network access via multiple protocols to compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of MySQL Connectors. CVSS 3.0 Base Score 8.5 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H).",
        "issueName": "CVE-2017-3523 - (mysql, mysql-connector-java, 5.1.35)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "mysql-connector-java//5.1.35",
        "libraryName": "mysql-connector-java",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2017-3523",
                "type": "cve"
            },
            {
                "id": "2017-3586",
                "type": "cve"
            },
            {
                "id": "2017-3589",
                "type": "cve"
            },
            {
                "id": "2019-2692",
                "type": "cve"
            },
            {
                "id": "20",
                "type": "cwe"
            },
            {
                "id": "284",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 10,
        "severityCode": "Critical",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2018-1272",
                        "_raw_@cwe_id": "CWE-88",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": [
                            {
                                "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-core-4.3.10.RELEASE.jar"
                            },
                            {
                                "@value": "non-binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-core-4.3.10.RELEASE.jar"
                            }
                        ],
                        "issue_description": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.",
                        "issue_name": "CVE-2018-1272 - (org.springframework, spring-core, 4.3.10.RELEASE)",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-core-4.3.10.RELEASE.jar",
                    "non-binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-core-4.3.10.RELEASE.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "org.springframework"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:23 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "5733da72-0759-44ea-bdcc-4a3eb316b75d"
            },
            {
                "key": "_raw_@file_name",
                "value": "spring-core-4.3.10.RELEASE.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "db1462df62dbedad7244da30ec471390660271c0"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "1"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "6.0"
            },
            {
                "key": "_raw_@description",
                "value": "Spring Core"
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": [
                        {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-core-4.3.10.RELEASE.jar"
                        },
                        {
                            "@value": "non-binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-core-4.3.10.RELEASE.jar"
                        }
                    ]
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_vulnerabilities",
                "value": {
                    "vulnerability": {
                        "@cve_id": "CVE-2018-1272",
                        "@cve_summary": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.",
                        "@cvss_score": "6.0",
                        "@cwe_id": "CWE-88",
                        "@first_found_date": "2020-04-23 14:53:23 UTC",
                        "@mitigation": "false",
                        "@severity": "3",
                        "@severity_desc": "Medium",
                        "@vulnerability_affects_policy_compliance": "false"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "4.3.10.RELEASE",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, provide client-side support for multipart requests. When Spring MVC or Spring WebFlux server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.",
        "issueName": "CVE-2018-1272 - (org.springframework, spring-core, 4.3.10.RELEASE)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "spring-core//4.3.10.RELEASE",
        "libraryName": "spring-core",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2018-1272",
                "type": "cve"
            },
            {
                "id": "88",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2018-11039",
                        "_raw_@cvss_score": "4.3",
                        "_raw_@cwe_id": "CWE-20",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-web-4.3.10.RELEASE.jar"
                        },
                        "issue_description": "spring-web is vulnerable to cross-site tracing (XST) attacks. The vulnerability exists as `HiddenHttpMethodFilter` allows web applications to change existing HTTP request method to any HTTP method, causing applications with existing cross-site scripting (XSS) vulnerability to be vulnerable to XST.",
                        "issue_name": "CVE-2018-11039 - (org.springframework, spring-web, 4.3.10.RELEASE)",
                        "severity": 3
                    },
                    {
                        "_raw_@cve_id": "CVE-2018-15756",
                        "_raw_@cwe_id": "CWE-399",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-web-4.3.10.RELEASE.jar"
                        },
                        "issue_description": "spring-web is vulnerable to denial of service (DoS). A malicious user can pass a HTTP request containing a header with overlapping ranges, leading to an error which would crash the service.",
                        "issue_name": "CVE-2018-15756 - (org.springframework, spring-web, 4.3.10.RELEASE)",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-web-4.3.10.RELEASE.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "org.springframework"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:22 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "a93299f2-42c0-48ba-9476-d4ca0246d6ce"
            },
            {
                "key": "_raw_@file_name",
                "value": "spring-web-4.3.10.RELEASE.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "6344501cb03cb4787c67cf3f820a471e07b9203b"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "2"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "5.0"
            },
            {
                "key": "_raw_@description",
                "value": "Spring Web"
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-web-4.3.10.RELEASE.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "4.3.10.RELEASE",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "spring-web is vulnerable to cross-site tracing (XST) attacks. The vulnerability exists as `HiddenHttpMethodFilter` allows web applications to change existing HTTP request method to any HTTP method, causing applications with existing cross-site scripting (XSS) vulnerability to be vulnerable to XST.",
        "issueName": "CVE-2018-11039 - (org.springframework, spring-web, 4.3.10.RELEASE)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "spring-web//4.3.10.RELEASE",
        "libraryName": "spring-web",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2018-11039",
                "type": "cve"
            },
            {
                "id": "2018-15756",
                "type": "cve"
            },
            {
                "id": "20",
                "type": "cwe"
            },
            {
                "id": "399",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    },
    {
        "additionalData": [
            {
                "key": "unique_data",
                "value": [
                    {
                        "_raw_@cve_id": "CVE-2018-11040",
                        "_raw_@cvss_score": "4.3",
                        "_raw_@cwe_id": "CWE-254",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-webmvc-4.3.10.RELEASE.jar"
                        },
                        "issue_description": "Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the \"jsonp\" and \"callback\" JSONP parameters, enabling cross-domain requests.",
                        "issue_name": "CVE-2018-11040 - (org.springframework, spring-webmvc, 4.3.10.RELEASE)",
                        "severity": 4
                    },
                    {
                        "_raw_@cve_id": "CVE-2018-1199",
                        "_raw_@cwe_id": "CWE-20",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-webmvc-4.3.10.RELEASE.jar"
                        },
                        "issue_description": "Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4, and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before 5.0.3) does not consider URL path parameters when processing security constraints. By adding a URL path parameter with special encodings, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification. Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. In this particular attack, different character encodings used in path parameters allows secured Spring MVC static resource URLs to be bypassed.",
                        "issue_name": "CVE-2018-1199 - (org.springframework, spring-webmvc, 4.3.10.RELEASE)",
                        "severity": 4
                    },
                    {
                        "_raw_@cve_id": "CVE-2018-1271",
                        "_raw_@cvss_score": "4.3",
                        "_raw_@cwe_id": "CWE-23",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-webmvc-4.3.10.RELEASE.jar"
                        },
                        "issue_description": "Spring Framework, versions 5.0 prior to 5.0.5 and versions 4.3 prior to 4.3.15 and older unsupported versions, allow applications to configure Spring MVC to serve static resources (e.g. CSS, JS, images). When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.",
                        "issue_name": "CVE-2018-1271 - (org.springframework, spring-webmvc, 4.3.10.RELEASE)",
                        "severity": 4
                    },
                    {
                        "_raw_@cve_id": "CVE-2018-15756",
                        "_raw_@cwe_id": "CWE-399",
                        "_raw_@severity": "3",
                        "_raw_@severity_desc": "Medium",
                        "file_name": {
                            "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-webmvc-4.3.10.RELEASE.jar"
                        },
                        "issue_description": "spring-web is vulnerable to denial of service (DoS). A malicious user can pass a HTTP request containing a header with overlapping ranges, leading to an error which would crash the service.",
                        "issue_name": "CVE-2018-15756 - (org.springframework, spring-webmvc, 4.3.10.RELEASE)",
                        "severity": 4
                    }
                ]
            },
            {
                "key": "file_paths",
                "value": [
                    "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-webmvc-4.3.10.RELEASE.jar"
                ]
            },
            {
                "key": "key_values",
                "value": [
                    "library_name",
                    "current_version"
                ]
            },
            {
                "key": "build_id",
                "value": "7344883"
            },
            {
                "key": "vendor",
                "value": "org.springframework"
            },
            {
                "key": "added_date",
                "value": "2020-04-23 14:53:22 UTC"
            },
            {
                "key": "_raw_@component_id",
                "value": "d71d3730-b197-4fac-8aff-f89ed626b5a6"
            },
            {
                "key": "_raw_@file_name",
                "value": "spring-webmvc-4.3.10.RELEASE.jar"
            },
            {
                "key": "_raw_@sha1",
                "value": "6809017a5a76bdaf1957f1cc0a892d448fc6f3df"
            },
            {
                "key": "_raw_@vulnerabilities",
                "value": "4"
            },
            {
                "key": "_raw_@max_cvss_score",
                "value": "5.0"
            },
            {
                "key": "_raw_@description",
                "value": "Spring Web MVC"
            },
            {
                "key": "_raw_@new",
                "value": "false"
            },
            {
                "key": "_raw_file_paths",
                "value": {
                    "file_path": {
                        "@value": "binaries/files_1589901947340_zip/target/verademo.war#zip:WEB-INF/lib/spring-webmvc-4.3.10.RELEASE.jar"
                    }
                }
            },
            {
                "key": "_raw_licenses",
                "value": {
                    "license": {
                        "@license_url": "https://spdx.org/licenses/Apache-2.0.html",
                        "@name": "Apache License 2.0",
                        "@risk_rating": "2",
                        "@spdx_id": "Apache-2.0"
                    }
                }
            },
            {
                "key": "_raw_violated_policy_rules",
                "value": null
            }
        ],
        "alert": false,
        "alertRulesets": [],
        "author": null,
        "code": null,
        "confidence": null,
        "currentVersion": "4.3.10.RELEASE",
        "customerId": "4503657098653210424",
        "cvss": null,
        "cvssVector": null,
        "discoveryIssueId": null,
        "discoveryRunTime": null,
        "discoveryTimespan": null,
        "effort": null,
        "exploitabilityScore": null,
        "fileName": null,
        "host": null,
        "id": null,
        "ignore": false,
        "ignoreRulesets": [],
        "imageLayerId": null,
        "imageNamespace": null,
        "impactScore": null,
        "ip": null,
        "issueDescription": "Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the \"jsonp\" and \"callback\" JSONP parameters, enabling cross-domain requests.",
        "issueName": "CVE-2018-11040 - (org.springframework, spring-webmvc, 4.3.10.RELEASE)",
        "issueType": "vulnerability",
        "jobId": "7208394414039548170",
        "jobTags": [],
        "key": "spring-webmvc//4.3.10.RELEASE",
        "libraryName": "spring-webmvc",
        "lineNumber": null,
        "linesOfCodeImpacted": null,
        "link": null,
        "overrideRuleDetails": null,
        "policyId": "3507742950716442876",
        "policyName": "policy with upload",
        "port": null,
        "product": "veracode",
        "project": null,
        "referenceIdentifiers": [
            {
                "id": "2018-11040",
                "type": "cve"
            },
            {
                "id": "2018-1199",
                "type": "cve"
            },
            {
                "id": "2018-1271",
                "type": "cve"
            },
            {
                "id": "2018-15756",
                "type": "cve"
            },
            {
                "id": "20",
                "type": "cwe"
            },
            {
                "id": "23",
                "type": "cwe"
            },
            {
                "id": "254",
                "type": "cwe"
            },
            {
                "id": "399",
                "type": "cwe"
            }
        ],
        "refinementVersion": "1.0",
        "remediationRunTime": null,
        "remediationSteps": null,
        "remediationTags": [],
        "remediationTimespan": null,
        "riLicense": null,
        "rule": null,
        "runTime": 1536070894,
        "scanId": null,
        "scanSeverity": null,
        "scanStatus": null,
        "scanTool": "veracode",
        "scanType": "SCA",
        "scenarioId": "8207742350716442876",
        "severity": 4,
        "severityCode": "Medium",
        "status": "Detection",
        "tags": [],
        "target": "Custom Target virtual url",
        "targetId": "Mq07z7LFR7qxrJON18125g",
        "upgradeVersion": null,
        "url": null,
        "vulnerabilityDetails": null
    }
]